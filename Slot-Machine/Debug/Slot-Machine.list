
Slot-Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d35c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800d4ec  0800d4ec  0000e4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d670  0800d670  0000f08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d670  0800d670  0000e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d678  0800d678  0000f08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d678  0800d678  0000e678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d67c  0800d67c  0000e67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800d680  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f08c  2**0
                  CONTENTS
 10 .bss          000053bc  2000008c  2000008c  0000f08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005448  20005448  0000f08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000202c4  00000000  00000000  0000f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052b6  00000000  00000000  0002f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148c  00000000  00000000  00036128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007eaa  00000000  00000000  000375b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021834  00000000  00000000  0003f45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8526  00000000  00000000  00060c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001391b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079f8  00000000  00000000  001391fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00140bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4d4 	.word	0x0800d4d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d4d4 	.word	0x0800d4d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 ff87 	bl	8001478 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f86f 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f97f 	bl	8000870 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000572:	f000 f8d5 	bl	8000720 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000576:	f000 f901 	bl	800077c <MX_I2S3_Init>
  MX_SPI1_Init();
 800057a:	f000 f943 	bl	8000804 <MX_SPI1_Init>
  MX_RNG_Init();
 800057e:	f000 f92d 	bl	80007dc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
#if DEBUG
	srand((unsigned int) xTaskGetTickCount());
 8000582:	f00a f8cd 	bl	800a720 <xTaskGetTickCount>
 8000586:	4603      	mov	r3, r0
 8000588:	4618      	mov	r0, r3
 800058a:	f00c f83f 	bl	800c60c <srand>
  }
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058e:	f008 fd0f 	bl	8008fb0 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	200a      	movs	r0, #10
 8000598:	f009 f901 	bl	800979e <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a20      	ldr	r2, [pc, #128]	@ (8000620 <main+0xc0>)
 80005a0:	6013      	str	r3, [r2, #0]
  xAnimationQueue = xQueueCreate(5, sizeof(Animation_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	2005      	movs	r0, #5
 80005a8:	f009 f8f9 	bl	800979e <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000624 <main+0xc4>)
 80005b0:	6013      	str	r3, [r2, #0]
  if(xEventQueue == NULL || xAnimationQueue == NULL) {
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <main+0xc0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <main+0x62>
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <main+0xc4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <main+0x66>
	  Error_Handler();
 80005c2:	f000 fca7 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c6:	4a18      	ldr	r2, [pc, #96]	@ (8000628 <main+0xc8>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4818      	ldr	r0, [pc, #96]	@ (800062c <main+0xcc>)
 80005cc:	f008 fd3a 	bl	8009044 <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <main+0xd0>)
 80005d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(AnimateTask, "Animator", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	4914      	ldr	r1, [pc, #80]	@ (8000634 <main+0xd4>)
 80005e4:	4814      	ldr	r0, [pc, #80]	@ (8000638 <main+0xd8>)
 80005e6:	f009 fe0b 	bl	800a200 <xTaskCreate>
  xTaskCreate(PollButtonTask, "PollButton", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	4911      	ldr	r1, [pc, #68]	@ (800063c <main+0xdc>)
 80005f8:	4811      	ldr	r0, [pc, #68]	@ (8000640 <main+0xe0>)
 80005fa:	f009 fe01 	bl	800a200 <xTaskCreate>
  xTaskCreate(StateMachineTask, "HandleStateLogic", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +2, NULL);
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2380      	movs	r3, #128	@ 0x80
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	490e      	ldr	r1, [pc, #56]	@ (8000644 <main+0xe4>)
 800060c:	480e      	ldr	r0, [pc, #56]	@ (8000648 <main+0xe8>)
 800060e:	f009 fdf7 	bl	800a200 <xTaskCreate>
  vTaskStartScheduler();
 8000612:	f009 ff71 	bl	800a4f8 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000616:	f008 fcef 	bl	8008ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0xba>
 800061e:	bf00      	nop
 8000620:	200001b0 	.word	0x200001b0
 8000624:	200001b4 	.word	0x200001b4
 8000628:	0800d54c 	.word	0x0800d54c
 800062c:	08000f01 	.word	0x08000f01
 8000630:	200001ac 	.word	0x200001ac
 8000634:	0800d4f8 	.word	0x0800d4f8
 8000638:	08000ca5 	.word	0x08000ca5
 800063c:	0800d504 	.word	0x0800d504
 8000640:	08000cf5 	.word	0x08000cf5
 8000644:	0800d510 	.word	0x0800d510
 8000648:	08000e15 	.word	0x08000e15

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00c f947 	bl	800c8ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	@ (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f978 	bl	80049c8 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006de:	f000 fc19 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2105      	movs	r1, #5
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fbd9 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f000 fc02 	bl	8000f14 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	@ 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f003 fb4f 	bl	8003e00 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fbd4 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000a8 	.word	0x200000a8
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <MX_I2S3_Init+0x58>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <MX_I2S3_Init+0x5c>)
 80007a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007bc:	f003 fc64 	bl	8004088 <HAL_I2S_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007c6:	f000 fba5 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000fc 	.word	0x200000fc
 80007d4:	40003c00 	.word	0x40003c00
 80007d8:	00017700 	.word	0x00017700

080007dc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_RNG_Init+0x20>)
 80007e2:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <MX_RNG_Init+0x24>)
 80007e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_RNG_Init+0x20>)
 80007e8:	f004 feb4 	bl	8005554 <HAL_RNG_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007f2:	f000 fb8f 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000144 	.word	0x20000144
 8000800:	50060800 	.word	0x50060800

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f004 fea7 	bl	80055a8 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 fb58 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000154 	.word	0x20000154
 800086c:	40013000 	.word	0x40013000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b71      	ldr	r3, [pc, #452]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a70      	ldr	r2, [pc, #448]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b6e      	ldr	r3, [pc, #440]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a69      	ldr	r2, [pc, #420]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b67      	ldr	r3, [pc, #412]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b63      	ldr	r3, [pc, #396]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a62      	ldr	r2, [pc, #392]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b60      	ldr	r3, [pc, #384]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b5c      	ldr	r3, [pc, #368]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a5b      	ldr	r2, [pc, #364]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b59      	ldr	r3, [pc, #356]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b55      	ldr	r3, [pc, #340]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a54      	ldr	r2, [pc, #336]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b52      	ldr	r3, [pc, #328]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b4e      	ldr	r3, [pc, #312]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b4b      	ldr	r3, [pc, #300]	@ (8000a50 <MX_GPIO_Init+0x1e0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	4848      	ldr	r0, [pc, #288]	@ (8000a54 <MX_GPIO_Init+0x1e4>)
 8000934:	f001 f8fc 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4846      	ldr	r0, [pc, #280]	@ (8000a58 <MX_GPIO_Init+0x1e8>)
 800093e:	f001 f8f7 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	2200      	movs	r2, #0
 8000944:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000948:	4844      	ldr	r0, [pc, #272]	@ (8000a5c <MX_GPIO_Init+0x1ec>)
 800094a:	f001 f8f1 	bl	8001b30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483b      	ldr	r0, [pc, #236]	@ (8000a54 <MX_GPIO_Init+0x1e4>)
 8000966:	f000 ff2f 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4835      	ldr	r0, [pc, #212]	@ (8000a58 <MX_GPIO_Init+0x1e8>)
 8000982:	f000 ff21 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x1e8>)
 80009a2:	f000 ff11 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4829      	ldr	r0, [pc, #164]	@ (8000a60 <MX_GPIO_Init+0x1f0>)
 80009ba:	f000 ff05 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <MX_GPIO_Init+0x1f4>)
 80009d2:	f000 fef9 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <MX_GPIO_Init+0x1f4>)
 80009f4:	f000 fee8 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <MX_GPIO_Init+0x1ec>)
 8000a12:	f000 fed9 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_GPIO_Init+0x1ec>)
 8000a2a:	f000 fecd 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_GPIO_Init+0x1e4>)
 8000a44:	f000 fec0 	bl	80017c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	@ 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400

08000a68 <writeAllLeds>:

/* USER CODE BEGIN 4 */

// green, orange, red, blue

static void writeAllLeds(GPIO_PinState state) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 4; ++i) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e00b      	b.n	8000a90 <writeAllLeds+0x28>
		HAL_GPIO_WritePin(LED_PORT, LEDS[i], state);
 8000a78:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <writeAllLeds+0x38>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <writeAllLeds+0x3c>)
 8000a86:	f001 f853 	bl	8001b30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i) {
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	ddf0      	ble.n	8000a78 <writeAllLeds+0x10>
	}
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	0800d570 	.word	0x0800d570
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <wheelAnimation>:
	static int toggle = 0;
	writeAllLeds(toggle ? GPIO_PIN_SET : GPIO_PIN_RESET);
	toggle = !toggle;
}

static void wheelAnimation(void* arg) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	int* finalIndex = (int*)arg;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	61bb      	str	r3, [r7, #24]
	const int spins = 5;
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	617b      	str	r3, [r7, #20]
	const int totalSpins = (spins*4) + *finalIndex + 1;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	009a      	lsls	r2, r3, #2
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]

	const TickType_t delayMs_inc = 20;
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	60fb      	str	r3, [r7, #12]
	TickType_t delayMs = 50;
 8000aca:	2332      	movs	r3, #50	@ 0x32
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
	int current_i = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	e028      	b.n	8000b2a <wheelAnimation+0x82>
		writeAllLeds(GPIO_PIN_RESET);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ffc5 	bl	8000a68 <writeAllLeds>

		HAL_GPIO_WritePin(LED_PORT, LEDS[current_i], GPIO_PIN_SET);
 8000ade:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <wheelAnimation+0xac>)
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <wheelAnimation+0xb0>)
 8000aec:	f001 f820 	bl	8001b30 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(delayMs));
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <wheelAnimation+0xb4>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	099b      	lsrs	r3, r3, #6
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 fcc2 	bl	800a48c <vTaskDelay>
		delayMs += delayMs_inc;
 8000b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
		current_i = (current_i + 1) % 4;
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	3301      	adds	r3, #1
 8000b14:	425a      	negs	r2, r3
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	f002 0203 	and.w	r2, r2, #3
 8000b1e:	bf58      	it	pl
 8000b20:	4253      	negpl	r3, r2
 8000b22:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbd2      	blt.n	8000ad8 <wheelAnimation+0x30>
	}
	writeAllLeds(GPIO_PIN_RESET);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff98 	bl	8000a68 <writeAllLeds>
	HAL_GPIO_WritePin(LED_PORT, LEDS[*finalIndex], GPIO_PIN_SET);
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <wheelAnimation+0xac>)
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <wheelAnimation+0xb0>)
 8000b48:	f000 fff2 	bl	8001b30 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	0800d570 	.word	0x0800d570
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	10624dd3 	.word	0x10624dd3

08000b60 <collectedAnimation>:


static void collectedAnimation(void* args) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	int* collectedMask = (int*)args;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
	for(int j = 0; j < 4; ++j) {
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e026      	b.n	8000bc0 <collectedAnimation+0x60>
		for(int i = 0; i < 4; ++i) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	e014      	b.n	8000ba2 <collectedAnimation+0x42>
			if(*collectedMask & (1 << i)) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	fa42 f303 	asr.w	r3, r2, r3
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d008      	beq.n	8000b9c <collectedAnimation+0x3c>
				HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000b8a:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <collectedAnimation+0x70>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	480f      	ldr	r0, [pc, #60]	@ (8000bd4 <collectedAnimation+0x74>)
 8000b98:	f000 ffca 	bl	8001b30 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; ++i) {
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	dde7      	ble.n	8000b78 <collectedAnimation+0x18>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 8000ba8:	20c8      	movs	r0, #200	@ 0xc8
 8000baa:	f009 fc6f 	bl	800a48c <vTaskDelay>
		writeAllLeds(GPIO_PIN_RESET);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff5a 	bl	8000a68 <writeAllLeds>
		vTaskDelay(pdMS_TO_TICKS(200));
 8000bb4:	20c8      	movs	r0, #200	@ 0xc8
 8000bb6:	f009 fc69 	bl	800a48c <vTaskDelay>
	for(int j = 0; j < 4; ++j) {
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	ddd5      	ble.n	8000b72 <collectedAnimation+0x12>
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	0800d570 	.word	0x0800d570
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <loseAnimation>:

static void loseAnimation(void* args) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e014      	b.n	8000c10 <loseAnimation+0x38>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bec:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <loseAnimation+0x58>)
 8000bee:	f000 ff9f 	bl	8001b30 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000bf2:	20fa      	movs	r0, #250	@ 0xfa
 8000bf4:	f009 fc4a 	bl	800a48c <vTaskDelay>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfe:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <loseAnimation+0x58>)
 8000c00:	f000 ff96 	bl	8001b30 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000c04:	20fa      	movs	r0, #250	@ 0xfa
 8000c06:	f009 fc41 	bl	800a48c <vTaskDelay>
	for (int i = 0; i < 3; i++) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	dde7      	ble.n	8000be6 <loseAnimation+0xe>
	}

	writeAllLeds(GPIO_PIN_SET);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff26 	bl	8000a68 <writeAllLeds>
	vTaskDelay(pdMS_TO_TICKS(200));
 8000c1c:	20c8      	movs	r0, #200	@ 0xc8
 8000c1e:	f009 fc35 	bl	800a48c <vTaskDelay>
	writeAllLeds(GPIO_PIN_RESET);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ff20 	bl	8000a68 <writeAllLeds>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <winningAnimation>:

static void winningAnimation(void* args) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    for (int cycle = 0; cycle < 3; cycle++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e01a      	b.n	8000c78 <winningAnimation+0x44>
        for (int i = 0; i < 4; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e011      	b.n	8000c6c <winningAnimation+0x38>
            writeAllLeds(GPIO_PIN_RESET);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ff0d 	bl	8000a68 <writeAllLeds>
            HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000c4e:	4a13      	ldr	r2, [pc, #76]	@ (8000c9c <winningAnimation+0x68>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4811      	ldr	r0, [pc, #68]	@ (8000ca0 <winningAnimation+0x6c>)
 8000c5c:	f000 ff68 	bl	8001b30 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(150));
 8000c60:	2096      	movs	r0, #150	@ 0x96
 8000c62:	f009 fc13 	bl	800a48c <vTaskDelay>
        for (int i = 0; i < 4; i++) {
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	ddea      	ble.n	8000c48 <winningAnimation+0x14>
    for (int cycle = 0; cycle < 3; cycle++) {
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dde1      	ble.n	8000c42 <winningAnimation+0xe>
        }
    }

    writeAllLeds(GPIO_PIN_SET);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fef2 	bl	8000a68 <writeAllLeds>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000c84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c88:	f009 fc00 	bl	800a48c <vTaskDelay>
    writeAllLeds(GPIO_PIN_RESET);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff feeb 	bl	8000a68 <writeAllLeds>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800d570 	.word	0x0800d570
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <AnimateTask>:

void AnimateTask(void *args) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	Animation_t next;
	SystemEvent_t evt;
	for(;;) {
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <AnimateTask+0x48>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f107 0110 	add.w	r1, r7, #16
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f008 ff6f 	bl	8009b9c <xQueueReceive>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10f      	bne.n	8000ce4 <AnimateTask+0x40>
			next.animation(next.args);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4798      	blx	r3

			evt.type = EVT_ANIM_COMPLETE;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
			xQueueSend(xEventQueue, &evt, 0);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <AnimateTask+0x4c>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f107 0108 	add.w	r1, r7, #8
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f008 fdbc 	bl	800985c <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8000ce4:	2032      	movs	r0, #50	@ 0x32
 8000ce6:	f009 fbd1 	bl	800a48c <vTaskDelay>
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000cea:	e7df      	b.n	8000cac <AnimateTask+0x8>
 8000cec:	200001b4 	.word	0x200001b4
 8000cf0:	200001b0 	.word	0x200001b0

08000cf4 <PollButtonTask>:
	}
}

void PollButtonTask(void *args) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	for(;;) {
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <PollButtonTask+0x3c>)
 8000d00:	f000 fefe 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10e      	bne.n	8000d28 <PollButtonTask+0x34>
			evt.type = EVT_BUTTON_PRESS;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]

			xQueueSend(xEventQueue, &evt, 0);
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <PollButtonTask+0x40>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	f107 0108 	add.w	r1, r7, #8
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f008 fd9d 	bl	800985c <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(200)); // Debounce
 8000d22:	20c8      	movs	r0, #200	@ 0xc8
 8000d24:	f009 fbb2 	bl	800a48c <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(50));
 8000d28:	2032      	movs	r0, #50	@ 0x32
 8000d2a:	f009 fbaf 	bl	800a48c <vTaskDelay>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000d2e:	e7e5      	b.n	8000cfc <PollButtonTask+0x8>
 8000d30:	40020000 	.word	0x40020000
 8000d34:	200001b0 	.word	0x200001b0

08000d38 <spin>:
	}
}

void spin(Animation_t* anim, int* colorBit, int* winningNum) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	*winningNum = rand() % 4;
 8000d44:	f00b fc90 	bl	800c668 <rand>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	425a      	negs	r2, r3
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	bf58      	it	pl
 8000d56:	4253      	negpl	r3, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6013      	str	r3, [r2, #0]
	*colorBit = (1 << *winningNum);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2201      	movs	r2, #1
 8000d62:	409a      	lsls	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	601a      	str	r2, [r3, #0]
	anim->animation = wheelAnimation;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <spin+0x44>)
 8000d6c:	605a      	str	r2, [r3, #4]
	anim->args = winningNum;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08000aa9 	.word	0x08000aa9

08000d80 <setNextAnimation>:

void setNextAnimation(Animation_t* nextAnim, State_t* state, int* collectedMask, int* colorBit)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
    switch (*state) {
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <setNextAnimation+0x1c>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d02c      	beq.n	8000df4 <setNextAnimation+0x74>
            break;
        case RESET_TO_IDLE:
        	*state = IDLE;
            break;
    }
}
 8000d9a:	e02f      	b.n	8000dfc <setNextAnimation+0x7c>
        	*state = RESET_TO_IDLE;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
            if ((*collectedMask) & *colorBit) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <setNextAnimation+0x3e>
            	(*collectedMask) = 0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
            	nextAnim->animation = loseAnimation;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <setNextAnimation+0x88>)
 8000dba:	605a      	str	r2, [r3, #4]
            break;
 8000dbc:	e01e      	b.n	8000dfc <setNextAnimation+0x7c>
                (*collectedMask) |= *colorBit;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	601a      	str	r2, [r3, #0]
                if (((*collectedMask) & 0xF) == 0xF) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d106      	bne.n	8000de6 <setNextAnimation+0x66>
                    (*collectedMask) = 0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
                    nextAnim->animation = winningAnimation;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <setNextAnimation+0x8c>)
 8000de2:	605a      	str	r2, [r3, #4]
            break;
 8000de4:	e00a      	b.n	8000dfc <setNextAnimation+0x7c>
                    nextAnim->animation = collectedAnimation;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4a09      	ldr	r2, [pc, #36]	@ (8000e10 <setNextAnimation+0x90>)
 8000dea:	605a      	str	r2, [r3, #4]
                    nextAnim->args = collectedMask;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
            break;
 8000df2:	e003      	b.n	8000dfc <setNextAnimation+0x7c>
        	*state = IDLE;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
            break;
 8000dfa:	bf00      	nop
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	08000bd9 	.word	0x08000bd9
 8000e0c:	08000c35 	.word	0x08000c35
 8000e10:	08000b61 	.word	0x08000b61

08000e14 <StateMachineTask>:

void StateMachineTask(void *args) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	@ 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	EventType_t next = EVT_ANY;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	State_t state = IDLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	Animation_t nextAnim;

	int next_number = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
	nextAnim.animation = wheelAnimation;
 8000e2c:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <StateMachineTask+0xe0>)
 8000e2e:	61fb      	str	r3, [r7, #28]
	nextAnim.args = &next_number;
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	61bb      	str	r3, [r7, #24]
	int collectedMask = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
	int colorBit = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]

	for(;;) {
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <StateMachineTask+0xe4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f008 fea6 	bl	8009b9c <xQueueReceive>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d1f3      	bne.n	8000e3e <StateMachineTask+0x2a>
			if(next != EVT_ANY && next != evt.type) {
 8000e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <StateMachineTask+0x56>
 8000e5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d13f      	bne.n	8000eea <StateMachineTask+0xd6>
				continue; // Do not process
			}

			switch (evt.type) {
 8000e6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d002      	beq.n	8000e78 <StateMachineTask+0x64>
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d019      	beq.n	8000eaa <StateMachineTask+0x96>
				}
				else if (state == IDLE) {
					next = EVT_ANY;
				}
			default:
				break;
 8000e76:	e03a      	b.n	8000eee <StateMachineTask+0xda>
				state = SPINNING;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				next = EVT_ANIM_COMPLETE;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				spin(&nextAnim, &colorBit, &next_number);
 8000e84:	f107 0214 	add.w	r2, r7, #20
 8000e88:	f107 010c 	add.w	r1, r7, #12
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff51 	bl	8000d38 <spin>
				xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <StateMachineTask+0xe8>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f107 0118 	add.w	r1, r7, #24
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea4:	f008 fcda 	bl	800985c <xQueueGenericSend>
				break;
 8000ea8:	e022      	b.n	8000ef0 <StateMachineTask+0xdc>
				setNextAnimation(&nextAnim, &state, &collectedMask, &colorBit);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	f107 0210 	add.w	r2, r7, #16
 8000eb2:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8000eb6:	f107 0018 	add.w	r0, r7, #24
 8000eba:	f7ff ff61 	bl	8000d80 <setNextAnimation>
				if (state == RESET_TO_IDLE) {
 8000ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d109      	bne.n	8000eda <StateMachineTask+0xc6>
					xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <StateMachineTask+0xe8>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	f107 0118 	add.w	r1, r7, #24
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed4:	f008 fcc2 	bl	800985c <xQueueGenericSend>
				break;
 8000ed8:	e009      	b.n	8000eee <StateMachineTask+0xda>
				else if (state == IDLE) {
 8000eda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <StateMachineTask+0xda>
					next = EVT_ANY;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8000ee8:	e001      	b.n	8000eee <StateMachineTask+0xda>
				continue; // Do not process
 8000eea:	bf00      	nop
 8000eec:	e7a7      	b.n	8000e3e <StateMachineTask+0x2a>
				break;
 8000eee:	bf00      	nop
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000ef0:	e7a5      	b.n	8000e3e <StateMachineTask+0x2a>
 8000ef2:	bf00      	nop
 8000ef4:	08000aa9 	.word	0x08000aa9
 8000ef8:	200001b0 	.word	0x200001b0
 8000efc:	200001b4 	.word	0x200001b4

08000f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f08:	f00a ffbe 	bl	800be88 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f008 f92b 	bl	8009168 <osDelay>
 8000f12:	e7fb      	b.n	8000f0c <StartDefaultTask+0xc>

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000f1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f20:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <Error_Handler+0x3c>)
 8000f22:	f000 fe1e 	bl	8001b62 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2c:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <Error_Handler+0x3c>)
 8000f2e:	f000 fdff 	bl	8001b30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <Error_Handler+0x3c>)
 8000f3a:	f000 fdf9 	bl	8001b30 <HAL_GPIO_WritePin>
   	  HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <Error_Handler+0x3c>)
 8000f46:	f000 fdf3 	bl	8001b30 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000f4a:	bf00      	nop
 8000f4c:	e7e6      	b.n	8000f1c <Error_Handler+0x8>
 8000f4e:	bf00      	nop
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f000 fbde 	bl	800175a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	@ (8001030 <HAL_I2C_MspInit+0x84>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d12c      	bne.n	8001028 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	480c      	ldr	r0, [pc, #48]	@ (8001038 <HAL_I2C_MspInit+0x8c>)
 8001008:	f000 fbde 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_I2C_MspInit+0x88>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	@ 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400

0800103c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a31      	ldr	r2, [pc, #196]	@ (800112c <HAL_I2S_MspInit+0xf0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d15a      	bne.n	8001122 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001070:	23c0      	movs	r3, #192	@ 0xc0
 8001072:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f927 	bl	80052d0 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001088:	f7ff ff44 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 8001096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010cc:	4a18      	ldr	r2, [pc, #96]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_I2S_MspInit+0xf4>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010e0:	2310      	movs	r3, #16
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010f0:	2306      	movs	r3, #6
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	480e      	ldr	r0, [pc, #56]	@ (8001134 <HAL_I2S_MspInit+0xf8>)
 80010fc:	f000 fb64 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001100:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001112:	2306      	movs	r3, #6
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4806      	ldr	r0, [pc, #24]	@ (8001138 <HAL_I2S_MspInit+0xfc>)
 800111e:	f000 fb53 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	@ 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40003c00 	.word	0x40003c00
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020800 	.word	0x40020800

0800113c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_RNG_MspInit+0x3c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10d      	bne.n	800116a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_RNG_MspInit+0x40>)
 8001154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_RNG_MspInit+0x40>)
 8001158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115c:	6353      	str	r3, [r2, #52]	@ 0x34
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <HAL_RNG_MspInit+0x40>)
 8001160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	50060800 	.word	0x50060800
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <HAL_SPI_MspInit+0x84>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12b      	bne.n	80011fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011da:	23e0      	movs	r3, #224	@ 0xe0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_SPI_MspInit+0x8c>)
 80011f6:	f000 fae7 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40013000 	.word	0x40013000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124a:	f000 f967 	bl	800151c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800124e:	f009 fda1 	bl	800ad94 <xTaskGetSchedulerState>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d001      	beq.n	800125c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001258:	f00a fb96 	bl	800b988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <OTG_FS_IRQHandler+0x10>)
 8001266:	f000 ff77 	bl	8002158 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20004f1c 	.word	0x20004f1c

08001274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_kill>:

int _kill(int pid, int sig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128e:	f00b fb8d 	bl	800c9ac <__errno>
 8001292:	4603      	mov	r3, r0
 8001294:	2216      	movs	r2, #22
 8001296:	601a      	str	r2, [r3, #0]
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe7 	bl	8001284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b6:	bf00      	nop
 80012b8:	e7fd      	b.n	80012b6 <_exit+0x12>

080012ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e00a      	b.n	80012e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012cc:	f3af 8000 	nop.w
 80012d0:	4601      	mov	r1, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf0      	blt.n	80012cc <_read+0x12>
  }

  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e009      	b.n	800131a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <_write+0x12>
  }
  return len;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_close>:

int _close(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001354:	605a      	str	r2, [r3, #4]
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_isatty>:

int _isatty(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f00b faf2 	bl	800c9ac <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	200001b8 	.word	0x200001b8
 80013fc:	20005448 	.word	0x20005448

08001400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f00b fab1 	bl	800c9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f883 	bl	8000560 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800145c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001468:	0800d680 	.word	0x0800d680
  ldr r2, =_sbss
 800146c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001470:	20005448 	.word	0x20005448

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <HAL_Init+0x40>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_Init+0x40>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_Init+0x40>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f94f 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fd52 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f967 	bl	80017ae <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f8:	f000 f92f 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000000 	.word	0x20000000
 8001514:	20000008 	.word	0x20000008
 8001518:	20000004 	.word	0x20000004

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008
 8001540:	200001bc 	.word	0x200001bc

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200001bc 	.word	0x200001bc

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	@ (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e16b      	b.n	8001abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 815a 	bne.w	8001ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	2b02      	cmp	r3, #2
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80b4 	beq.w	8001ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b60      	ldr	r3, [pc, #384]	@ (8001ad4 <HAL_GPIO_Init+0x30c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a5f      	ldr	r2, [pc, #380]	@ (8001ad4 <HAL_GPIO_Init+0x30c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_GPIO_Init+0x30c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad8 <HAL_GPIO_Init+0x310>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <HAL_GPIO_Init+0x314>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_GPIO_Init+0x226>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a51      	ldr	r2, [pc, #324]	@ (8001ae0 <HAL_GPIO_Init+0x318>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x222>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a50      	ldr	r2, [pc, #320]	@ (8001ae4 <HAL_GPIO_Init+0x31c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x21e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <HAL_GPIO_Init+0x320>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x21a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4e      	ldr	r2, [pc, #312]	@ (8001aec <HAL_GPIO_Init+0x324>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x216>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4d      	ldr	r2, [pc, #308]	@ (8001af0 <HAL_GPIO_Init+0x328>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x212>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_GPIO_Init+0x32c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x20e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4b      	ldr	r2, [pc, #300]	@ (8001af8 <HAL_GPIO_Init+0x330>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x20a>
 80019ce:	2307      	movs	r3, #7
 80019d0:	e00e      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019d2:	2308      	movs	r3, #8
 80019d4:	e00c      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x228>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x310>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b30      	ldr	r3, [pc, #192]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <HAL_GPIO_Init+0x334>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f ae90 	bls.w	80017e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40021c00 	.word	0x40021c00
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	041a      	lsls	r2, r3, #16
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	400b      	ands	r3, r1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	619a      	str	r2, [r3, #24]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af02      	add	r7, sp, #8
 8001b9c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e059      	b.n	8001c5c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f00a f9b4 	bl	800bf30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bd6:	d102      	bne.n	8001bde <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fdde 	bl	80057a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7c1a      	ldrb	r2, [r3, #16]
 8001bf0:	f88d 2000 	strb.w	r2, [sp]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf8:	f003 fd5f 	bl	80056ba <USB_CoreInit>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e026      	b.n	8001c5c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fdd6 	bl	80057c6 <USB_SetCurrentMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e017      	b.n	8001c5c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c1a      	ldrb	r2, [r3, #16]
 8001c34:	f88d 2000 	strb.w	r2, [sp]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	f003 ff78 	bl	8005b30 <USB_HostInit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e004      	b.n	8001c5c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b08b      	sub	sp, #44	@ 0x2c
 8001c68:	af04      	add	r7, sp, #16
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	70fb      	strb	r3, [r7, #3]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70bb      	strb	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001c7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c80:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_HCD_HC_Init+0x2c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e09d      	b.n	8001dcc <HAL_HCD_HC_Init+0x168>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3319      	adds	r3, #25
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3314      	adds	r3, #20
 8001cbc:	787a      	ldrb	r2, [r7, #1]
 8001cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3315      	adds	r3, #21
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3326      	adds	r3, #38	@ 0x26
 8001ce4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ce8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cf2:	b2d8      	uxtb	r0, r3
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3316      	adds	r3, #22
 8001d02:	4602      	mov	r2, r0
 8001d04:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fbc8 	bl	80024a0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0a      	bge.n	8001d2e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3317      	adds	r3, #23
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e009      	b.n	8001d42 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3317      	adds	r3, #23
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 f856 	bl	8005df8 <USB_GetHostSpeed>
 8001d4c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10b      	bne.n	8001d6e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001d56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_HCD_HC_Init+0x10a>
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2bbc      	cmp	r3, #188	@ 0xbc
 8001d68:	d901      	bls.n	8001d6e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001d6a:	23bc      	movs	r3, #188	@ 0xbc
 8001d6c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3328      	adds	r3, #40	@ 0x28
 8001d98:	4602      	mov	r2, r0
 8001d9a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	787c      	ldrb	r4, [r7, #1]
 8001da6:	78ba      	ldrb	r2, [r7, #2]
 8001da8:	78f9      	ldrb	r1, [r7, #3]
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4623      	mov	r3, r4
 8001dba:	f004 f845 	bl	8005e48 <USB_HC_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_HCD_HC_Halt+0x1e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e00f      	b.n	8001e12 <HAL_HCD_HC_Halt+0x3e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fbd7 	bl	80065b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	70fb      	strb	r3, [r7, #3]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70bb      	strb	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3317      	adds	r3, #23
 8001e46:	78ba      	ldrb	r2, [r7, #2]
 8001e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3326      	adds	r3, #38	@ 0x26
 8001e5a:	787a      	ldrb	r2, [r7, #1]
 8001e5c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e5e:	7c3b      	ldrb	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d114      	bne.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	332a      	adds	r3, #42	@ 0x2a
 8001e74:	2203      	movs	r2, #3
 8001e76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3319      	adds	r3, #25
 8001e88:	7f3a      	ldrb	r2, [r7, #28]
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e009      	b.n	8001ea2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	332a      	adds	r3, #42	@ 0x2a
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ea2:	787b      	ldrb	r3, [r7, #1]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	f200 8102 	bhi.w	80020ae <HAL_HCD_HC_SubmitRequest+0x292>
 8001eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08002099 	.word	0x08002099
 8001eb8:	08001f85 	.word	0x08001f85
 8001ebc:	0800200f 	.word	0x0800200f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001ec0:	7c3b      	ldrb	r3, [r7, #16]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	f040 80f5 	bne.w	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ec8:	78bb      	ldrb	r3, [r7, #2]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d12d      	bne.n	8001f2a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333d      	adds	r3, #61	@ 0x3d
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	333d      	adds	r3, #61	@ 0x3d
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	332a      	adds	r3, #42	@ 0x2a
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001f12:	e0ce      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	332a      	adds	r3, #42	@ 0x2a
 8001f24:	2202      	movs	r2, #2
 8001f26:	701a      	strb	r2, [r3, #0]
      break;
 8001f28:	e0c3      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	331a      	adds	r3, #26
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 80b8 	bne.w	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	333c      	adds	r3, #60	@ 0x3c
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	332a      	adds	r3, #42	@ 0x2a
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
      break;
 8001f6c:	e0a1      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	332a      	adds	r3, #42	@ 0x2a
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
      break;
 8001f82:	e096      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f84:	78bb      	ldrb	r3, [r7, #2]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d120      	bne.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	333d      	adds	r3, #61	@ 0x3d
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	332a      	adds	r3, #42	@ 0x2a
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fb4:	e07e      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	332a      	adds	r3, #42	@ 0x2a
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
      break;
 8001fca:	e073      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	333c      	adds	r3, #60	@ 0x3c
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	332a      	adds	r3, #42	@ 0x2a
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e05d      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	332a      	adds	r3, #42	@ 0x2a
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
      break;
 800200c:	e052      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800200e:	78bb      	ldrb	r3, [r7, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d120      	bne.n	8002056 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	333d      	adds	r3, #61	@ 0x3d
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	332a      	adds	r3, #42	@ 0x2a
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800203e:	e039      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	332a      	adds	r3, #42	@ 0x2a
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]
      break;
 8002054:	e02e      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	333c      	adds	r3, #60	@ 0x3c
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	332a      	adds	r3, #42	@ 0x2a
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
      break;
 8002080:	e018      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	332a      	adds	r3, #42	@ 0x2a
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
      break;
 8002096:	e00d      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	332a      	adds	r3, #42	@ 0x2a
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
      break;
 80020ac:	e002      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80020b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	332c      	adds	r3, #44	@ 0x2c
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	8b39      	ldrh	r1, [r7, #24]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4403      	add	r3, r0
 80020d8:	3334      	adds	r3, #52	@ 0x34
 80020da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	334c      	adds	r3, #76	@ 0x4c
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3338      	adds	r3, #56	@ 0x38
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3315      	adds	r3, #21
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	334d      	adds	r3, #77	@ 0x4d
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3310      	adds	r3, #16
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	1d19      	adds	r1, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	799b      	ldrb	r3, [r3, #6]
 8002146:	461a      	mov	r2, r3
 8002148:	f003 ffaa 	bl	80060a0 <USB_HC_StartXfer>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop

08002158 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fc9f 	bl	8005ab2 <USB_GetMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	f040 80fb 	bne.w	8002372 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fc62 	bl	8005a4a <USB_ReadInterrupts>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80f1 	beq.w	8002370 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fc59 	bl	8005a4a <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021a2:	d104      	bne.n	80021ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fc49 	bl	8005a4a <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021c2:	d104      	bne.n	80021ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fc39 	bl	8005a4a <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021e2:	d104      	bne.n	80021ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fc29 	bl	8005a4a <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d103      	bne.n	800220a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2202      	movs	r2, #2
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fc1b 	bl	8005a4a <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800221a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800221e:	d120      	bne.n	8002262 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002228:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d113      	bne.n	8002262 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800223a:	2110      	movs	r1, #16
 800223c:	6938      	ldr	r0, [r7, #16]
 800223e:	f003 fb0e 	bl	800585e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002242:	6938      	ldr	r0, [r7, #16]
 8002244:	f003 fb3d 	bl	80058c2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7a5b      	ldrb	r3, [r3, #9]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d105      	bne.n	800225c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fd2e 	bl	8005cb8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f009 fee5 	bl	800c02c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fbef 	bl	8005a4a <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002276:	d102      	bne.n	800227e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f001 fd4d 	bl	8003d18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fbe1 	bl	8005a4a <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d106      	bne.n	80022a0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f009 feae 	bl	800bff4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2208      	movs	r2, #8
 800229e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fbd0 	bl	8005a4a <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022b4:	d139      	bne.n	800232a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f96a 	bl	8006594 <USB_HC_ReadInterrupt>
 80022c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e025      	b.n	8002314 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d018      	beq.n	800230e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f2:	d106      	bne.n	8002302 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f905 	bl	800250a <HCD_HC_IN_IRQHandler>
 8002300:	e005      	b.n	800230e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 ff67 	bl	80031dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	795b      	ldrb	r3, [r3, #5]
 8002318:	461a      	mov	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4293      	cmp	r3, r2
 800231e:	d3d3      	bcc.n	80022c8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fb8b 	bl	8005a4a <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b10      	cmp	r3, #16
 800233c:	d101      	bne.n	8002342 <HAL_HCD_IRQHandler+0x1ea>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_HCD_IRQHandler+0x1ec>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0210 	bic.w	r2, r2, #16
 8002356:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f001 fbfe 	bl	8003b5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0210 	orr.w	r2, r2, #16
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	e000      	b.n	8002372 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002370:	bf00      	nop
    }
  }
}
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_HCD_Start+0x16>
 800238a:	2302      	movs	r3, #2
 800238c:	e013      	b.n	80023b6 <HAL_HCD_Start+0x3e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f003 fcf2 	bl	8005d86 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f9eb 	bl	8005782 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_HCD_Stop+0x16>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e00d      	b.n	80023f0 <HAL_HCD_Stop+0x32>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fa45 	bl	8006870 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fc94 	bl	8005d32 <USB_ResetPort>
 800240a:	4603      	mov	r3, r0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334c      	adds	r3, #76	@ 0x4c
 8002430:	781b      	ldrb	r3, [r3, #0]
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3338      	adds	r3, #56	@ 0x38
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fcd6 	bl	8005e26 <USB_GetCurrentFrame>
 800247a:	4603      	mov	r3, r0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fcb1 	bl	8005df8 <USB_GetHostSpeed>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331a      	adds	r3, #26
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	331b      	adds	r3, #27
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3325      	adds	r3, #37	@ 0x25
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3324      	adds	r3, #36	@ 0x24
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 faa1 	bl	8005a70 <USB_ReadChInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11a      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	2304      	movs	r3, #4
 8002548:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	334d      	adds	r3, #77	@ 0x4d
 800255a:	2207      	movs	r2, #7
 800255c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f004 f825 	bl	80065b6 <USB_HC_Halt>
 800256c:	e09e      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fa7a 	bl	8005a70 <USB_ReadChInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002586:	d11b      	bne.n	80025c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800259a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	334d      	adds	r3, #77	@ 0x4d
 80025ac:	2208      	movs	r2, #8
 80025ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fffc 	bl	80065b6 <USB_HC_Halt>
 80025be:	e075      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fa51 	bl	8005a70 <USB_ReadChInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d11a      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2308      	movs	r3, #8
 80025e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	334d      	adds	r3, #77	@ 0x4d
 80025fa:	2206      	movs	r2, #6
 80025fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f003 ffd5 	bl	80065b6 <USB_HC_Halt>
 800260c:	e04e      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fa2a 	bl	8005a70 <USB_ReadChInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002626:	d11b      	bne.n	8002660 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800263a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	2209      	movs	r2, #9
 800264e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f003 ffac 	bl	80065b6 <USB_HC_Halt>
 800265e:	e025      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fa01 	bl	8005a70 <USB_ReadChInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b80      	cmp	r3, #128	@ 0x80
 8002676:	d119      	bne.n	80026ac <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334d      	adds	r3, #77	@ 0x4d
 800269a:	2207      	movs	r2, #7
 800269c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 ff85 	bl	80065b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 f9db 	bl	8005a70 <USB_ReadChInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d112      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff71 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	f000 bd75 	b.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 f9bb 	bl	8005a70 <USB_ReadChInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 8128 	bne.w	8002956 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	2320      	movs	r3, #32
 8002716:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	331b      	adds	r3, #27
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d119      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	331b      	adds	r3, #27
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	0151      	lsls	r1, r2, #5
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	440a      	add	r2, r1
 8002758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002760:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	799b      	ldrb	r3, [r3, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01b      	beq.n	80027a2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3330      	adds	r3, #48	@ 0x30
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	1ac9      	subs	r1, r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4403      	add	r3, r0
 800279e:	3338      	adds	r3, #56	@ 0x38
 80027a0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334d      	adds	r3, #77	@ 0x4d
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3344      	adds	r3, #68	@ 0x44
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	2301      	movs	r3, #1
 80027da:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3326      	adds	r3, #38	@ 0x26
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3326      	adds	r3, #38	@ 0x26
 8002802:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002804:	2b02      	cmp	r3, #2
 8002806:	d110      	bne.n	800282a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f003 fed0 	bl	80065b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	2310      	movs	r3, #16
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	e03d      	b.n	80028a6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3326      	adds	r3, #38	@ 0x26
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d00a      	beq.n	8002856 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3326      	adds	r3, #38	@ 0x26
 8002850:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002852:	2b01      	cmp	r3, #1
 8002854:	d127      	bne.n	80028a6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	0151      	lsls	r1, r2, #5
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	440a      	add	r2, r1
 800286c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002874:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	334c      	adds	r3, #76	@ 0x4c
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	334c      	adds	r3, #76	@ 0x4c
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f009 fbd1 	bl	800c048 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	799b      	ldrb	r3, [r3, #6]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d13b      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3338      	adds	r3, #56	@ 0x38
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3328      	adds	r3, #40	@ 0x28
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	440b      	add	r3, r1
 80028d4:	1e59      	subs	r1, r3, #1
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4403      	add	r3, r0
 80028e4:	3328      	adds	r3, #40	@ 0x28
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8470 	beq.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	333c      	adds	r3, #60	@ 0x3c
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2d8      	uxtb	r0, r3
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	333c      	adds	r3, #60	@ 0x3c
 800291e:	4602      	mov	r2, r0
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	f000 bc58 	b.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	333c      	adds	r3, #60	@ 0x3c
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2d8      	uxtb	r0, r3
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	333c      	adds	r3, #60	@ 0x3c
 800294e:	4602      	mov	r2, r0
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	f000 bc40 	b.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f003 f886 	bl	8005a70 <USB_ReadChInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b20      	cmp	r3, #32
 800296c:	d131      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2320      	movs	r3, #32
 800297e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331a      	adds	r3, #26
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f040 841f 	bne.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	331b      	adds	r3, #27
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	334d      	adds	r3, #77	@ 0x4d
 80029bc:	2203      	movs	r2, #3
 80029be:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fdf4 	bl	80065b6 <USB_HC_Halt>
 80029ce:	f000 bc02 	b.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 f848 	bl	8005a70 <USB_ReadChInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 8305 	bne.w	8002ff6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2302      	movs	r3, #2
 80029fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d114      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	334d      	adds	r3, #77	@ 0x4d
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	334c      	adds	r3, #76	@ 0x4c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e2cc      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d114      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334d      	adds	r3, #77	@ 0x4d
 8002a64:	2202      	movs	r2, #2
 8002a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	334c      	adds	r3, #76	@ 0x4c
 8002a78:	2205      	movs	r2, #5
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e2ac      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	334d      	adds	r3, #77	@ 0x4d
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b07      	cmp	r3, #7
 8002a92:	d00b      	beq.n	8002aac <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334d      	adds	r3, #77	@ 0x4d
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	f040 80a6 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334d      	adds	r3, #77	@ 0x4d
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3344      	adds	r3, #68	@ 0x44
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4403      	add	r3, r0
 8002ae0:	3344      	adds	r3, #68	@ 0x44
 8002ae2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3344      	adds	r3, #68	@ 0x44
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d943      	bls.n	8002b82 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3344      	adds	r3, #68	@ 0x44
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	331a      	adds	r3, #26
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d123      	bne.n	8002b6c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	331b      	adds	r3, #27
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	331c      	adds	r3, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	@ 0x4c
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b80:	e229      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	334c      	adds	r3, #76	@ 0x4c
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3326      	adds	r3, #38	@ 0x26
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3326      	adds	r3, #38	@ 0x26
 8002bbc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	f040 8209 	bne.w	8002fd6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bda:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002be2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bf6:	e1ee      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334d      	adds	r3, #77	@ 0x4d
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	f040 80c8 	bne.w	8002da0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334d      	adds	r3, #77	@ 0x4d
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	331b      	adds	r3, #27
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f040 81ce 	bne.w	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3326      	adds	r3, #38	@ 0x26
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d16b      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3348      	adds	r3, #72	@ 0x48
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4403      	add	r3, r0
 8002c72:	3348      	adds	r3, #72	@ 0x48
 8002c74:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3348      	adds	r3, #72	@ 0x48
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d943      	bls.n	8002d14 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3348      	adds	r3, #72	@ 0x48
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	331b      	adds	r3, #27
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3344      	adds	r3, #68	@ 0x44
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d809      	bhi.n	8002cde <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	331c      	adds	r3, #28
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	0151      	lsls	r1, r2, #5
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	440a      	add	r2, r1
 8002cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	334c      	adds	r3, #76	@ 0x4c
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e014      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	334c      	adds	r3, #76	@ 0x4c
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e009      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	334c      	adds	r3, #76	@ 0x4c
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3326      	adds	r3, #38	@ 0x26
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3326      	adds	r3, #38	@ 0x26
 8002d64:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	f040 8136 	bne.w	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d82:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d8a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e11b      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334d      	adds	r3, #77	@ 0x4d
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	f040 8081 	bne.w	8002eba <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334d      	adds	r3, #77	@ 0x4d
 8002dc8:	2202      	movs	r2, #2
 8002dca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	331b      	adds	r3, #27
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 80fa 	bne.w	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334c      	adds	r3, #76	@ 0x4c
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	0151      	lsls	r1, r2, #5
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e16:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	0151      	lsls	r1, r2, #5
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	440a      	add	r2, r1
 8002e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e36:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	0151      	lsls	r1, r2, #5
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	440a      	add	r2, r1
 8002e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e52:	f023 0320 	bic.w	r3, r3, #32
 8002e56:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3326      	adds	r3, #38	@ 0x26
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3326      	adds	r3, #38	@ 0x26
 8002e7e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	f040 80a9 	bne.w	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ea4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	e08e      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334d      	adds	r3, #77	@ 0x4d
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d143      	bne.n	8002f58 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334d      	adds	r3, #77	@ 0x4d
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334c      	adds	r3, #76	@ 0x4c
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3326      	adds	r3, #38	@ 0x26
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3326      	adds	r3, #38	@ 0x26
 8002f1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d159      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f3a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f42:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e03f      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	334d      	adds	r3, #77	@ 0x4d
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d126      	bne.n	8002fbc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	334d      	adds	r3, #77	@ 0x4d
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3344      	adds	r3, #68	@ 0x44
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1c59      	adds	r1, r3, #1
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3344      	adds	r3, #68	@ 0x44
 8002fa4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	334c      	adds	r3, #76	@ 0x4c
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e00d      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	@ 0x4d
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f000 8100 	beq.w	80031d4 <HCD_HC_IN_IRQHandler+0xcca>
 8002fd4:	e000      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	334c      	adds	r3, #76	@ 0x4c
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f009 f82a 	bl	800c048 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff4:	e0ef      	b.n	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fd36 	bl	8005a70 <USB_ReadChInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d12f      	bne.n	800306e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2340      	movs	r3, #64	@ 0x40
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	2205      	movs	r2, #5
 8003032:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	331a      	adds	r3, #26
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3344      	adds	r3, #68	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f003 faa5 	bl	80065b6 <USB_HC_Halt>
 800306c:	e0b3      	b.n	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fcfa 	bl	8005a70 <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	f040 80a7 	bne.w	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3326      	adds	r3, #38	@ 0x26
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d11b      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3344      	adds	r3, #68	@ 0x44
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2204      	movs	r2, #4
 80030c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fa71 	bl	80065b6 <USB_HC_Halt>
 80030d4:	e03f      	b.n	8003156 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3326      	adds	r3, #38	@ 0x26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3326      	adds	r3, #38	@ 0x26
 80030fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d129      	bne.n	8003156 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3344      	adds	r3, #68	@ 0x44
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	799b      	ldrb	r3, [r3, #6]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HCD_HC_IN_IRQHandler+0xc2a>
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	331b      	adds	r3, #27
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d110      	bne.n	8003156 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	2204      	movs	r2, #4
 8003146:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fa30 	bl	80065b6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	331b      	adds	r3, #27
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d129      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	331b      	adds	r3, #27
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	440a      	add	r2, r1
 8003196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800319a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2310      	movs	r3, #16
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	e000      	b.n	80031d6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80031d4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fc38 	bl	8005a70 <USB_ReadChInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d11b      	bne.n	8003242 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003216:	461a      	mov	r2, r3
 8003218:	2304      	movs	r3, #4
 800321a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334d      	adds	r3, #77	@ 0x4d
 800322c:	2207      	movs	r2, #7
 800322e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f9bc 	bl	80065b6 <USB_HC_Halt>
 800323e:	f000 bc89 	b.w	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f002 fc10 	bl	8005a70 <USB_ReadChInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 8082 	bne.w	8003360 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	2320      	movs	r3, #32
 800326c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3319      	adds	r3, #25
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d124      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3319      	adds	r3, #25
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334c      	adds	r3, #76	@ 0x4c
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	2203      	movs	r2, #3
 80032be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 f974 	bl	80065b6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331a      	adds	r3, #26
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 8437 	bne.w	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	331b      	adds	r3, #27
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 842b 	bne.w	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d009      	beq.n	8003328 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	331b      	adds	r3, #27
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	2203      	movs	r2, #3
 800333a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f003 f936 	bl	80065b6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e3f9      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fb81 	bl	8005a70 <USB_ReadChInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003378:	d111      	bne.n	800339e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800338c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f003 f90d 	bl	80065b6 <USB_HC_Halt>
 800339c:	e3da      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fb62 	bl	8005a70 <USB_ReadChInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d168      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fb4c 	bl	8005a70 <USB_ReadChInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033de:	2b40      	cmp	r3, #64	@ 0x40
 80033e0:	d112      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3319      	adds	r3, #25
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	2340      	movs	r3, #64	@ 0x40
 8003406:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	331b      	adds	r3, #27
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	331b      	adds	r3, #27
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	440a      	add	r2, r1
 8003448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345e:	461a      	mov	r2, r3
 8003460:	2301      	movs	r3, #1
 8003462:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	@ 0x4d
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f003 f898 	bl	80065b6 <USB_HC_Halt>
 8003486:	e365      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f002 faed 	bl	8005a70 <USB_ReadChInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d139      	bne.n	8003514 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334d      	adds	r3, #77	@ 0x4d
 80034b0:	2205      	movs	r2, #5
 80034b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	331a      	adds	r3, #26
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3319      	adds	r3, #25
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	@ 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 f85b 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	2340      	movs	r3, #64	@ 0x40
 8003510:	6093      	str	r3, [r2, #8]
 8003512:	e31f      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f002 faa7 	bl	8005a70 <USB_ReadChInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d11a      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003538:	461a      	mov	r2, r3
 800353a:	2308      	movs	r3, #8
 800353c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	334d      	adds	r3, #77	@ 0x4d
 800354e:	2206      	movs	r2, #6
 8003550:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f82b 	bl	80065b6 <USB_HC_Halt>
 8003560:	e2f8      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fa80 	bl	8005a70 <USB_ReadChInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b10      	cmp	r3, #16
 8003578:	d144      	bne.n	8003604 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3344      	adds	r3, #68	@ 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334d      	adds	r3, #77	@ 0x4d
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3319      	adds	r3, #25
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d114      	bne.n	80035e2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3318      	adds	r3, #24
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3319      	adds	r3, #25
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f002 ffe3 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	2310      	movs	r3, #16
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	e2a7      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fa2f 	bl	8005a70 <USB_ReadChInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003618:	2b80      	cmp	r3, #128	@ 0x80
 800361a:	f040 8083 	bne.w	8003724 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	799b      	ldrb	r3, [r3, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d111      	bne.n	800364a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334d      	adds	r3, #77	@ 0x4d
 8003636:	2207      	movs	r2, #7
 8003638:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f002 ffb7 	bl	80065b6 <USB_HC_Halt>
 8003648:	e062      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3344      	adds	r3, #68	@ 0x44
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c59      	adds	r1, r3, #1
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	3344      	adds	r3, #68	@ 0x44
 800366c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3344      	adds	r3, #68	@ 0x44
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d922      	bls.n	80036ca <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3344      	adds	r3, #68	@ 0x44
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	334c      	adds	r3, #76	@ 0x4c
 80036a8:	2204      	movs	r2, #4
 80036aa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334c      	adds	r3, #76	@ 0x4c
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f008 fcc0 	bl	800c048 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036c8:	e022      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	@ 0x4c
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036f4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036fc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	6093      	str	r3, [r2, #8]
 8003722:	e217      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f002 f99f 	bl	8005a70 <USB_ReadChInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373c:	d11b      	bne.n	8003776 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	334d      	adds	r3, #77	@ 0x4d
 800374e:	2209      	movs	r2, #9
 8003750:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f002 ff2b 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003772:	6093      	str	r3, [r2, #8]
 8003774:	e1ee      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f976 	bl	8005a70 <USB_ReadChInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	f040 81df 	bne.w	8003b4e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	2302      	movs	r3, #2
 80037a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 8093 	bne.w	80038e0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	334d      	adds	r3, #77	@ 0x4d
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	334c      	adds	r3, #76	@ 0x4c
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3326      	adds	r3, #38	@ 0x26
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d00b      	beq.n	8003810 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3326      	adds	r3, #38	@ 0x26
 8003808:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800380a:	2b03      	cmp	r3, #3
 800380c:	f040 8190 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	799b      	ldrb	r3, [r3, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d115      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	333d      	adds	r3, #61	@ 0x3d
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	f083 0301 	eor.w	r3, r3, #1
 8003830:	b2d8      	uxtb	r0, r3
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	333d      	adds	r3, #61	@ 0x3d
 8003840:	4602      	mov	r2, r0
 8003842:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 8171 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3334      	adds	r3, #52	@ 0x34
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8165 	beq.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3334      	adds	r3, #52	@ 0x34
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	3328      	adds	r3, #40	@ 0x28
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	440b      	add	r3, r1
 800388c:	1e59      	subs	r1, r3, #1
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	3328      	adds	r3, #40	@ 0x28
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 813f 	beq.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	333d      	adds	r3, #61	@ 0x3d
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2d8      	uxtb	r0, r3
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	333d      	adds	r3, #61	@ 0x3d
 80038da:	4602      	mov	r2, r0
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e127      	b.n	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334d      	adds	r3, #77	@ 0x4d
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d120      	bne.n	8003938 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	334d      	adds	r3, #77	@ 0x4d
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	331b      	adds	r3, #27
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 8107 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	334c      	adds	r3, #76	@ 0x4c
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e0fb      	b.n	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	334d      	adds	r3, #77	@ 0x4d
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d13a      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334d      	adds	r3, #77	@ 0x4d
 800395e:	2202      	movs	r2, #2
 8003960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	334c      	adds	r3, #76	@ 0x4c
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	331b      	adds	r3, #27
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 80d1 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	331b      	adds	r3, #27
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	0151      	lsls	r1, r2, #5
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	440a      	add	r2, r1
 80039b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c0:	6053      	str	r3, [r2, #4]
 80039c2:	e0b5      	b.n	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d114      	bne.n	8003a04 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334c      	adds	r3, #76	@ 0x4c
 80039fe:	2202      	movs	r2, #2
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e095      	b.n	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	334d      	adds	r3, #77	@ 0x4d
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d114      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334d      	adds	r3, #77	@ 0x4d
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	334c      	adds	r3, #76	@ 0x4c
 8003a3e:	2205      	movs	r2, #5
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e075      	b.n	8003b30 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	334d      	adds	r3, #77	@ 0x4d
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d00a      	beq.n	8003a70 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	334d      	adds	r3, #77	@ 0x4d
 8003a6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d170      	bne.n	8003b52 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334d      	adds	r3, #77	@ 0x4d
 8003a80:	2202      	movs	r2, #2
 8003a82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3344      	adds	r3, #68	@ 0x44
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4403      	add	r3, r0
 8003aa4:	3344      	adds	r3, #68	@ 0x44
 8003aa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3344      	adds	r3, #68	@ 0x44
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d914      	bls.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3344      	adds	r3, #68	@ 0x44
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	334c      	adds	r3, #76	@ 0x4c
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ae6:	e022      	b.n	8003b2e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334c      	adds	r3, #76	@ 0x4c
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b12:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b1a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b2e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	334c      	adds	r3, #76	@ 0x4c
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f008 fa7e 	bl	800c048 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b4c:	e002      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003b52:	bf00      	nop
  }
}
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08a      	sub	sp, #40	@ 0x28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	0c5b      	lsrs	r3, r3, #17
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d004      	beq.n	8003ba0 <HCD_RXQLVL_IRQHandler+0x46>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	f000 80b6 	beq.w	8003d0a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b9e:	e0b7      	b.n	8003d10 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80b3 	beq.w	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	332c      	adds	r3, #44	@ 0x2c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80a7 	beq.w	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3338      	adds	r3, #56	@ 0x38
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4403      	add	r3, r0
 8003be4:	3334      	adds	r3, #52	@ 0x34
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4299      	cmp	r1, r3
 8003bea:	f200 8083 	bhi.w	8003cf4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	332c      	adds	r3, #44	@ 0x2c
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	b292      	uxth	r2, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f001 fec6 	bl	800599a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	332c      	adds	r3, #44	@ 0x2c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	18d1      	adds	r1, r2, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	332c      	adds	r3, #44	@ 0x2c
 8003c34:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3338      	adds	r3, #56	@ 0x38
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	18d1      	adds	r1, r2, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	3338      	adds	r3, #56	@ 0x38
 8003c5c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	0cdb      	lsrs	r3, r3, #19
 8003c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c72:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3328      	adds	r3, #40	@ 0x28
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d13f      	bne.n	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d03c      	beq.n	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003caa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cb2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	333c      	adds	r3, #60	@ 0x3c
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2d8      	uxtb	r0, r3
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	333c      	adds	r3, #60	@ 0x3c
 8003cee:	4602      	mov	r2, r0
 8003cf0:	701a      	strb	r2, [r3, #0]
      break;
 8003cf2:	e00c      	b.n	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	334c      	adds	r3, #76	@ 0x4c
 8003d04:	2204      	movs	r2, #4
 8003d06:	701a      	strb	r2, [r3, #0]
      break;
 8003d08:	e001      	b.n	8003d0e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003d0e:	bf00      	nop
  }
}
 8003d10:	bf00      	nop
 8003d12:	3728      	adds	r7, #40	@ 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d10b      	bne.n	8003d68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f008 f958 	bl	800c010 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d132      	bne.n	8003dd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d126      	bne.n	8003dd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7a5b      	ldrb	r3, [r3, #9]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d113      	bne.n	8003db4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d96:	d106      	bne.n	8003da6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 ff8a 	bl	8005cb8 <USB_InitFSLSPClkSel>
 8003da4:	e011      	b.n	8003dca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 ff83 	bl	8005cb8 <USB_InitFSLSPClkSel>
 8003db2:	e00a      	b.n	8003dca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	79db      	ldrb	r3, [r3, #7]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003dc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f008 f94e 	bl	800c06c <HAL_HCD_PortEnabled_Callback>
 8003dd0:	e002      	b.n	8003dd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f008 f958 	bl	800c088 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d103      	bne.n	8003dea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003df0:	461a      	mov	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6013      	str	r3, [r2, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e12b      	b.n	800406a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd f8c0 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	@ 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e64:	f001 fa20 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8003e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a81      	ldr	r2, [pc, #516]	@ (8004074 <HAL_I2C_Init+0x274>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d807      	bhi.n	8003e84 <HAL_I2C_Init+0x84>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a80      	ldr	r2, [pc, #512]	@ (8004078 <HAL_I2C_Init+0x278>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf94      	ite	ls
 8003e7c:	2301      	movls	r3, #1
 8003e7e:	2300      	movhi	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e006      	b.n	8003e92 <HAL_I2C_Init+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a7d      	ldr	r2, [pc, #500]	@ (800407c <HAL_I2C_Init+0x27c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf94      	ite	ls
 8003e8c:	2301      	movls	r3, #1
 8003e8e:	2300      	movhi	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0e7      	b.n	800406a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a78      	ldr	r2, [pc, #480]	@ (8004080 <HAL_I2C_Init+0x280>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0c9b      	lsrs	r3, r3, #18
 8003ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8004074 <HAL_I2C_Init+0x274>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <HAL_I2C_Init+0xd4>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	e009      	b.n	8003ee8 <HAL_I2C_Init+0xe8>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a69      	ldr	r2, [pc, #420]	@ (8004084 <HAL_I2C_Init+0x284>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003efa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	495c      	ldr	r1, [pc, #368]	@ (8004074 <HAL_I2C_Init+0x274>)
 8003f04:	428b      	cmp	r3, r1
 8003f06:	d819      	bhi.n	8003f3c <HAL_I2C_Init+0x13c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e59      	subs	r1, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_I2C_Init+0x138>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1e59      	subs	r1, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	e051      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	e04f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <HAL_I2C_Init+0x168>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e012      	b.n	8003f8e <HAL_I2C_Init+0x18e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e58      	subs	r0, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	0099      	lsls	r1, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Init+0x196>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e022      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10e      	bne.n	8003fbc <HAL_I2C_Init+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e58      	subs	r0, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	440b      	add	r3, r1
 8003fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fba:	e00f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e58      	subs	r0, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	0099      	lsls	r1, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	6809      	ldr	r1, [r1, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800400a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6911      	ldr	r1, [r2, #16]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	000186a0 	.word	0x000186a0
 8004078:	001e847f 	.word	0x001e847f
 800407c:	003d08ff 	.word	0x003d08ff
 8004080:	431bde83 	.word	0x431bde83
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e128      	b.n	80042ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a90      	ldr	r2, [pc, #576]	@ (80042f4 <HAL_I2S_Init+0x26c>)
 80040b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fc ffc1 	bl	800103c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2202      	movs	r2, #2
 80040dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d060      	beq.n	80041a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80040ee:	2310      	movs	r3, #16
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e001      	b.n	80040f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d802      	bhi.n	8004106 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004106:	2001      	movs	r0, #1
 8004108:	f001 f9c4 	bl	8005494 <HAL_RCCEx_GetPeriphCLKFreq>
 800410c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004116:	d125      	bne.n	8004164 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	fbb2 f2f3 	udiv	r2, r2, r3
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	3305      	adds	r3, #5
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e01f      	b.n	8004182 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	fbb2 f2f3 	udiv	r2, r2, r3
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	3305      	adds	r3, #5
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e00e      	b.n	8004182 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	3305      	adds	r3, #5
 8004180:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4a5c      	ldr	r2, [pc, #368]	@ (80042f8 <HAL_I2S_Init+0x270>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e003      	b.n	80041b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041a8:	2302      	movs	r3, #2
 80041aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d902      	bls.n	80041bc <HAL_I2S_Init+0x134>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2bff      	cmp	r3, #255	@ 0xff
 80041ba:	d907      	bls.n	80041cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c0:	f043 0210 	orr.w	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e08f      	b.n	80042ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	ea42 0103 	orr.w	r1, r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	430a      	orrs	r2, r1
 80041de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80041ea:	f023 030f 	bic.w	r3, r3, #15
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6851      	ldr	r1, [r2, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6892      	ldr	r2, [r2, #8]
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68d2      	ldr	r2, [r2, #12]
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6992      	ldr	r2, [r2, #24]
 8004202:	430a      	orrs	r2, r1
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d161      	bne.n	80042dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a38      	ldr	r2, [pc, #224]	@ (80042fc <HAL_I2S_Init+0x274>)
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a37      	ldr	r2, [pc, #220]	@ (8004300 <HAL_I2S_Init+0x278>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_I2S_Init+0x1a4>
 8004228:	4b36      	ldr	r3, [pc, #216]	@ (8004304 <HAL_I2S_Init+0x27c>)
 800422a:	e001      	b.n	8004230 <HAL_I2S_Init+0x1a8>
 800422c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	4932      	ldr	r1, [pc, #200]	@ (8004300 <HAL_I2S_Init+0x278>)
 8004238:	428a      	cmp	r2, r1
 800423a:	d101      	bne.n	8004240 <HAL_I2S_Init+0x1b8>
 800423c:	4a31      	ldr	r2, [pc, #196]	@ (8004304 <HAL_I2S_Init+0x27c>)
 800423e:	e001      	b.n	8004244 <HAL_I2S_Init+0x1bc>
 8004240:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004244:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004248:	f023 030f 	bic.w	r3, r3, #15
 800424c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2b      	ldr	r2, [pc, #172]	@ (8004300 <HAL_I2S_Init+0x278>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_I2S_Init+0x1d4>
 8004258:	4b2a      	ldr	r3, [pc, #168]	@ (8004304 <HAL_I2S_Init+0x27c>)
 800425a:	e001      	b.n	8004260 <HAL_I2S_Init+0x1d8>
 800425c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004260:	2202      	movs	r2, #2
 8004262:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a25      	ldr	r2, [pc, #148]	@ (8004300 <HAL_I2S_Init+0x278>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_I2S_Init+0x1ea>
 800426e:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <HAL_I2S_Init+0x27c>)
 8004270:	e001      	b.n	8004276 <HAL_I2S_Init+0x1ee>
 8004272:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004282:	d003      	beq.n	800428c <HAL_I2S_Init+0x204>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800428c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e001      	b.n	8004298 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042a2:	4313      	orrs	r3, r2
 80042a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	4313      	orrs	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004300 <HAL_I2S_Init+0x278>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <HAL_I2S_Init+0x24c>
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <HAL_I2S_Init+0x27c>)
 80042d2:	e001      	b.n	80042d8 <HAL_I2S_Init+0x250>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d8:	897a      	ldrh	r2, [r7, #10]
 80042da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	080043ff 	.word	0x080043ff
 80042f8:	cccccccd 	.word	0xcccccccd
 80042fc:	08004515 	.word	0x08004515
 8004300:	40003800 	.word	0x40003800
 8004304:	40003400 	.word	0x40003400

08004308 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004388:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffb8 	bl	8004308 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	b292      	uxth	r2, r2
 80043b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	1c9a      	adds	r2, r3, #2
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10e      	bne.n	80043f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff93 	bl	800431c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b04      	cmp	r3, #4
 8004418:	d13a      	bne.n	8004490 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d109      	bne.n	8004438 <I2S_IRQHandler+0x3a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d102      	bne.n	8004438 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ffb4 	bl	80043a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	d126      	bne.n	8004490 <I2S_IRQHandler+0x92>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b20      	cmp	r3, #32
 800444e:	d11f      	bne.n	8004490 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800445e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ff50 	bl	8004330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b03      	cmp	r3, #3
 800449a:	d136      	bne.n	800450a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d109      	bne.n	80044ba <I2S_IRQHandler+0xbc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b80      	cmp	r3, #128	@ 0x80
 80044b2:	d102      	bne.n	80044ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff45 	bl	8004344 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d122      	bne.n	800450a <I2S_IRQHandler+0x10c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d11b      	bne.n	800450a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fc:	f043 0204 	orr.w	r2, r3, #4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff13 	bl	8004330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a92      	ldr	r2, [pc, #584]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800452e:	4b92      	ldr	r3, [pc, #584]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004530:	e001      	b.n	8004536 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004532:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a8b      	ldr	r2, [pc, #556]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800454c:	4b8a      	ldr	r3, [pc, #552]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800454e:	e001      	b.n	8004554 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004560:	d004      	beq.n	800456c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 8099 	bne.w	800469e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d107      	bne.n	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f925 	bl	80047d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9c8 	bl	8004930 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	d13a      	bne.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d035      	beq.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80045be:	4b6e      	ldr	r3, [pc, #440]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045c0:	e001      	b.n	80045c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80045c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4969      	ldr	r1, [pc, #420]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ce:	428b      	cmp	r3, r1
 80045d0:	d101      	bne.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80045d2:	4b69      	ldr	r3, [pc, #420]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d4:	e001      	b.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe88 	bl	8004330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	f040 80c3 	bne.w	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80bd 	beq.w	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004646:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a49      	ldr	r2, [pc, #292]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004652:	4b49      	ldr	r3, [pc, #292]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004654:	e001      	b.n	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4944      	ldr	r1, [pc, #272]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004662:	428b      	cmp	r3, r1
 8004664:	d101      	bne.n	800466a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004666:	4b44      	ldr	r3, [pc, #272]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004668:	e001      	b.n	800466e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800466a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800466e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004672:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	f043 0204 	orr.w	r2, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fe4a 	bl	8004330 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800469c:	e089      	b.n	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d107      	bne.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8be 	bl	8004834 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8fd 	bl	80048cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d12f      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02a      	beq.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004700:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004702:	e001      	b.n	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004704:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4919      	ldr	r1, [pc, #100]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004710:	428b      	cmp	r3, r1
 8004712:	d101      	bne.n	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004714:	4b18      	ldr	r3, [pc, #96]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004716:	e001      	b.n	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fdfa 	bl	8004330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d136      	bne.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d031      	beq.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800475c:	e001      	b.n	8004762 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800475e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4902      	ldr	r1, [pc, #8]	@ (8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800476a:	428b      	cmp	r3, r1
 800476c:	d106      	bne.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800476e:	4b02      	ldr	r3, [pc, #8]	@ (8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004770:	e006      	b.n	8004780 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004772:	bf00      	nop
 8004774:	40003800 	.word	0x40003800
 8004778:	40003400 	.word	0x40003400
 800477c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004780:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004784:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f043 0204 	orr.w	r2, r3, #4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fdc0 	bl	8004330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047b0:	e000      	b.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047b2:	bf00      	nop
}
 80047b4:	bf00      	nop
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	1c99      	adds	r1, r3, #2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004810:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ffc9 	bl	80047bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	1c99      	adds	r1, r3, #2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6251      	str	r1, [r2, #36]	@ 0x24
 8004846:	8819      	ldrh	r1, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <I2SEx_TxISR_I2SExt+0x90>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <I2SEx_TxISR_I2SExt+0x22>
 8004852:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004854:	e001      	b.n	800485a <I2SEx_TxISR_I2SExt+0x26>
 8004856:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800485a:	460a      	mov	r2, r1
 800485c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d121      	bne.n	80048ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a12      	ldr	r2, [pc, #72]	@ (80048c4 <I2SEx_TxISR_I2SExt+0x90>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <I2SEx_TxISR_I2SExt+0x50>
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004882:	e001      	b.n	8004888 <I2SEx_TxISR_I2SExt+0x54>
 8004884:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	490d      	ldr	r1, [pc, #52]	@ (80048c4 <I2SEx_TxISR_I2SExt+0x90>)
 8004890:	428b      	cmp	r3, r1
 8004892:	d101      	bne.n	8004898 <I2SEx_TxISR_I2SExt+0x64>
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004896:	e001      	b.n	800489c <I2SEx_TxISR_I2SExt+0x68>
 8004898:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800489c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff81 	bl	80047bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40003800 	.word	0x40003800
 80048c8:	40003400 	.word	0x40003400

080048cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68d8      	ldr	r0, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	1c99      	adds	r1, r3, #2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80048e4:	b282      	uxth	r2, r0
 80048e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d113      	bne.n	8004928 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800490e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ff4a 	bl	80047bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a20      	ldr	r2, [pc, #128]	@ (80049c0 <I2SEx_RxISR_I2SExt+0x90>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <I2SEx_RxISR_I2SExt+0x16>
 8004942:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <I2SEx_RxISR_I2SExt+0x94>)
 8004944:	e001      	b.n	800494a <I2SEx_RxISR_I2SExt+0x1a>
 8004946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494a:	68d8      	ldr	r0, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	1c99      	adds	r1, r3, #2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004956:	b282      	uxth	r2, r0
 8004958:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <I2SEx_RxISR_I2SExt+0x90>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <I2SEx_RxISR_I2SExt+0x50>
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <I2SEx_RxISR_I2SExt+0x94>)
 800497e:	e001      	b.n	8004984 <I2SEx_RxISR_I2SExt+0x54>
 8004980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	490d      	ldr	r1, [pc, #52]	@ (80049c0 <I2SEx_RxISR_I2SExt+0x90>)
 800498c:	428b      	cmp	r3, r1
 800498e:	d101      	bne.n	8004994 <I2SEx_RxISR_I2SExt+0x64>
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <I2SEx_RxISR_I2SExt+0x94>)
 8004992:	e001      	b.n	8004998 <I2SEx_RxISR_I2SExt+0x68>
 8004994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004998:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800499c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff03 	bl	80047bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40003800 	.word	0x40003800
 80049c4:	40003400 	.word	0x40003400

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e267      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d075      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049e6:	4b88      	ldr	r3, [pc, #544]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f2:	4b85      	ldr	r3, [pc, #532]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d112      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b82      	ldr	r3, [pc, #520]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05b      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x108>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d157      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e242      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x74>
 8004a2e:	4b76      	ldr	r3, [pc, #472]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a75      	ldr	r2, [pc, #468]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e01d      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b70      	ldr	r3, [pc, #448]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b6d      	ldr	r3, [pc, #436]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6c      	ldr	r2, [pc, #432]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a60:	4b69      	ldr	r3, [pc, #420]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a68      	ldr	r2, [pc, #416]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b66      	ldr	r3, [pc, #408]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fc fd60 	bl	8001544 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fc fd5c 	bl	8001544 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	@ 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e207      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0xc0>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fc fd4c 	bl	8001544 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fc fd48 	bl	8001544 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	@ 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1f3      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	4b51      	ldr	r3, [pc, #324]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe8>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ade:	4b4a      	ldr	r3, [pc, #296]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b44      	ldr	r3, [pc, #272]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1c7      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4937      	ldr	r1, [pc, #220]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	e03a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b34      	ldr	r3, [pc, #208]	@ (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fd01 	bl	8001544 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fc fcfd 	bl	8001544 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1a8      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	4b2b      	ldr	r3, [pc, #172]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4925      	ldr	r1, [pc, #148]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fc fce0 	bl	8001544 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fc fcdc 	bl	8001544 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e187      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d036      	beq.n	8004c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fc fcc0 	bl	8001544 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fc fcbc 	bl	8001544 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e167      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x200>
 8004be6:	e01b      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fc fca9 	bl	8001544 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	e00e      	b.n	8004c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fc fca5 	bl	8001544 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d907      	bls.n	8004c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e150      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470000 	.word	0x42470000
 8004c10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ea      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8097 	beq.w	8004d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c32:	4b81      	ldr	r3, [pc, #516]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b7d      	ldr	r3, [pc, #500]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	4a7c      	ldr	r2, [pc, #496]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b77      	ldr	r3, [pc, #476]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b74      	ldr	r3, [pc, #464]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a73      	ldr	r2, [pc, #460]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fc fc65 	bl	8001544 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fc fc61 	bl	8001544 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e10c      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b6a      	ldr	r3, [pc, #424]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
 8004ca4:	4b64      	ldr	r3, [pc, #400]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a63      	ldr	r2, [pc, #396]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x30c>
 8004cba:	4b5f      	ldr	r3, [pc, #380]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a5b      	ldr	r2, [pc, #364]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cd4:	4b58      	ldr	r3, [pc, #352]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	4a57      	ldr	r2, [pc, #348]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce0:	4b55      	ldr	r3, [pc, #340]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a54      	ldr	r2, [pc, #336]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fc fc26 	bl	8001544 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fc22 	bl	8001544 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0cb      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	4b49      	ldr	r3, [pc, #292]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCC_OscConfig+0x334>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fc fc10 	bl	8001544 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fc fc0c 	bl	8001544 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0b5      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ee      	bne.n	8004d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4b39      	ldr	r3, [pc, #228]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	4a38      	ldr	r2, [pc, #224]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a1 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d66:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d05c      	beq.n	8004e2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d141      	bne.n	8004dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fc fbe0 	bl	8001544 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fc fbdc 	bl	8001544 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e087      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	491b      	ldr	r1, [pc, #108]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fc fbb5 	bl	8001544 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fc fbb1 	bl	8001544 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e05c      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x416>
 8004dfc:	e054      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fc fb9e 	bl	8001544 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fc fb9a 	bl	8001544 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e045      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x444>
 8004e2a:	e03d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e038      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ec>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d121      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d11a      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d111      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0cc      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b68      	ldr	r3, [pc, #416]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d90c      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b63      	ldr	r3, [pc, #396]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b8      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f0c:	4b59      	ldr	r3, [pc, #356]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a58      	ldr	r2, [pc, #352]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f24:	4b53      	ldr	r3, [pc, #332]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a52      	ldr	r2, [pc, #328]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b50      	ldr	r3, [pc, #320]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	494d      	ldr	r1, [pc, #308]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d044      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b47      	ldr	r3, [pc, #284]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d119      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e07f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f76:	4b3f      	ldr	r3, [pc, #252]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e06f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f86:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e067      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	4b37      	ldr	r3, [pc, #220]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 0203 	bic.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4934      	ldr	r1, [pc, #208]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc facc 	bl	8001544 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb0:	f7fc fac8 	bl	8001544 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e04f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 020c 	and.w	r2, r3, #12
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1eb      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b25      	ldr	r3, [pc, #148]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20c      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e032      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500c:	4b19      	ldr	r3, [pc, #100]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4916      	ldr	r1, [pc, #88]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800502a:	4b12      	ldr	r3, [pc, #72]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	490e      	ldr	r1, [pc, #56]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800503e:	f000 f821 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8005042:	4602      	mov	r2, r0
 8005044:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	490a      	ldr	r1, [pc, #40]	@ (8005078 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	5ccb      	ldrb	r3, [r1, r3]
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a09      	ldr	r2, [pc, #36]	@ (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fc fa2c 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023c00 	.word	0x40023c00
 8005074:	40023800 	.word	0x40023800
 8005078:	0800d578 	.word	0x0800d578
 800507c:	20000000 	.word	0x20000000
 8005080:	20000004 	.word	0x20000004

08005084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b094      	sub	sp, #80	@ 0x50
 800508a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800509c:	4b79      	ldr	r3, [pc, #484]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d00d      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x40>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	f200 80e1 	bhi.w	8005270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x34>
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x3a>
 80050b6:	e0db      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b73      	ldr	r3, [pc, #460]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050bc:	e0db      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050be:	4b73      	ldr	r3, [pc, #460]	@ (800528c <HAL_RCC_GetSysClockFreq+0x208>)
 80050c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050c2:	e0d8      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d063      	beq.n	80051a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050da:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	2200      	movs	r2, #0
 80050e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	f04f 0000 	mov.w	r0, #0
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005108:	0150      	lsls	r0, r2, #5
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4621      	mov	r1, r4
 8005110:	1a51      	subs	r1, r2, r1
 8005112:	6139      	str	r1, [r7, #16]
 8005114:	4629      	mov	r1, r5
 8005116:	eb63 0301 	sbc.w	r3, r3, r1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005128:	4659      	mov	r1, fp
 800512a:	018b      	lsls	r3, r1, #6
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005132:	4651      	mov	r1, sl
 8005134:	018a      	lsls	r2, r1, #6
 8005136:	4651      	mov	r1, sl
 8005138:	ebb2 0801 	subs.w	r8, r2, r1
 800513c:	4659      	mov	r1, fp
 800513e:	eb63 0901 	sbc.w	r9, r3, r1
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800514e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005156:	4690      	mov	r8, r2
 8005158:	4699      	mov	r9, r3
 800515a:	4623      	mov	r3, r4
 800515c:	eb18 0303 	adds.w	r3, r8, r3
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	462b      	mov	r3, r5
 8005164:	eb49 0303 	adc.w	r3, r9, r3
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005176:	4629      	mov	r1, r5
 8005178:	024b      	lsls	r3, r1, #9
 800517a:	4621      	mov	r1, r4
 800517c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005180:	4621      	mov	r1, r4
 8005182:	024a      	lsls	r2, r1, #9
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518a:	2200      	movs	r2, #0
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800518e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005194:	f7fb f86c 	bl	8000270 <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4613      	mov	r3, r2
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	e058      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a2:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	2200      	movs	r2, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	4611      	mov	r1, r2
 80051ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	0159      	lsls	r1, r3, #5
 80051ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ce:	0150      	lsls	r0, r2, #5
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4641      	mov	r1, r8
 80051d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051da:	4649      	mov	r1, r9
 80051dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051f4:	ebb2 040a 	subs.w	r4, r2, sl
 80051f8:	eb63 050b 	sbc.w	r5, r3, fp
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	00eb      	lsls	r3, r5, #3
 8005206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520a:	00e2      	lsls	r2, r4, #3
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
 8005210:	4643      	mov	r3, r8
 8005212:	18e3      	adds	r3, r4, r3
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	464b      	mov	r3, r9
 8005218:	eb45 0303 	adc.w	r3, r5, r3
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800522a:	4629      	mov	r1, r5
 800522c:	028b      	lsls	r3, r1, #10
 800522e:	4621      	mov	r1, r4
 8005230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005234:	4621      	mov	r1, r4
 8005236:	028a      	lsls	r2, r1, #10
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523e:	2200      	movs	r2, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	61fa      	str	r2, [r7, #28]
 8005244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005248:	f7fb f812 	bl	8000270 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	3301      	adds	r3, #1
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800526e:	e002      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x204>)
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005278:	4618      	mov	r0, r3
 800527a:	3750      	adds	r7, #80	@ 0x50
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
 8005288:	00f42400 	.word	0x00f42400
 800528c:	007a1200 	.word	0x007a1200

08005290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000000 	.word	0x20000000

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052ac:	f7ff fff0 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0a9b      	lsrs	r3, r3, #10
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4903      	ldr	r1, [pc, #12]	@ (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40023800 	.word	0x40023800
 80052cc:	0800d588 	.word	0x0800d588

080052d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d035      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052f8:	4b62      	ldr	r3, [pc, #392]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fc f921 	bl	8001544 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005306:	f7fc f91d 	bl	8001544 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e0b0      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005318:	4b5b      	ldr	r3, [pc, #364]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f0      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	019a      	lsls	r2, r3, #6
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	071b      	lsls	r3, r3, #28
 8005330:	4955      	ldr	r1, [pc, #340]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005338:	4b52      	ldr	r3, [pc, #328]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800533e:	f7fc f901 	bl	8001544 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005346:	f7fc f8fd 	bl	8001544 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e090      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005358:	4b4b      	ldr	r3, [pc, #300]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8083 	beq.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	4b44      	ldr	r3, [pc, #272]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537a:	4a43      	ldr	r2, [pc, #268]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005380:	6413      	str	r3, [r2, #64]	@ 0x40
 8005382:	4b41      	ldr	r3, [pc, #260]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800538e:	4b3f      	ldr	r3, [pc, #252]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a3e      	ldr	r2, [pc, #248]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800539a:	f7fc f8d3 	bl	8001544 <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a2:	f7fc f8cf 	bl	8001544 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e062      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053b4:	4b35      	ldr	r3, [pc, #212]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c0:	4b31      	ldr	r3, [pc, #196]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02f      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d028      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053de:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053e8:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ee:	4b28      	ldr	r3, [pc, #160]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053f4:	4a24      	ldr	r2, [pc, #144]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053fa:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d114      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005406:	f7fc f89d 	bl	8001544 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fc f899 	bl	8001544 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e02a      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005424:	4b18      	ldr	r3, [pc, #96]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800543c:	d10d      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800543e:	4b12      	ldr	r3, [pc, #72]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800544e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005452:	490d      	ldr	r1, [pc, #52]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]
 8005458:	e005      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005460:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005464:	6093      	str	r3, [r2, #8]
 8005466:	4b08      	ldr	r3, [pc, #32]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005468:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005472:	4905      	ldr	r1, [pc, #20]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005474:	4313      	orrs	r3, r2
 8005476:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	42470068 	.word	0x42470068
 8005488:	40023800 	.word	0x40023800
 800548c:	40007000 	.word	0x40007000
 8005490:	42470e40 	.word	0x42470e40

08005494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d13f      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054b2:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d006      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054c8:	d12f      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054cc:	617b      	str	r3, [r7, #20]
          break;
 80054ce:	e02f      	b.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054dc:	d108      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054de:	4b19      	ldr	r3, [pc, #100]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e6:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e007      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054f0:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f8:	4a15      	ldr	r2, [pc, #84]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005500:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800551a:	0f1b      	lsrs	r3, r3, #28
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
          break;
 8005528:	e002      	b.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
          break;
 800552e:	bf00      	nop
        }
      }
      break;
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005532:	bf00      	nop
    }
  }
  return frequency;
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	4618      	mov	r0, r3
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	00bb8000 	.word	0x00bb8000
 800554c:	007a1200 	.word	0x007a1200
 8005550:	00f42400 	.word	0x00f42400

08005554 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e01c      	b.n	80055a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	795b      	ldrb	r3, [r3, #5]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fb fde0 	bl	800113c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0204 	orr.w	r2, r2, #4
 8005590:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07b      	b.n	80056b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ca:	d009      	beq.n	80055e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
 80055d2:	e005      	b.n	80055e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fdc0 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005664:	ea42 0103 	orr.w	r1, r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0104 	and.w	r1, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	f003 0210 	and.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ba:	b084      	sub	sp, #16
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	f107 001c 	add.w	r0, r7, #28
 80056c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d123      	bne.n	800571c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9dc 	bl	8005ace <USB_CoreReset>
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
 800571a:	e01b      	b.n	8005754 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9d0 	bl	8005ace <USB_CoreReset>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005732:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38
 8005746:	e005      	b.n	8005754 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005754:	7fbb      	ldrb	r3, [r7, #30]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10b      	bne.n	8005772 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f043 0206 	orr.w	r2, r3, #6
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577e:	b004      	add	sp, #16
 8005780:	4770      	bx	lr

08005782 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 0201 	bic.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d115      	bne.n	8005814 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057f4:	200a      	movs	r0, #10
 80057f6:	f7fb feb1 	bl	800155c <HAL_Delay>
      ms += 10U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	330a      	adds	r3, #10
 80057fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f956 	bl	8005ab2 <USB_GetMode>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d01e      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005810:	d9f0      	bls.n	80057f4 <USB_SetCurrentMode+0x2e>
 8005812:	e01a      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005826:	200a      	movs	r0, #10
 8005828:	f7fb fe98 	bl	800155c <HAL_Delay>
      ms += 10U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	330a      	adds	r3, #10
 8005830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f93d 	bl	8005ab2 <USB_GetMode>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <USB_SetCurrentMode+0x84>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2bc7      	cmp	r3, #199	@ 0xc7
 8005842:	d9f0      	bls.n	8005826 <USB_SetCurrentMode+0x60>
 8005844:	e001      	b.n	800584a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e005      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2bc8      	cmp	r3, #200	@ 0xc8
 800584e:	d101      	bne.n	8005854 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005878:	d901      	bls.n	800587e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e01b      	b.n	80058b6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	daf2      	bge.n	800586c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3301      	adds	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a2:	d901      	bls.n	80058a8 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e006      	b.n	80058b6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d0f0      	beq.n	8005896 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058da:	d901      	bls.n	80058e0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e018      	b.n	8005912 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	daf2      	bge.n	80058ce <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2210      	movs	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058fe:	d901      	bls.n	8005904 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e006      	b.n	8005912 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b10      	cmp	r3, #16
 800590e:	d0f0      	beq.n	80058f2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800591e:	b480      	push	{r7}
 8005920:	b089      	sub	sp, #36	@ 0x24
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	4611      	mov	r1, r2
 800592a:	461a      	mov	r2, r3
 800592c:	460b      	mov	r3, r1
 800592e:	71fb      	strb	r3, [r7, #7]
 8005930:	4613      	mov	r3, r2
 8005932:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800593c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	d123      	bne.n	800598c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005944:	88bb      	ldrh	r3, [r7, #4]
 8005946:	3303      	adds	r3, #3
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	e018      	b.n	8005984 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	031a      	lsls	r2, r3, #12
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595e:	461a      	mov	r2, r3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3301      	adds	r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	3301      	adds	r3, #1
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d3e2      	bcc.n	8005952 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3724      	adds	r7, #36	@ 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800599a:	b480      	push	{r7}
 800599c:	b08b      	sub	sp, #44	@ 0x2c
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	4613      	mov	r3, r2
 80059a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059c0:	2300      	movs	r3, #0
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	e014      	b.n	80059f0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	601a      	str	r2, [r3, #0]
    pDest++;
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	3301      	adds	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	3301      	adds	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	3301      	adds	r3, #1
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	3301      	adds	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	3301      	adds	r3, #1
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d3e6      	bcc.n	80059c6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059f8:	8bfb      	ldrh	r3, [r7, #30]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01e      	beq.n	8005a3c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	701a      	strb	r2, [r3, #0]
      i++;
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	3301      	adds	r3, #1
 8005a28:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a30:	8bfb      	ldrh	r3, [r7, #30]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a36:	8bfb      	ldrh	r3, [r7, #30]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ea      	bne.n	8005a12 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	372c      	adds	r7, #44	@ 0x2c
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a62:	68fb      	ldr	r3, [r7, #12]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0301 	and.w	r3, r3, #1
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae6:	d901      	bls.n	8005aec <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e01b      	b.n	8005b24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	daf2      	bge.n	8005ada <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f043 0201 	orr.w	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b10:	d901      	bls.n	8005b16 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e006      	b.n	8005b24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d0f0      	beq.n	8005b04 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b30:	b084      	sub	sp, #16
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10a      	bne.n	8005ba4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b9c:	f043 0304 	orr.w	r3, r3, #4
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e014      	b.n	8005bce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e009      	b.n	8005bce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bc8:	f023 0304 	bic.w	r3, r3, #4
 8005bcc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bce:	2110      	movs	r1, #16
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fe44 	bl	800585e <USB_FlushTxFifo>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff fe6e 	bl	80058c2 <USB_FlushRxFifo>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	e015      	b.n	8005c22 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c08:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c26:	461a      	mov	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d3e3      	bcc.n	8005bf6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c3a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ca0 <USB_HostInit+0x170>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10b      	bne.n	8005c5c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <USB_HostInit+0x174>)
 8005c50:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a14      	ldr	r2, [pc, #80]	@ (8005ca8 <USB_HostInit+0x178>)
 8005c56:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005c5a:	e009      	b.n	8005c70 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <USB_HostInit+0x17c>)
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <USB_HostInit+0x180>)
 8005c6c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f043 0210 	orr.w	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <USB_HostInit+0x184>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr
 8005ca0:	40040000 	.word	0x40040000
 8005ca4:	01000200 	.word	0x01000200
 8005ca8:	00e00300 	.word	0x00e00300
 8005cac:	00600080 	.word	0x00600080
 8005cb0:	004000e0 	.word	0x004000e0
 8005cb4:	a3200008 	.word	0xa3200008

08005cb8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d00:	461a      	mov	r2, r3
 8005d02:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d06:	6053      	str	r3, [r2, #4]
 8005d08:	e00c      	b.n	8005d24 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d107      	bne.n	8005d20 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d16:	461a      	mov	r2, r3
 8005d18:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d1c:	6053      	str	r3, [r2, #4]
 8005d1e:	e001      	b.n	8005d24 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d52:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d60:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d62:	2064      	movs	r0, #100	@ 0x64
 8005d64:	f7fb fbfa 	bl	800155c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d76:	200a      	movs	r0, #10
 8005d78:	f7fb fbf0 	bl	800155c <HAL_Delay>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005daa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <USB_DriveVbus+0x44>
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d106      	bne.n	8005dca <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005dc8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd4:	d109      	bne.n	8005dea <USB_DriveVbus+0x64>
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0c5b      	lsrs	r3, r3, #17
 8005e16:	f003 0303 	and.w	r3, r3, #3
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	b29b      	uxth	r3, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	70fb      	strb	r3, [r7, #3]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70bb      	strb	r3, [r7, #2]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d87c      	bhi.n	8005f80 <USB_HC_Init+0x138>
 8005e86:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <USB_HC_Init+0x44>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005f43 	.word	0x08005f43
 8005e94:	08005e9d 	.word	0x08005e9d
 8005e98:	08005f05 	.word	0x08005f05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005eae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005eb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da10      	bge.n	8005eda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005ed8:	e055      	b.n	8005f86 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a6f      	ldr	r2, [pc, #444]	@ (800609c <USB_HC_Init+0x254>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d151      	bne.n	8005f86 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f00:	60d3      	str	r3, [r2, #12]
      break;
 8005f02:	e040      	b.n	8005f86 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f10:	461a      	mov	r2, r3
 8005f12:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005f16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	da34      	bge.n	8005f8a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f40:	e023      	b.n	8005f8a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f240 2325 	movw	r3, #549	@ 0x225
 8005f54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da17      	bge.n	8005f8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f78:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005f7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f7e:	e006      	b.n	8005f8e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
      break;
 8005f84:	e004      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f8e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	6939      	ldr	r1, [r7, #16]
 8005fd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da03      	bge.n	8005ffc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e001      	b.n	8006000 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fef9 	bl	8005df8 <USB_GetHostSpeed>
 8006006:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006008:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800600c:	2b02      	cmp	r3, #2
 800600e:	d106      	bne.n	800601e <USB_HC_Init+0x1d6>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d003      	beq.n	800601e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e001      	b.n	8006022 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006022:	787b      	ldrb	r3, [r7, #1]
 8006024:	059b      	lsls	r3, r3, #22
 8006026:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800602a:	78bb      	ldrb	r3, [r7, #2]
 800602c:	02db      	lsls	r3, r3, #11
 800602e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006032:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006034:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006038:	049b      	lsls	r3, r3, #18
 800603a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800603e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006040:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006042:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006046:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	431a      	orrs	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006060:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006062:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d003      	beq.n	8006072 <USB_HC_Init+0x22a>
 800606a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10f      	bne.n	8006092 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800608c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006090:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40040000 	.word	0x40040000

080060a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	@ 0x30
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060bc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006238 <USB_HC_StartXfer+0x198>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d12f      	bne.n	8006126 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11c      	bne.n	8006106 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7c9b      	ldrb	r3, [r3, #18]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <USB_HC_StartXfer+0x3c>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	7c9b      	ldrb	r3, [r3, #18]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d124      	bne.n	8006126 <USB_HC_StartXfer+0x86>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	799b      	ldrb	r3, [r3, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d120      	bne.n	8006126 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006102:	60d3      	str	r3, [r2, #12]
 8006104:	e00f      	b.n	8006126 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <USB_HC_StartXfer+0x86>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	795b      	ldrb	r3, [r3, #5]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fb6b 	bl	80067f8 <USB_DoPing>
        return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e232      	b.n	800658c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	799b      	ldrb	r3, [r3, #6]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d158      	bne.n	80061e0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800612e:	2301      	movs	r3, #1
 8006130:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800613a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	8a92      	ldrh	r2, [r2, #20]
 8006140:	fb03 f202 	mul.w	r2, r3, r2
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61da      	str	r2, [r3, #28]
 8006148:	e07c      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	7c9b      	ldrb	r3, [r3, #18]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d130      	bne.n	80061b4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2bbc      	cmp	r3, #188	@ 0xbc
 8006158:	d918      	bls.n	800618c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	8a9b      	ldrh	r3, [r3, #20]
 800615e:	461a      	mov	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d003      	beq.n	800617c <USB_HC_StartXfer+0xdc>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d103      	bne.n	8006184 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2202      	movs	r2, #2
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	e05f      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2201      	movs	r2, #1
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e05b      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d007      	beq.n	80061ac <USB_HC_StartXfer+0x10c>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d003      	beq.n	80061ac <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2204      	movs	r2, #4
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e04b      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2203      	movs	r2, #3
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e047      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10d      	bne.n	80061d6 <USB_HC_StartXfer+0x136>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	8a92      	ldrh	r2, [r2, #20]
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d907      	bls.n	80061d6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	8a92      	ldrh	r2, [r2, #20]
 80061cc:	fb03 f202 	mul.w	r2, r3, r2
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61da      	str	r2, [r3, #28]
 80061d4:	e036      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	61da      	str	r2, [r3, #28]
 80061de:	e031      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d018      	beq.n	800621a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	8a92      	ldrh	r2, [r2, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	3b01      	subs	r3, #1
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	8a92      	ldrh	r2, [r2, #20]
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80061fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006200:	8b7b      	ldrh	r3, [r7, #26]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90b      	bls.n	800621e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006206:	8b7b      	ldrh	r3, [r7, #26]
 8006208:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800620a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	8a92      	ldrh	r2, [r2, #20]
 8006210:	fb03 f202 	mul.w	r2, r3, r2
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	61da      	str	r2, [r3, #28]
 8006218:	e001      	b.n	800621e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800621a:	2301      	movs	r3, #1
 800621c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	78db      	ldrb	r3, [r3, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	8a92      	ldrh	r2, [r2, #20]
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	61da      	str	r2, [r3, #28]
 8006234:	e006      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
 8006236:	bf00      	nop
 8006238:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800624c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800624e:	04d9      	lsls	r1, r3, #19
 8006250:	4ba3      	ldr	r3, [pc, #652]	@ (80064e0 <USB_HC_StartXfer+0x440>)
 8006252:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006254:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7d9b      	ldrb	r3, [r3, #22]
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	0148      	lsls	r0, r1, #5
 8006264:	6a39      	ldr	r1, [r7, #32]
 8006266:	4401      	add	r1, r0
 8006268:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800626c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800626e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6999      	ldr	r1, [r3, #24]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006286:	460a      	mov	r2, r1
 8006288:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	7e7b      	ldrb	r3, [r7, #25]
 80062d2:	075b      	lsls	r3, r3, #29
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	799b      	ldrb	r3, [r3, #6]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 80c3 	bne.w	8006474 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7c5b      	ldrb	r3, [r3, #17]
 80062f2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062f8:	4313      	orrs	r3, r2
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006306:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800630a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800632a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	79db      	ldrb	r3, [r3, #7]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d123      	bne.n	800637c <USB_HC_StartXfer+0x2dc>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	78db      	ldrb	r3, [r3, #3]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11f      	bne.n	800637c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	7c9b      	ldrb	r3, [r3, #18]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d003      	beq.n	800638c <USB_HC_StartXfer+0x2ec>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	7c9b      	ldrb	r3, [r3, #18]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d117      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006390:	2b01      	cmp	r3, #1
 8006392:	d113      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10f      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ba:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7c9b      	ldrb	r3, [r3, #18]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d162      	bne.n	800648a <USB_HC_StartXfer+0x3ea>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	78db      	ldrb	r3, [r3, #3]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d15e      	bne.n	800648a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d858      	bhi.n	8006488 <USB_HC_StartXfer+0x3e8>
 80063d6:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <USB_HC_StartXfer+0x33c>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006453 	.word	0x08006453
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	6a3a      	ldr	r2, [r7, #32]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640a:	6053      	str	r3, [r2, #4]
          break;
 800640c:	e03d      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006428:	f043 030e 	orr.w	r3, r3, #14
 800642c:	6053      	str	r3, [r2, #4]
          break;
 800642e:	e02c      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	440a      	add	r2, r1
 8006446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800644a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800644e:	6053      	str	r3, [r2, #4]
          break;
 8006450:	e01b      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006470:	6053      	str	r3, [r2, #4]
          break;
 8006472:	e00a      	b.n	800648a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6053      	str	r3, [r2, #4]
 8006486:	e000      	b.n	800648a <USB_HC_StartXfer+0x3ea>
          break;
 8006488:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	78db      	ldrb	r3, [r3, #3]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e003      	b.n	80064bc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ba:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d0:	461a      	mov	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e055      	b.n	800658c <USB_HC_StartXfer+0x4ec>
 80064e0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d14e      	bne.n	800658a <USB_HC_StartXfer+0x4ea>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d04a      	beq.n	800658a <USB_HC_StartXfer+0x4ea>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	79db      	ldrb	r3, [r3, #7]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d146      	bne.n	800658a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	7c9b      	ldrb	r3, [r3, #18]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d831      	bhi.n	8006568 <USB_HC_StartXfer+0x4c8>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <USB_HC_StartXfer+0x46c>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006541 	.word	0x08006541
 8006514:	0800651d 	.word	0x0800651d
 8006518:	08006541 	.word	0x08006541
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	3303      	adds	r3, #3
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006526:	8afa      	ldrh	r2, [r7, #22]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	b29b      	uxth	r3, r3
 800652e:	429a      	cmp	r2, r3
 8006530:	d91c      	bls.n	800656c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	619a      	str	r2, [r3, #24]
        }
        break;
 800653e:	e015      	b.n	800656c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	3303      	adds	r3, #3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800654a:	8afa      	ldrh	r2, [r7, #22]
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	b29b      	uxth	r3, r3
 8006556:	429a      	cmp	r2, r3
 8006558:	d90a      	bls.n	8006570 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	619a      	str	r2, [r3, #24]
        }
        break;
 8006566:	e003      	b.n	8006570 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <USB_HC_StartXfer+0x4d2>
        break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <USB_HC_StartXfer+0x4d2>
        break;
 8006570:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	785a      	ldrb	r2, [r3, #1]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	b29b      	uxth	r3, r3
 8006580:	2000      	movs	r0, #0
 8006582:	9000      	str	r0, [sp, #0]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff f9ca 	bl	800591e <USB_WritePacket>
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	@ 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	b29b      	uxth	r3, r3
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b089      	sub	sp, #36	@ 0x24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	0c9b      	lsrs	r3, r3, #18
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0fdb      	lsrs	r3, r3, #31
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0fdb      	lsrs	r3, r3, #31
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b20      	cmp	r3, #32
 800661a:	d10d      	bne.n	8006638 <USB_HC_Halt+0x82>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USB_HC_Halt+0x82>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d002      	beq.n	8006634 <USB_HC_Halt+0x7e>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d101      	bne.n	8006638 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e0d8      	b.n	80067ea <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USB_HC_Halt+0x8e>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d173      	bne.n	800672c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006662:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d14a      	bne.n	8006706 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d133      	bne.n	80066e4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800669a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3301      	adds	r3, #1
 80066c0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066c8:	d82e      	bhi.n	8006728 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e0:	d0ec      	beq.n	80066bc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e2:	e081      	b.n	80067e8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006704:	e070      	b.n	80067e8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006726:	e05f      	b.n	80067e8 <USB_HC_Halt+0x232>
            break;
 8006728:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800672a:	e05d      	b.n	80067e8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d133      	bne.n	80067c4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	440a      	add	r2, r1
 8006772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800677a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	440a      	add	r2, r1
 8006792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800679a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3301      	adds	r3, #1
 80067a0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067a8:	d81d      	bhi.n	80067e6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c0:	d0ec      	beq.n	800679c <USB_HC_Halt+0x1e6>
 80067c2:	e011      	b.n	80067e8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e000      	b.n	80067e8 <USB_HC_Halt+0x232>
          break;
 80067e6:	bf00      	nop
    }
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3724      	adds	r7, #36	@ 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	04da      	lsls	r2, r3, #19
 8006814:	4b15      	ldr	r3, [pc, #84]	@ (800686c <USB_DoPing+0x74>)
 8006816:	4013      	ands	r3, r2
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	440a      	add	r2, r1
 8006820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006828:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006840:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006848:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	1ff80000 	.word	0x1ff80000

08006870 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fe ff8d 	bl	80057a4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fe ffe6 	bl	800585e <USB_FlushTxFifo>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff f810 	bl	80058c2 <USB_FlushRxFifo>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e01f      	b.n	80068f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b0f      	cmp	r3, #15
 80068f6:	d9dc      	bls.n	80068b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e034      	b.n	8006968 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006914:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800691c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006924:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006932:	461a      	mov	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006944:	d80c      	bhi.n	8006960 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800695c:	d0ec      	beq.n	8006938 <USB_StopHost+0xc8>
 800695e:	e000      	b.n	8006962 <USB_StopHost+0xf2>
        break;
 8006960:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3301      	adds	r3, #1
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d9c7      	bls.n	80068fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006974:	461a      	mov	r2, r3
 8006976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800697a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006982:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fe fefc 	bl	8005782 <USB_EnableGlobalInt>

  return ret;
 800698a:	7ffb      	ldrb	r3, [r7, #31]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b089      	sub	sp, #36	@ 0x24
 8006998:	af04      	add	r7, sp, #16
 800699a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800699c:	2301      	movs	r3, #1
 800699e:	2202      	movs	r2, #2
 80069a0:	2102      	movs	r1, #2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fcd1 	bl	800734a <USBH_FindInterface>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2bff      	cmp	r3, #255	@ 0xff
 80069b0:	d002      	beq.n	80069b8 <USBH_CDC_InterfaceInit+0x24>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d901      	bls.n	80069bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e13d      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fca6 	bl	8007312 <USBH_SelectInterface>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e131      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069da:	2050      	movs	r0, #80	@ 0x50
 80069dc:	f005 fd58 	bl	800c490 <malloc>
 80069e0:	4603      	mov	r3, r0
 80069e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e11f      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069f8:	2250      	movs	r2, #80	@ 0x50
 80069fa:	2100      	movs	r1, #0
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	f005 ff76 	bl	800c8ee <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	211a      	movs	r1, #26
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da15      	bge.n	8006a46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	211a      	movs	r1, #26
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	211a      	movs	r1, #26
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a40:	881a      	ldrh	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 fa18 	bl	8008e82 <USBH_AllocPipe>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7858      	ldrb	r0, [r3, #1]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	8952      	ldrh	r2, [r2, #10]
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	2203      	movs	r2, #3
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 f9d0 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f005 fc79 	bl	800c384 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a92:	2300      	movs	r3, #0
 8006a94:	2200      	movs	r2, #0
 8006a96:	210a      	movs	r1, #10
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fc56 	bl	800734a <USBH_FindInterface>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2bff      	cmp	r3, #255	@ 0xff
 8006aa6:	d002      	beq.n	8006aae <USBH_CDC_InterfaceInit+0x11a>
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d901      	bls.n	8006ab2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e0c2      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	211a      	movs	r1, #26
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b25b      	sxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da16      	bge.n	8006af8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	211a      	movs	r1, #26
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	835a      	strh	r2, [r3, #26]
 8006af6:	e015      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	211a      	movs	r1, #26
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	211a      	movs	r1, #26
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da16      	bge.n	8006b6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	211a      	movs	r1, #26
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	211a      	movs	r1, #26
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	835a      	strh	r2, [r3, #26]
 8006b68:	e015      	b.n	8006b96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	211a      	movs	r1, #26
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	4413      	add	r3, r2
 8006b76:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	211a      	movs	r1, #26
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	7b9b      	ldrb	r3, [r3, #14]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 f970 	bl	8008e82 <USBH_AllocPipe>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7bdb      	ldrb	r3, [r3, #15]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 f966 	bl	8008e82 <USBH_AllocPipe>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	7b59      	ldrb	r1, [r3, #13]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	7b98      	ldrb	r0, [r3, #14]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	8b12      	ldrh	r2, [r2, #24]
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4623      	mov	r3, r4
 8006be0:	4602      	mov	r2, r0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f002 f91e 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	7b19      	ldrb	r1, [r3, #12]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	7bd8      	ldrb	r0, [r3, #15]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	8b52      	ldrh	r2, [r2, #26]
 8006c00:	9202      	str	r2, [sp, #8]
 8006c02:	2202      	movs	r2, #2
 8006c04:	9201      	str	r2, [sp, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4623      	mov	r3, r4
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 f909 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f005 fbae 	bl	800c384 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	7b1b      	ldrb	r3, [r3, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f005 fba7 	bl	800c384 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}

08006c40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 f8fe 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 f929 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	7b1b      	ldrb	r3, [r3, #12]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 f8eb 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 f916 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	7b5b      	ldrb	r3, [r3, #13]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 f8d8 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	7b5b      	ldrb	r3, [r3, #13]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f002 f903 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f005 fbe1 	bl	800c4a0 <free>
    phost->pActiveClass->pData = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3340      	adds	r3, #64	@ 0x40
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f8b1 	bl	8006e72 <GetLineCoding>
 8006d10:	4603      	mov	r3, r0
 8006d12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d20:	2102      	movs	r1, #2
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d877      	bhi.n	8006e44 <USBH_CDC_Process+0x114>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <USBH_CDC_Process+0x2c>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d71 	.word	0x08006d71
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	08006da7 	.word	0x08006da7
 8006d68:	08006e1b 	.word	0x08006e1b
 8006d6c:	08006e29 	.word	0x08006e29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
      break;
 8006d74:	e06d      	b.n	8006e52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f897 	bl	8006eb0 <SetLineCoding>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d94:	e058      	b.n	8006e48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d055      	beq.n	8006e48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006da4:	e050      	b.n	8006e48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3340      	adds	r3, #64	@ 0x40
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f860 	bl	8006e72 <GetLineCoding>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d126      	bne.n	8006e0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d13b      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d133      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d12b      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d124      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f982 	bl	800710c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e08:	e020      	b.n	8006e4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d01d      	beq.n	8006e4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2204      	movs	r2, #4
 8006e14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e18:	e018      	b.n	8006e4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f867 	bl	8006eee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8f6 	bl	8007012 <CDC_ProcessReception>
      break;
 8006e26:	e014      	b.n	8006e52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f984 	bl	8008138 <USBH_ClrFeature>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e42:	e005      	b.n	8006e50 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e50:	bf00      	nop

  }

  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	22a1      	movs	r2, #161	@ 0xa1
 8006e80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2221      	movs	r2, #33	@ 0x21
 8006e86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2207      	movs	r2, #7
 8006e98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2207      	movs	r2, #7
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc7e 	bl	80087a2 <USBH_CtlReq>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2221      	movs	r2, #33	@ 0x21
 8006ebe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2207      	movs	r2, #7
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fc5f 	bl	80087a2 <USBH_CtlReq>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af02      	add	r7, sp, #8
 8006ef4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d002      	beq.n	8006f14 <CDC_ProcessTransmission+0x26>
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d023      	beq.n	8006f5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f12:	e07a      	b.n	800700a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	8b12      	ldrh	r2, [r2, #24]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d90b      	bls.n	8006f38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	69d9      	ldr	r1, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8b1a      	ldrh	r2, [r3, #24]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	7b5b      	ldrb	r3, [r3, #13]
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	9000      	str	r0, [sp, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ff34 	bl	8008d9e <USBH_BulkSendData>
 8006f36:	e00b      	b.n	8006f50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7b5b      	ldrb	r3, [r3, #13]
 8006f46:	2001      	movs	r0, #1
 8006f48:	9000      	str	r0, [sp, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 ff27 	bl	8008d9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f58:	e057      	b.n	800700a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	7b5b      	ldrb	r3, [r3, #13]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f005 f9e5 	bl	800c330 <USBH_LL_GetURBState>
 8006f66:	4603      	mov	r3, r0
 8006f68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d136      	bne.n	8006fde <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	8b12      	ldrh	r2, [r2, #24]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d90e      	bls.n	8006f9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	8b12      	ldrh	r2, [r2, #24]
 8006f84:	1a9a      	subs	r2, r3, r2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	8b12      	ldrh	r2, [r2, #24]
 8006f92:	441a      	add	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	61da      	str	r2, [r3, #28]
 8006f98:	e002      	b.n	8006fa0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006fb0:	e006      	b.n	8006fc0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f892 	bl	80070e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f002 f954 	bl	8009284 <osMessageQueuePut>
      break;
 8006fdc:	e014      	b.n	8007008 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d111      	bne.n	8007008 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	f002 f93e 	bl	8009284 <osMessageQueuePut>
      break;
 8007008:	bf00      	nop
  }
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007024:	2300      	movs	r3, #0
 8007026:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800702e:	2b03      	cmp	r3, #3
 8007030:	d002      	beq.n	8007038 <CDC_ProcessReception+0x26>
 8007032:	2b04      	cmp	r3, #4
 8007034:	d00e      	beq.n	8007054 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007036:	e051      	b.n	80070dc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a19      	ldr	r1, [r3, #32]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	8b5a      	ldrh	r2, [r3, #26]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	7b1b      	ldrb	r3, [r3, #12]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fecf 	bl	8008de8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2204      	movs	r2, #4
 800704e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007052:	e043      	b.n	80070dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	7b1b      	ldrb	r3, [r3, #12]
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f005 f968 	bl	800c330 <USBH_LL_GetURBState>
 8007060:	4603      	mov	r3, r0
 8007062:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d137      	bne.n	80070da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	7b1b      	ldrb	r3, [r3, #12]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f005 f8cb 	bl	800c20c <USBH_LL_GetLastXferSize>
 8007076:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d016      	beq.n	80070b0 <CDC_ProcessReception+0x9e>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	8b5b      	ldrh	r3, [r3, #26]
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4293      	cmp	r3, r2
 800708c:	d110      	bne.n	80070b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2203      	movs	r2, #3
 80070aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80070ae:	e006      	b.n	80070be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f81d 	bl	80070f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2204      	movs	r2, #4
 80070c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070d2:	2300      	movs	r3, #0
 80070d4:	2200      	movs	r2, #0
 80070d6:	f002 f8d5 	bl	8009284 <osMessageQueuePut>
      break;
 80070da:	bf00      	nop
  }
}
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	e044      	b.n	80071c2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	79fa      	ldrb	r2, [r7, #7]
 800713c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f841 	bl	80071d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007184:	2200      	movs	r2, #0
 8007186:	2104      	movs	r1, #4
 8007188:	2010      	movs	r0, #16
 800718a:	f002 f808 	bl	800919e <osMessageQueueNew>
 800718e:	4602      	mov	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <USBH_Init+0xac>)
 8007198:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <USBH_Init+0xb0>)
 800719a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <USBH_Init+0xac>)
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <USBH_Init+0xac>)
 80071a4:	2218      	movs	r2, #24
 80071a6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <USBH_Init+0xac>)
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	4809      	ldr	r0, [pc, #36]	@ (80071d4 <USBH_Init+0xb4>)
 80071ae:	f001 ff49 	bl	8009044 <osThreadNew>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f004 ff72 	bl	800c0a4 <USBH_LL_Init>

  return USBH_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200001c0 	.word	0x200001c0
 80071d0:	0800d528 	.word	0x0800d528
 80071d4:	08007e89 	.word	0x08007e89

080071d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e009      	b.n	80071fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	33e0      	adds	r3, #224	@ 0xe0
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	2200      	movs	r2, #0
 80071f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d9f2      	bls.n	80071ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e009      	b.n	800721e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007224:	d3f1      	bcc.n	800720a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2240      	movs	r2, #64	@ 0x40
 800724a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	331c      	adds	r3, #28
 8007276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f005 fb36 	bl	800c8ee <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f005 fb2d 	bl	800c8ee <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800729a:	2212      	movs	r2, #18
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f005 fb25 	bl	800c8ee <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072aa:	223e      	movs	r2, #62	@ 0x3e
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f005 fb1d 	bl	800c8ee <memset>

  return USBH_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d016      	beq.n	8007300 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10e      	bne.n	80072fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	33de      	adds	r3, #222	@ 0xde
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
 80072f8:	e004      	b.n	8007304 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072fa:	2302      	movs	r3, #2
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	e001      	b.n	8007304 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007300:	2302      	movs	r3, #2
 8007302:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	429a      	cmp	r2, r3
 800732c:	d204      	bcs.n	8007338 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007336:	e001      	b.n	800733c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007338:	2302      	movs	r3, #2
 800733a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	461a      	mov	r2, r3
 8007358:	4603      	mov	r3, r0
 800735a:	70fb      	strb	r3, [r7, #3]
 800735c:	460b      	mov	r3, r1
 800735e:	70bb      	strb	r3, [r7, #2]
 8007360:	4613      	mov	r3, r2
 8007362:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007372:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007374:	e025      	b.n	80073c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	221a      	movs	r2, #26
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	3308      	adds	r3, #8
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	3302      	adds	r3, #2
 8007386:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	795b      	ldrb	r3, [r3, #5]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	429a      	cmp	r2, r3
 8007390:	d002      	beq.n	8007398 <USBH_FindInterface+0x4e>
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	2bff      	cmp	r3, #255	@ 0xff
 8007396:	d111      	bne.n	80073bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800739c:	78ba      	ldrb	r2, [r7, #2]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d002      	beq.n	80073a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073a2:	78bb      	ldrb	r3, [r7, #2]
 80073a4:	2bff      	cmp	r3, #255	@ 0xff
 80073a6:	d109      	bne.n	80073bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ac:	787a      	ldrb	r2, [r7, #1]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d002      	beq.n	80073b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073b2:	787b      	ldrb	r3, [r7, #1]
 80073b4:	2bff      	cmp	r3, #255	@ 0xff
 80073b6:	d101      	bne.n	80073bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	e006      	b.n	80073ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	3301      	adds	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d9d6      	bls.n	8007376 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073c8:	23ff      	movs	r3, #255	@ 0xff
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f004 fe9c 	bl	800c11c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073e4:	2101      	movs	r1, #1
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f004 ffb5 	bl	800c356 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af04      	add	r7, sp, #16
 80073fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007400:	2302      	movs	r3, #2
 8007402:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d102      	bne.n	800741a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2203      	movs	r2, #3
 8007418:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b0b      	cmp	r3, #11
 8007422:	f200 8244 	bhi.w	80078ae <USBH_Process+0x4b6>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <USBH_Process+0x34>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800745d 	.word	0x0800745d
 8007430:	080074ab 	.word	0x080074ab
 8007434:	0800752f 	.word	0x0800752f
 8007438:	0800782d 	.word	0x0800782d
 800743c:	080078af 	.word	0x080078af
 8007440:	080075eb 	.word	0x080075eb
 8007444:	080077b7 	.word	0x080077b7
 8007448:	0800763d 	.word	0x0800763d
 800744c:	08007679 	.word	0x08007679
 8007450:	080076b1 	.word	0x080076b1
 8007454:	0800770f 	.word	0x0800770f
 8007458:	08007815 	.word	0x08007815
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8224 	beq.w	80078b2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007470:	20c8      	movs	r0, #200	@ 0xc8
 8007472:	f004 ffba 	bl	800c3ea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f004 fead 	bl	800c1d6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	f001 feee 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80074a8:	e203      	b.n	80078b2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d107      	bne.n	80074c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	e025      	b.n	8007510 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074ce:	d914      	bls.n	80074fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074d6:	3301      	adds	r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d903      	bls.n	80074f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	220d      	movs	r2, #13
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e00e      	b.n	8007510 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e00a      	b.n	8007510 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007500:	f103 020a 	add.w	r2, r3, #10
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800750a:	200a      	movs	r0, #10
 800750c:	f004 ff6d 	bl	800c3ea <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	f001 feac 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 800752c:	e1c8      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800753e:	2104      	movs	r1, #4
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007544:	2064      	movs	r0, #100	@ 0x64
 8007546:	f004 ff50 	bl	800c3ea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f004 fe1c 	bl	800c188 <USBH_LL_GetSpeed>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2205      	movs	r2, #5
 800755e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fc8d 	bl	8008e82 <USBH_AllocPipe>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007570:	2180      	movs	r1, #128	@ 0x80
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fc85 	bl	8008e82 <USBH_AllocPipe>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	7919      	ldrb	r1, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4603      	mov	r3, r0
 800759e:	2280      	movs	r2, #128	@ 0x80
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fc3f 	bl	8008e24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7959      	ldrb	r1, [r3, #5]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4603      	mov	r3, r0
 80075c4:	2200      	movs	r2, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fc2c 	bl	8008e24 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075e0:	2300      	movs	r3, #0
 80075e2:	2200      	movs	r2, #0
 80075e4:	f001 fe4e 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 80075e8:	e16a      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f96e 	bl	80078cc <USBH_HandleEnum>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 815c 	bne.w	80078b6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800760c:	2b01      	cmp	r3, #1
 800760e:	d103      	bne.n	8007618 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2208      	movs	r2, #8
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e002      	b.n	800761e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2207      	movs	r2, #7
 800761c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2205      	movs	r2, #5
 8007622:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	f001 fe25 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800763a:	e13c      	b.n	80078b6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8139 	beq.w	80078ba <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800764e:	2101      	movs	r1, #1
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2208      	movs	r2, #8
 8007658:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2205      	movs	r2, #5
 800765e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	f001 fe07 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007676:	e120      	b.n	80078ba <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fd12 	bl	80080aa <USBH_SetCfg>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2209      	movs	r2, #9
 8007690:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076a6:	2300      	movs	r3, #0
 80076a8:	2200      	movs	r2, #0
 80076aa:	f001 fdeb 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 80076ae:	e107      	b.n	80078c0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d015      	beq.n	80076ea <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076be:	2101      	movs	r1, #1
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fd15 	bl	80080f0 <USBH_SetFeature>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220a      	movs	r2, #10
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	e00a      	b.n	80076f0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d106      	bne.n	80076f0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220a      	movs	r2, #10
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e002      	b.n	80076f0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	220a      	movs	r2, #10
 80076ee:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	f001 fdbc 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 800770c:	e0d8      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007714:	2b00      	cmp	r3, #0
 8007716:	d03f      	beq.n	8007798 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	e016      	b.n	8007754 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007726:	7bfa      	ldrb	r2, [r7, #15]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	32de      	adds	r2, #222	@ 0xde
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	791a      	ldrb	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007738:	429a      	cmp	r2, r3
 800773a:	d108      	bne.n	800774e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32de      	adds	r2, #222	@ 0xde
 8007742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800774c:	e005      	b.n	800775a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	3301      	adds	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0e5      	beq.n	8007726 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2206      	movs	r2, #6
 800777a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007782:	2103      	movs	r1, #3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	e006      	b.n	8007798 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e002      	b.n	8007798 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	220d      	movs	r2, #13
 8007796:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2205      	movs	r2, #5
 800779c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077ac:	2300      	movs	r3, #0
 80077ae:	2200      	movs	r2, #0
 80077b0:	f001 fd68 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 80077b4:	e084      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d017      	beq.n	80077f0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	220b      	movs	r2, #11
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e00a      	b.n	80077f6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d106      	bne.n	80077f6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	220d      	movs	r2, #13
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	220d      	movs	r2, #13
 80077f4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2205      	movs	r2, #5
 80077fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800780a:	2300      	movs	r3, #0
 800780c:	2200      	movs	r2, #0
 800780e:	f001 fd39 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 8007812:	e055      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
      }
      break;
 800782a:	e048      	b.n	80078be <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff fccf 	bl	80071d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007868:	2105      	movs	r1, #5
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fda7 	bl	80073d6 <USBH_Start>
 8007888:	e002      	b.n	8007890 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f004 fc46 	bl	800c11c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	f001 fcec 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      break;
 80078ac:	e008      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80078ae:	bf00      	nop
 80078b0:	e006      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078b2:	bf00      	nop
 80078b4:	e004      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078b6:	bf00      	nop
 80078b8:	e002      	b.n	80078c0 <USBH_Process+0x4c8>
    break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078be:	bf00      	nop
  }
  return USBH_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078d8:	2301      	movs	r3, #1
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b07      	cmp	r3, #7
 80078e2:	f200 8204 	bhi.w	8007cee <USBH_HandleEnum+0x422>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <USBH_HandleEnum+0x20>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	080079c7 	.word	0x080079c7
 80078f4:	08007a31 	.word	0x08007a31
 80078f8:	08007abb 	.word	0x08007abb
 80078fc:	08007b25 	.word	0x08007b25
 8007900:	08007b95 	.word	0x08007b95
 8007904:	08007c31 	.word	0x08007c31
 8007908:	08007caf 	.word	0x08007caf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800790c:	2108      	movs	r1, #8
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fae8 	bl	8007ee4 <USBH_Get_DevDesc>
 8007914:	4603      	mov	r3, r0
 8007916:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d12e      	bne.n	800797c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7919      	ldrb	r1, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007942:	9202      	str	r2, [sp, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	4603      	mov	r3, r0
 800794c:	2280      	movs	r2, #128	@ 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fa68 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7959      	ldrb	r1, [r3, #5]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4603      	mov	r3, r0
 8007972:	2200      	movs	r2, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fa55 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800797a:	e1ba      	b.n	8007cf2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b03      	cmp	r3, #3
 8007980:	f040 81b7 	bne.w	8007cf2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800798a:	3301      	adds	r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800799a:	2b03      	cmp	r3, #3
 800799c:	d903      	bls.n	80079a6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220d      	movs	r2, #13
 80079a2:	701a      	strb	r2, [r3, #0]
      break;
 80079a4:	e1a5      	b.n	8007cf2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fa89 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	791b      	ldrb	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 fa83 	bl	8008ec4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
      break;
 80079c4:	e195      	b.n	8007cf2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079c6:	2112      	movs	r1, #18
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa8b 	bl	8007ee4 <USBH_Get_DevDesc>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079de:	e18a      	b.n	8007cf6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	f040 8187 	bne.w	8007cf6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d903      	bls.n	8007a0a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	220d      	movs	r2, #13
 8007a06:	701a      	strb	r2, [r3, #0]
      break;
 8007a08:	e175      	b.n	8007cf6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	795b      	ldrb	r3, [r3, #5]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fa57 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fa51 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e162      	b.n	8007cf6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a30:	2101      	movs	r1, #1
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb15 	bl	8008062 <USBH_SetAddress>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d130      	bne.n	8007aa4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a42:	2002      	movs	r0, #2
 8007a44:	f004 fcd1 	bl	800c3ea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2203      	movs	r2, #3
 8007a54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7919      	ldrb	r1, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a6a:	9202      	str	r2, [sp, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4603      	mov	r3, r0
 8007a74:	2280      	movs	r2, #128	@ 0x80
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9d4 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7959      	ldrb	r1, [r3, #5]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a90:	9202      	str	r2, [sp, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f9c1 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007aa2:	e12a      	b.n	8007cfa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	f040 8127 	bne.w	8007cfa <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	220d      	movs	r2, #13
 8007ab0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	705a      	strb	r2, [r3, #1]
      break;
 8007ab8:	e11f      	b.n	8007cfa <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007aba:	2109      	movs	r1, #9
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa3d 	bl	8007f3c <USBH_Get_CfgDesc>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ad2:	e114      	b.n	8007cfe <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	f040 8111 	bne.w	8007cfe <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d903      	bls.n	8007afe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	220d      	movs	r2, #13
 8007afa:	701a      	strb	r2, [r3, #0]
      break;
 8007afc:	e0ff      	b.n	8007cfe <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f9dd 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f9d7 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e0ec      	b.n	8007cfe <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa05 	bl	8007f3c <USBH_Get_CfgDesc>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2205      	movs	r2, #5
 8007b40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b42:	e0de      	b.n	8007d02 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	f040 80db 	bne.w	8007d02 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d903      	bls.n	8007b6e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	220d      	movs	r2, #13
 8007b6a:	701a      	strb	r2, [r3, #0]
      break;
 8007b6c:	e0c9      	b.n	8007d02 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	795b      	ldrb	r3, [r3, #5]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9a5 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f99f 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
      break;
 8007b92:	e0b6      	b.n	8007d02 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d036      	beq.n	8007c0c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007baa:	23ff      	movs	r3, #255	@ 0xff
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f9ef 	bl	8007f90 <USBH_Get_StringDesc>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d111      	bne.n	8007be0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2206      	movs	r2, #6
 8007bc0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f001 fb53 	bl	8009284 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bde:	e092      	b.n	8007d06 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 808f 	bne.w	8007d06 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2206      	movs	r2, #6
 8007bec:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2205      	movs	r2, #5
 8007bf2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c02:	2300      	movs	r3, #0
 8007c04:	2200      	movs	r2, #0
 8007c06:	f001 fb3d 	bl	8009284 <osMessageQueuePut>
      break;
 8007c0a:	e07c      	b.n	8007d06 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2206      	movs	r2, #6
 8007c10:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2205      	movs	r2, #5
 8007c16:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f001 fb2b 	bl	8009284 <osMessageQueuePut>
      break;
 8007c2e:	e06a      	b.n	8007d06 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d027      	beq.n	8007c8a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c46:	23ff      	movs	r3, #255	@ 0xff
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9a1 	bl	8007f90 <USBH_Get_StringDesc>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2207      	movs	r2, #7
 8007c5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c5e:	e054      	b.n	8007d0a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d151      	bne.n	8007d0a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2207      	movs	r2, #7
 8007c6a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2205      	movs	r2, #5
 8007c70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c80:	2300      	movs	r3, #0
 8007c82:	2200      	movs	r2, #0
 8007c84:	f001 fafe 	bl	8009284 <osMessageQueuePut>
      break;
 8007c88:	e03f      	b.n	8007d0a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2207      	movs	r2, #7
 8007c8e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2205      	movs	r2, #5
 8007c94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f001 faec 	bl	8009284 <osMessageQueuePut>
      break;
 8007cac:	e02d      	b.n	8007d0a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d017      	beq.n	8007ce8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cc4:	23ff      	movs	r3, #255	@ 0xff
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f962 	bl	8007f90 <USBH_Get_StringDesc>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cda:	e018      	b.n	8007d0e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d115      	bne.n	8007d0e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e012      	b.n	8007d0e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
      break;
 8007cec:	e00f      	b.n	8007d0e <USBH_HandleEnum+0x442>

    default:
      break;
 8007cee:	bf00      	nop
 8007cf0:	e00e      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e00c      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e00a      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e008      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e006      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d02:	bf00      	nop
 8007d04:	e004      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d06:	bf00      	nop
 8007d08:	e002      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d0e:	bf00      	nop
  }
  return Status;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f804 	bl	8007d5e <USBH_HandleSof>
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b0b      	cmp	r3, #11
 8007d6e:	d10a      	bne.n	8007d86 <USBH_HandleSof+0x28>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	4798      	blx	r3
  }
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007db2:	2300      	movs	r3, #0
 8007db4:	2200      	movs	r2, #0
 8007db6:	f001 fa65 	bl	8009284 <osMessageQueuePut>
#endif
#endif

  return;
 8007dba:	bf00      	nop
}
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dd2:	bf00      	nop
}
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	f001 fa35 	bl	8009284 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f004 f984 	bl	800c152 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f837 	bl	8008ec4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f831 	bl	8008ec4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e76:	2300      	movs	r3, #0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f001 fa03 	bl	8009284 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f001 fa4f 	bl	8009344 <osMessageQueueGet>
 8007ea6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f0      	bne.n	8007e90 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff faa2 	bl	80073f8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007eb4:	e7ec      	b.n	8007e90 <USBH_Process_OS+0x8>

08007eb6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f001 f9d5 	bl	8009284 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ef0:	887b      	ldrh	r3, [r7, #2]
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef6:	d901      	bls.n	8007efc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e01b      	b.n	8007f34 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f02:	887b      	ldrh	r3, [r7, #2]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f872 	bl	8007ff8 <USBH_GetDescriptor>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f24:	887a      	ldrh	r2, [r7, #2]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f929 	bl	8008180 <USBH_ParseDevDesc>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	331c      	adds	r3, #28
 8007f4c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f54:	d901      	bls.n	8007f5a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e016      	b.n	8007f88 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f846 	bl	8007ff8 <USBH_GetDescriptor>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d107      	bne.n	8007f86 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9af 	bl	80082e0 <USBH_ParseCfgDesc>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	72fb      	strb	r3, [r7, #11]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007faa:	d802      	bhi.n	8007fb2 <USBH_Get_StringDesc+0x22>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e01c      	b.n	8007ff0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007fbe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fc6:	893b      	ldrh	r3, [r7, #8]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	2100      	movs	r1, #0
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f812 	bl	8007ff8 <USBH_GetDescriptor>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fb8d 	bl	8008708 <USBH_ParseStringDesc>
  }

  return status;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	72fb      	strb	r3, [r7, #11]
 8008006:	4613      	mov	r3, r2
 8008008:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	789b      	ldrb	r3, [r3, #2]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d11c      	bne.n	800804c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008018:	b2da      	uxtb	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2206      	movs	r2, #6
 8008022:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	893a      	ldrh	r2, [r7, #8]
 8008028:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008034:	d104      	bne.n	8008040 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f240 4209 	movw	r2, #1033	@ 0x409
 800803c:	829a      	strh	r2, [r3, #20]
 800803e:	e002      	b.n	8008046 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8b3a      	ldrh	r2, [r7, #24]
 800804a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800804c:	8b3b      	ldrh	r3, [r7, #24]
 800804e:	461a      	mov	r2, r3
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fba5 	bl	80087a2 <USBH_CtlReq>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	789b      	ldrb	r3, [r3, #2]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10f      	bne.n	8008096 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2205      	movs	r2, #5
 8008080:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb81 	bl	80087a2 <USBH_CtlReq>
 80080a0:	4603      	mov	r3, r0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	789b      	ldrb	r3, [r3, #2]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10e      	bne.n	80080dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2209      	movs	r2, #9
 80080c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb5e 	bl	80087a2 <USBH_CtlReq>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	789b      	ldrb	r3, [r3, #2]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d10f      	bne.n	8008124 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb3a 	bl	80087a2 <USBH_CtlReq>
 800812e:	4603      	mov	r3, r0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d10f      	bne.n	800816c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb16 	bl	80087a2 <USBH_CtlReq>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008194:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80081a0:	2302      	movs	r3, #2
 80081a2:	e094      	b.n	80082ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	785a      	ldrb	r2, [r3, #1]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3302      	adds	r3, #2
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3303      	adds	r3, #3
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	791a      	ldrb	r2, [r3, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	795a      	ldrb	r2, [r3, #5]
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	799a      	ldrb	r2, [r3, #6]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	79da      	ldrb	r2, [r3, #7]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11b      	bne.n	800823a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	79db      	ldrb	r3, [r3, #7]
 8008206:	2b20      	cmp	r3, #32
 8008208:	dc0f      	bgt.n	800822a <USBH_ParseDevDesc+0xaa>
 800820a:	2b08      	cmp	r3, #8
 800820c:	db0f      	blt.n	800822e <USBH_ParseDevDesc+0xae>
 800820e:	3b08      	subs	r3, #8
 8008210:	4a32      	ldr	r2, [pc, #200]	@ (80082dc <USBH_ParseDevDesc+0x15c>)
 8008212:	fa22 f303 	lsr.w	r3, r2, r3
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <USBH_ParseDevDesc+0xb6>
 8008228:	e001      	b.n	800822e <USBH_ParseDevDesc+0xae>
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d003      	beq.n	8008236 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2208      	movs	r2, #8
 8008232:	71da      	strb	r2, [r3, #7]
        break;
 8008234:	e000      	b.n	8008238 <USBH_ParseDevDesc+0xb8>
        break;
 8008236:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008238:	e00e      	b.n	8008258 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008240:	2b02      	cmp	r3, #2
 8008242:	d107      	bne.n	8008254 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	79db      	ldrb	r3, [r3, #7]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d005      	beq.n	8008258 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2208      	movs	r2, #8
 8008250:	71da      	strb	r2, [r3, #7]
 8008252:	e001      	b.n	8008258 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008254:	2303      	movs	r3, #3
 8008256:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	2b08      	cmp	r3, #8
 800825c:	d936      	bls.n	80082cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3308      	adds	r3, #8
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3309      	adds	r3, #9
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	330a      	adds	r3, #10
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	330b      	adds	r3, #11
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	b29b      	uxth	r3, r3
 800828a:	4313      	orrs	r3, r2
 800828c:	b29a      	uxth	r2, r3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	330c      	adds	r3, #12
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	330d      	adds	r3, #13
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	7b9a      	ldrb	r2, [r3, #14]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	7bda      	ldrb	r2, [r3, #15]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7c1a      	ldrb	r2, [r3, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	7c5a      	ldrb	r2, [r3, #17]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	01000101 	.word	0x01000101

080082e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08c      	sub	sp, #48	@ 0x30
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800830e:	2302      	movs	r3, #2
 8008310:	e0da      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b09      	cmp	r3, #9
 800831c:	d002      	beq.n	8008324 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	2209      	movs	r2, #9
 8008322:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	785a      	ldrb	r2, [r3, #1]
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	3302      	adds	r3, #2
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	3303      	adds	r3, #3
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	b29b      	uxth	r3, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834e:	bf28      	it	cs
 8008350:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008354:	b29a      	uxth	r2, r3
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	791a      	ldrb	r2, [r3, #4]
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	795a      	ldrb	r2, [r3, #5]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	799a      	ldrb	r2, [r3, #6]
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	79da      	ldrb	r2, [r3, #7]
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	7a1a      	ldrb	r2, [r3, #8]
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b09      	cmp	r3, #9
 8008386:	f240 809d 	bls.w	80084c4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800838a:	2309      	movs	r3, #9
 800838c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008392:	e081      	b.n	8008498 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008394:	f107 0316 	add.w	r3, r7, #22
 8008398:	4619      	mov	r1, r3
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	f000 f9e7 	bl	800876e <USBH_GetNextDesc>
 80083a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d176      	bne.n	8008498 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	d002      	beq.n	80083b8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	2209      	movs	r2, #9
 80083b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80083b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083bc:	221a      	movs	r2, #26
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	3308      	adds	r3, #8
 80083c4:	6a3a      	ldr	r2, [r7, #32]
 80083c6:	4413      	add	r3, r2
 80083c8:	3302      	adds	r3, #2
 80083ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ce:	69f8      	ldr	r0, [r7, #28]
 80083d0:	f000 f87e 	bl	80084d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083de:	e043      	b.n	8008468 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083e0:	f107 0316 	add.w	r3, r7, #22
 80083e4:	4619      	mov	r1, r3
 80083e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e8:	f000 f9c1 	bl	800876e <USBH_GetNextDesc>
 80083ec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d138      	bne.n	8008468 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	795b      	ldrb	r3, [r3, #5]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d113      	bne.n	8008426 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008402:	2b02      	cmp	r3, #2
 8008404:	d003      	beq.n	800840e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	799b      	ldrb	r3, [r3, #6]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d10b      	bne.n	8008426 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	79db      	ldrb	r3, [r3, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <USBH_ParseCfgDesc+0x14e>
 8008416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d007      	beq.n	800842e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	2209      	movs	r2, #9
 8008422:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008424:	e003      	b.n	800842e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	2207      	movs	r2, #7
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e000      	b.n	8008430 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800842e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008434:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008438:	3201      	adds	r2, #1
 800843a:	00d2      	lsls	r2, r2, #3
 800843c:	211a      	movs	r1, #26
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	3308      	adds	r3, #8
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4413      	add	r3, r2
 800844a:	3304      	adds	r3, #4
 800844c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800844e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f870 	bl	8008538 <USBH_ParseEPDesc>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800845e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008462:	3301      	adds	r3, #1
 8008464:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	791b      	ldrb	r3, [r3, #4]
 800846c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008470:	429a      	cmp	r2, r3
 8008472:	d204      	bcs.n	800847e <USBH_ParseCfgDesc+0x19e>
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	885a      	ldrh	r2, [r3, #2]
 8008478:	8afb      	ldrh	r3, [r7, #22]
 800847a:	429a      	cmp	r2, r3
 800847c:	d8b0      	bhi.n	80083e0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008486:	429a      	cmp	r2, r3
 8008488:	d201      	bcs.n	800848e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	e01c      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800848e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008492:	3301      	adds	r3, #1
 8008494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800849c:	2b01      	cmp	r3, #1
 800849e:	d805      	bhi.n	80084ac <USBH_ParseCfgDesc+0x1cc>
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	885a      	ldrh	r2, [r3, #2]
 80084a4:	8afb      	ldrh	r3, [r7, #22]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	f63f af74 	bhi.w	8008394 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	791b      	ldrb	r3, [r3, #4]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	bf28      	it	cs
 80084b4:	2302      	movcs	r3, #2
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80084bc:	429a      	cmp	r2, r3
 80084be:	d201      	bcs.n	80084c4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e001      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80084c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3730      	adds	r7, #48	@ 0x30
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	785a      	ldrb	r2, [r3, #1]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	789a      	ldrb	r2, [r3, #2]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	78da      	ldrb	r2, [r3, #3]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b02      	cmp	r3, #2
 8008502:	bf28      	it	cs
 8008504:	2302      	movcs	r3, #2
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	795a      	ldrb	r2, [r3, #5]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	799a      	ldrb	r2, [r3, #6]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	79da      	ldrb	r2, [r3, #7]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	7a1a      	ldrb	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	721a      	strb	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	785a      	ldrb	r2, [r3, #1]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	789a      	ldrb	r2, [r3, #2]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	78da      	ldrb	r2, [r3, #3]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3305      	adds	r3, #5
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b29a      	uxth	r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	799a      	ldrb	r2, [r3, #6]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859a:	d804      	bhi.n	80085a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a4:	d901      	bls.n	80085aa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d136      	bne.n	8008622 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	78db      	ldrb	r3, [r3, #3]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d108      	bne.n	80085d2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	889b      	ldrh	r3, [r3, #4]
 80085c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c8:	f240 8097 	bls.w	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085cc:	2303      	movs	r3, #3
 80085ce:	75fb      	strb	r3, [r7, #23]
 80085d0:	e093      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	2b40      	cmp	r3, #64	@ 0x40
 80085e4:	f240 8089 	bls.w	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e8:	2303      	movs	r3, #3
 80085ea:	75fb      	strb	r3, [r7, #23]
 80085ec:	e085      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	78db      	ldrb	r3, [r3, #3]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d005      	beq.n	8008606 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008602:	2b03      	cmp	r3, #3
 8008604:	d10a      	bne.n	800861c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	799b      	ldrb	r3, [r3, #6]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USBH_ParseEPDesc+0xde>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	2b10      	cmp	r3, #16
 8008614:	d970      	bls.n	80086f8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800861a:	e06d      	b.n	80086f8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	e06b      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008628:	2b01      	cmp	r3, #1
 800862a:	d13c      	bne.n	80086a6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	78db      	ldrb	r3, [r3, #3]
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d005      	beq.n	8008644 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	78db      	ldrb	r3, [r3, #3]
 800863c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	889b      	ldrh	r3, [r3, #4]
 8008648:	2b40      	cmp	r3, #64	@ 0x40
 800864a:	d956      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800864c:	2303      	movs	r3, #3
 800864e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008650:	e053      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	78db      	ldrb	r3, [r3, #3]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10e      	bne.n	800867c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	799b      	ldrb	r3, [r3, #6]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800866a:	2b10      	cmp	r3, #16
 800866c:	d803      	bhi.n	8008676 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	d941      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	e03e      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	78db      	ldrb	r3, [r3, #3]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b03      	cmp	r3, #3
 8008686:	d10b      	bne.n	80086a0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	799b      	ldrb	r3, [r3, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <USBH_ParseEPDesc+0x162>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008698:	d32f      	bcc.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800869a:	2303      	movs	r3, #3
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e02c      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086a0:	2303      	movs	r3, #3
 80086a2:	75fb      	strb	r3, [r7, #23]
 80086a4:	e029      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d120      	bne.n	80086f2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	78db      	ldrb	r3, [r3, #3]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	889b      	ldrh	r3, [r3, #4]
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d01a      	beq.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086c4:	2303      	movs	r3, #3
 80086c6:	75fb      	strb	r3, [r7, #23]
 80086c8:	e017      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	78db      	ldrb	r3, [r3, #3]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d10a      	bne.n	80086ec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	799b      	ldrb	r3, [r3, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <USBH_ParseEPDesc+0x1ae>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	889b      	ldrh	r3, [r3, #4]
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d909      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
 80086ea:	e006      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086ec:	2303      	movs	r3, #3
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	e003      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80086f2:	2303      	movs	r3, #3
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e000      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086f8:	bf00      	nop
  }

  return status;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d120      	bne.n	8008762 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	1e9a      	subs	r2, r3, #2
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	4293      	cmp	r3, r2
 800872a:	bf28      	it	cs
 800872c:	4613      	movcs	r3, r2
 800872e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3302      	adds	r3, #2
 8008734:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008736:	2300      	movs	r3, #0
 8008738:	82fb      	strh	r3, [r7, #22]
 800873a:	e00b      	b.n	8008754 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800873c:	8afb      	ldrh	r3, [r7, #22]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3301      	adds	r3, #1
 800874c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800874e:	8afb      	ldrh	r3, [r7, #22]
 8008750:	3302      	adds	r3, #2
 8008752:	82fb      	strh	r3, [r7, #22]
 8008754:	8afa      	ldrh	r2, [r7, #22]
 8008756:	8abb      	ldrh	r3, [r7, #20]
 8008758:	429a      	cmp	r2, r3
 800875a:	d3ef      	bcc.n	800873c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
  }
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	4413      	add	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008794:	68fb      	ldr	r3, [r7, #12]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	789b      	ldrb	r3, [r3, #2]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d002      	beq.n	80087c2 <USBH_CtlReq+0x20>
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d01d      	beq.n	80087fc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80087c0:	e043      	b.n	800884a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	88fa      	ldrh	r2, [r7, #6]
 80087cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2202      	movs	r2, #2
 80087d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2203      	movs	r2, #3
 80087e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	f000 fd45 	bl	8009284 <osMessageQueuePut>
      break;
 80087fa:	e026      	b.n	800884a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f829 	bl	8008854 <USBH_HandleControl>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <USBH_CtlReq+0x70>
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d106      	bne.n	8008820 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	761a      	strb	r2, [r3, #24]
 800881e:	e005      	b.n	800882c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d102      	bne.n	800882c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2203      	movs	r2, #3
 8008830:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	f000 fd1e 	bl	8009284 <osMessageQueuePut>
      break;
 8008848:	bf00      	nop
  }
  return status;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af02      	add	r7, sp, #8
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7e1b      	ldrb	r3, [r3, #24]
 8008868:	3b01      	subs	r3, #1
 800886a:	2b0a      	cmp	r3, #10
 800886c:	f200 8229 	bhi.w	8008cc2 <USBH_HandleControl+0x46e>
 8008870:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <USBH_HandleControl+0x24>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	080088a5 	.word	0x080088a5
 800887c:	080088bf 	.word	0x080088bf
 8008880:	08008961 	.word	0x08008961
 8008884:	08008987 	.word	0x08008987
 8008888:	08008a13 	.word	0x08008a13
 800888c:	08008a3d 	.word	0x08008a3d
 8008890:	08008aff 	.word	0x08008aff
 8008894:	08008b21 	.word	0x08008b21
 8008898:	08008bb3 	.word	0x08008bb3
 800889c:	08008bd9 	.word	0x08008bd9
 80088a0:	08008c6b 	.word	0x08008c6b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f103 0110 	add.w	r1, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	795b      	ldrb	r3, [r3, #5]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa17 	bl	8008ce4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	761a      	strb	r2, [r3, #24]
      break;
 80088bc:	e20c      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f003 fd33 	bl	800c330 <USBH_LL_GetURBState>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d12c      	bne.n	800892e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7c1b      	ldrb	r3, [r3, #16]
 80088d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8adb      	ldrh	r3, [r3, #22]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088e6:	7b7b      	ldrb	r3, [r7, #13]
 80088e8:	2b80      	cmp	r3, #128	@ 0x80
 80088ea:	d103      	bne.n	80088f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2203      	movs	r2, #3
 80088f0:	761a      	strb	r2, [r3, #24]
 80088f2:	e00d      	b.n	8008910 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2205      	movs	r2, #5
 80088f8:	761a      	strb	r2, [r3, #24]
 80088fa:	e009      	b.n	8008910 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80088fc:	7b7b      	ldrb	r3, [r7, #13]
 80088fe:	2b80      	cmp	r3, #128	@ 0x80
 8008900:	d103      	bne.n	800890a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2209      	movs	r2, #9
 8008906:	761a      	strb	r2, [r3, #24]
 8008908:	e002      	b.n	8008910 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2207      	movs	r2, #7
 800890e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	f000 fcac 	bl	8009284 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800892c:	e1cb      	b.n	8008cc6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b04      	cmp	r3, #4
 8008932:	d003      	beq.n	800893c <USBH_HandleControl+0xe8>
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b02      	cmp	r3, #2
 8008938:	f040 81c5 	bne.w	8008cc6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220b      	movs	r2, #11
 8008940:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2203      	movs	r2, #3
 8008946:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008956:	2300      	movs	r3, #0
 8008958:	2200      	movs	r2, #0
 800895a:	f000 fc93 	bl	8009284 <osMessageQueuePut>
      break;
 800895e:	e1b2      	b.n	8008cc6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6899      	ldr	r1, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	899a      	ldrh	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9f2 	bl	8008d62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2204      	movs	r2, #4
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e1a8      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	791b      	ldrb	r3, [r3, #4]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f003 fccf 	bl	800c330 <USBH_LL_GetURBState>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d110      	bne.n	80089be <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2209      	movs	r2, #9
 80089a0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2203      	movs	r2, #3
 80089a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089b6:	2300      	movs	r3, #0
 80089b8:	2200      	movs	r2, #0
 80089ba:	f000 fc63 	bl	8009284 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d110      	bne.n	80089e6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089c4:	2303      	movs	r3, #3
 80089c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2203      	movs	r2, #3
 80089cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	f000 fc50 	bl	8009284 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e4:	e171      	b.n	8008cca <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	f040 816e 	bne.w	8008cca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	220b      	movs	r2, #11
 80089f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2203      	movs	r2, #3
 80089f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f000 fc3a 	bl	8009284 <osMessageQueuePut>
      break;
 8008a10:	e15b      	b.n	8008cca <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6899      	ldr	r1, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	899a      	ldrh	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	795b      	ldrb	r3, [r3, #5]
 8008a1e:	2001      	movs	r0, #1
 8008a20:	9000      	str	r0, [sp, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f978 	bl	8008d18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2206      	movs	r2, #6
 8008a38:	761a      	strb	r2, [r3, #24]
      break;
 8008a3a:	e14d      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	795b      	ldrb	r3, [r3, #5]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f003 fc74 	bl	800c330 <USBH_LL_GetURBState>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d111      	bne.n	8008a76 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2207      	movs	r2, #7
 8008a56:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f000 fc08 	bl	8009284 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a74:	e12b      	b.n	8008cce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d113      	bne.n	8008aa4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	220c      	movs	r2, #12
 8008a80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a82:	2303      	movs	r3, #3
 8008a84:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f000 fbf1 	bl	8009284 <osMessageQueuePut>
      break;
 8008aa2:	e114      	b.n	8008cce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d111      	bne.n	8008ace <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2205      	movs	r2, #5
 8008aae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f000 fbdc 	bl	8009284 <osMessageQueuePut>
      break;
 8008acc:	e0ff      	b.n	8008cce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	f040 80fc 	bne.w	8008cce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	220b      	movs	r2, #11
 8008ada:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008adc:	2302      	movs	r3, #2
 8008ade:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	f000 fbc4 	bl	8009284 <osMessageQueuePut>
      break;
 8008afc:	e0e7      	b.n	8008cce <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f92b 	bl	8008d62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	761a      	strb	r2, [r3, #24]

      break;
 8008b1e:	e0db      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	791b      	ldrb	r3, [r3, #4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 fc02 	bl	800c330 <USBH_LL_GetURBState>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d113      	bne.n	8008b5e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	220d      	movs	r2, #13
 8008b3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	f000 fb94 	bl	8009284 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b5c:	e0b9      	b.n	8008cd2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d111      	bne.n	8008b88 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	220b      	movs	r2, #11
 8008b68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2200      	movs	r2, #0
 8008b82:	f000 fb7f 	bl	8009284 <osMessageQueuePut>
      break;
 8008b86:	e0a4      	b.n	8008cd2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	f040 80a1 	bne.w	8008cd2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008b90:	2303      	movs	r3, #3
 8008b92:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2203      	movs	r2, #3
 8008b98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 fb6a 	bl	8009284 <osMessageQueuePut>
      break;
 8008bb0:	e08f      	b.n	8008cd2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	795b      	ldrb	r3, [r3, #5]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	9200      	str	r2, [sp, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f8aa 	bl	8008d18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	761a      	strb	r2, [r3, #24]
      break;
 8008bd6:	e07f      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	795b      	ldrb	r3, [r3, #5]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f003 fba6 	bl	800c330 <USBH_LL_GetURBState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d113      	bne.n	8008c16 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	220d      	movs	r2, #13
 8008bf6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f000 fb38 	bl	8009284 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c14:	e05f      	b.n	8008cd6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d111      	bne.n	8008c40 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2209      	movs	r2, #9
 8008c20:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2203      	movs	r2, #3
 8008c26:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f000 fb23 	bl	8009284 <osMessageQueuePut>
      break;
 8008c3e:	e04a      	b.n	8008cd6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d147      	bne.n	8008cd6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	220b      	movs	r2, #11
 8008c4a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	f000 fb0e 	bl	8009284 <osMessageQueuePut>
      break;
 8008c68:	e035      	b.n	8008cd6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7e5b      	ldrb	r3, [r3, #25]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	765a      	strb	r2, [r3, #25]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7e5b      	ldrb	r3, [r3, #25]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d806      	bhi.n	8008c8c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c8a:	e025      	b.n	8008cd8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c92:	2106      	movs	r1, #6
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	795b      	ldrb	r3, [r3, #5]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f90d 	bl	8008ec4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f907 	bl	8008ec4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc0:	e00a      	b.n	8008cd8 <USBH_HandleControl+0x484>

    default:
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e008      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e006      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e004      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e002      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e000      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cd6:	bf00      	nop
  }

  return status;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af04      	add	r7, sp, #16
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cf2:	79f9      	ldrb	r1, [r7, #7]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f003 fae0 	bl	800c2ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	460b      	mov	r3, r1
 8008d28:	80fb      	strh	r3, [r7, #6]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d3c:	7979      	ldrb	r1, [r7, #5]
 8008d3e:	7e3b      	ldrb	r3, [r7, #24]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f003 fabb 	bl	800c2ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af04      	add	r7, sp, #16
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	461a      	mov	r2, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	80fb      	strh	r3, [r7, #6]
 8008d74:	4613      	mov	r3, r2
 8008d76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d78:	7979      	ldrb	r1, [r7, #5]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	2301      	movs	r3, #1
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f003 fa9d 	bl	800c2ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d94:	2300      	movs	r3, #0

}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b088      	sub	sp, #32
 8008da2:	af04      	add	r7, sp, #16
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4611      	mov	r1, r2
 8008daa:	461a      	mov	r2, r3
 8008dac:	460b      	mov	r3, r1
 8008dae:	80fb      	strh	r3, [r7, #6]
 8008db0:	4613      	mov	r3, r2
 8008db2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dc2:	7979      	ldrb	r1, [r7, #5]
 8008dc4:	7e3b      	ldrb	r3, [r7, #24]
 8008dc6:	9303      	str	r3, [sp, #12]
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f003 fa78 	bl	800c2ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af04      	add	r7, sp, #16
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	460b      	mov	r3, r1
 8008df8:	80fb      	strh	r3, [r7, #6]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dfe:	7979      	ldrb	r1, [r7, #5]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	2302      	movs	r3, #2
 8008e12:	2201      	movs	r2, #1
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f003 fa5a 	bl	800c2ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	70fb      	strb	r3, [r7, #3]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70bb      	strb	r3, [r7, #2]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e3e:	7878      	ldrb	r0, [r7, #1]
 8008e40:	78ba      	ldrb	r2, [r7, #2]
 8008e42:	78f9      	ldrb	r1, [r7, #3]
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	7d3b      	ldrb	r3, [r7, #20]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	7c3b      	ldrb	r3, [r7, #16]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4603      	mov	r3, r0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f003 f9ed 	bl	800c232 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f003 fa0c 	bl	800c290 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f836 	bl	8008f00 <USBH_GetFreePipe>
 8008e94:	4603      	mov	r3, r0
 8008e96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00a      	beq.n	8008eb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	89fb      	ldrh	r3, [r7, #14]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	33e0      	adds	r3, #224	@ 0xe0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	d80d      	bhi.n	8008ef2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	33e0      	adds	r3, #224	@ 0xe0
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	33e0      	adds	r3, #224	@ 0xe0
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e00f      	b.n	8008f32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	33e0      	adds	r3, #224	@ 0xe0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	e007      	b.n	8008f3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b0f      	cmp	r3, #15
 8008f36:	d9ec      	bls.n	8008f12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <__NVIC_SetPriority>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db0a      	blt.n	8008f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	490c      	ldr	r1, [pc, #48]	@ (8008f94 <__NVIC_SetPriority+0x4c>)
 8008f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f66:	0112      	lsls	r2, r2, #4
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f70:	e00a      	b.n	8008f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4908      	ldr	r1, [pc, #32]	@ (8008f98 <__NVIC_SetPriority+0x50>)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	3b04      	subs	r3, #4
 8008f80:	0112      	lsls	r2, r2, #4
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	440b      	add	r3, r1
 8008f86:	761a      	strb	r2, [r3, #24]
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	e000e100 	.word	0xe000e100
 8008f98:	e000ed00 	.word	0xe000ed00

08008f9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f06f 0004 	mvn.w	r0, #4
 8008fa6:	f7ff ffcf 	bl	8008f48 <__NVIC_SetPriority>
#endif
}
 8008faa:	bf00      	nop
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb6:	f3ef 8305 	mrs	r3, IPSR
 8008fba:	603b      	str	r3, [r7, #0]
  return(result);
 8008fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fc2:	f06f 0305 	mvn.w	r3, #5
 8008fc6:	607b      	str	r3, [r7, #4]
 8008fc8:	e00c      	b.n	8008fe4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <osKernelInitialize+0x44>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fd2:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <osKernelInitialize+0x44>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	e002      	b.n	8008fe4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fe4:	687b      	ldr	r3, [r7, #4]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200001e4 	.word	0x200001e4

08008ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ffe:	f3ef 8305 	mrs	r3, IPSR
 8009002:	603b      	str	r3, [r7, #0]
  return(result);
 8009004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <osKernelStart+0x1a>
    stat = osErrorISR;
 800900a:	f06f 0305 	mvn.w	r3, #5
 800900e:	607b      	str	r3, [r7, #4]
 8009010:	e010      	b.n	8009034 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009012:	4b0b      	ldr	r3, [pc, #44]	@ (8009040 <osKernelStart+0x48>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d109      	bne.n	800902e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800901a:	f7ff ffbf 	bl	8008f9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800901e:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <osKernelStart+0x48>)
 8009020:	2202      	movs	r2, #2
 8009022:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009024:	f001 fa68 	bl	800a4f8 <vTaskStartScheduler>
      stat = osOK;
 8009028:	2300      	movs	r3, #0
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e002      	b.n	8009034 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009034:	687b      	ldr	r3, [r7, #4]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	200001e4 	.word	0x200001e4

08009044 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	@ 0x38
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009054:	f3ef 8305 	mrs	r3, IPSR
 8009058:	617b      	str	r3, [r7, #20]
  return(result);
 800905a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800905c:	2b00      	cmp	r3, #0
 800905e:	d17e      	bne.n	800915e <osThreadNew+0x11a>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d07b      	beq.n	800915e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009066:	2380      	movs	r3, #128	@ 0x80
 8009068:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800906a:	2318      	movs	r3, #24
 800906c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009076:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d045      	beq.n	800910a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <osThreadNew+0x48>
        name = attr->name;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d008      	beq.n	80090b2 <osThreadNew+0x6e>
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b38      	cmp	r3, #56	@ 0x38
 80090a4:	d805      	bhi.n	80090b2 <osThreadNew+0x6e>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <osThreadNew+0x72>
        return (NULL);
 80090b2:	2300      	movs	r3, #0
 80090b4:	e054      	b.n	8009160 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	089b      	lsrs	r3, r3, #2
 80090c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00e      	beq.n	80090ec <osThreadNew+0xa8>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80090d4:	d90a      	bls.n	80090ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d006      	beq.n	80090ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <osThreadNew+0xa8>
        mem = 1;
 80090e6:	2301      	movs	r3, #1
 80090e8:	61bb      	str	r3, [r7, #24]
 80090ea:	e010      	b.n	800910e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10c      	bne.n	800910e <osThreadNew+0xca>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d108      	bne.n	800910e <osThreadNew+0xca>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <osThreadNew+0xca>
          mem = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	61bb      	str	r3, [r7, #24]
 8009108:	e001      	b.n	800910e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d110      	bne.n	8009136 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800911c:	9202      	str	r2, [sp, #8]
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f001 f808 	bl	800a140 <xTaskCreateStatic>
 8009130:	4603      	mov	r3, r0
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	e013      	b.n	800915e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d110      	bne.n	800915e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	b29a      	uxth	r2, r3
 8009140:	f107 0310 	add.w	r3, r7, #16
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f001 f856 	bl	800a200 <xTaskCreate>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <osThreadNew+0x11a>
            hTask = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800915e:	693b      	ldr	r3, [r7, #16]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3728      	adds	r7, #40	@ 0x28
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009170:	f3ef 8305 	mrs	r3, IPSR
 8009174:	60bb      	str	r3, [r7, #8]
  return(result);
 8009176:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <osDelay+0x1c>
    stat = osErrorISR;
 800917c:	f06f 0305 	mvn.w	r3, #5
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e007      	b.n	8009194 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <osDelay+0x2c>
      vTaskDelay(ticks);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 f97c 	bl	800a48c <vTaskDelay>
    }
  }

  return (stat);
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800919e:	b580      	push	{r7, lr}
 80091a0:	b08a      	sub	sp, #40	@ 0x28
 80091a2:	af02      	add	r7, sp, #8
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ae:	f3ef 8305 	mrs	r3, IPSR
 80091b2:	613b      	str	r3, [r7, #16]
  return(result);
 80091b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d15f      	bne.n	800927a <osMessageQueueNew+0xdc>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d05c      	beq.n	800927a <osMessageQueueNew+0xdc>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d059      	beq.n	800927a <osMessageQueueNew+0xdc>
    mem = -1;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d029      	beq.n	8009226 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d012      	beq.n	8009200 <osMessageQueueNew+0x62>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	2b4f      	cmp	r3, #79	@ 0x4f
 80091e0:	d90e      	bls.n	8009200 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695a      	ldr	r2, [r3, #20]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d302      	bcc.n	8009200 <osMessageQueueNew+0x62>
        mem = 1;
 80091fa:	2301      	movs	r3, #1
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	e014      	b.n	800922a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d110      	bne.n	800922a <osMessageQueueNew+0x8c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10c      	bne.n	800922a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009214:	2b00      	cmp	r3, #0
 8009216:	d108      	bne.n	800922a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d104      	bne.n	800922a <osMessageQueueNew+0x8c>
          mem = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	e001      	b.n	800922a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d10b      	bne.n	8009248 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2100      	movs	r1, #0
 800923a:	9100      	str	r1, [sp, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fa30 	bl	80096a4 <xQueueGenericCreateStatic>
 8009244:	61f8      	str	r0, [r7, #28]
 8009246:	e008      	b.n	800925a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800924e:	2200      	movs	r2, #0
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 faa3 	bl	800979e <xQueueGenericCreate>
 8009258:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e001      	b.n	8009272 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009272:	6979      	ldr	r1, [r7, #20]
 8009274:	69f8      	ldr	r0, [r7, #28]
 8009276:	f000 ff05 	bl	800a084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800927a:	69fb      	ldr	r3, [r7, #28]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800929c:	f3ef 8305 	mrs	r3, IPSR
 80092a0:	617b      	str	r3, [r7, #20]
  return(result);
 80092a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d028      	beq.n	80092fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <osMessageQueuePut+0x36>
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <osMessageQueuePut+0x36>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092ba:	f06f 0303 	mvn.w	r3, #3
 80092be:	61fb      	str	r3, [r7, #28]
 80092c0:	e038      	b.n	8009334 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092c6:	f107 0210 	add.w	r2, r7, #16
 80092ca:	2300      	movs	r3, #0
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	69b8      	ldr	r0, [r7, #24]
 80092d0:	f000 fbc6 	bl	8009a60 <xQueueGenericSendFromISR>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d003      	beq.n	80092e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80092da:	f06f 0302 	mvn.w	r3, #2
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	e028      	b.n	8009334 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d025      	beq.n	8009334 <osMessageQueuePut+0xb0>
 80092e8:	4b15      	ldr	r3, [pc, #84]	@ (8009340 <osMessageQueuePut+0xbc>)
 80092ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	e01c      	b.n	8009334 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <osMessageQueuePut+0x82>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009306:	f06f 0303 	mvn.w	r3, #3
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e012      	b.n	8009334 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800930e:	2300      	movs	r3, #0
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	69b8      	ldr	r0, [r7, #24]
 8009316:	f000 faa1 	bl	800985c <xQueueGenericSend>
 800931a:	4603      	mov	r3, r0
 800931c:	2b01      	cmp	r3, #1
 800931e:	d009      	beq.n	8009334 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009326:	f06f 0301 	mvn.w	r3, #1
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e002      	b.n	8009334 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800932e:	f06f 0302 	mvn.w	r3, #2
 8009332:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009334:	69fb      	ldr	r3, [r7, #28]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800935a:	f3ef 8305 	mrs	r3, IPSR
 800935e:	617b      	str	r3, [r7, #20]
  return(result);
 8009360:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009362:	2b00      	cmp	r3, #0
 8009364:	d028      	beq.n	80093b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <osMessageQueueGet+0x34>
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <osMessageQueueGet+0x34>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009378:	f06f 0303 	mvn.w	r3, #3
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	e037      	b.n	80093f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009384:	f107 0310 	add.w	r3, r7, #16
 8009388:	461a      	mov	r2, r3
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	69b8      	ldr	r0, [r7, #24]
 800938e:	f000 fce7 	bl	8009d60 <xQueueReceiveFromISR>
 8009392:	4603      	mov	r3, r0
 8009394:	2b01      	cmp	r3, #1
 8009396:	d003      	beq.n	80093a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009398:	f06f 0302 	mvn.w	r3, #2
 800939c:	61fb      	str	r3, [r7, #28]
 800939e:	e027      	b.n	80093f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d024      	beq.n	80093f0 <osMessageQueueGet+0xac>
 80093a6:	4b15      	ldr	r3, [pc, #84]	@ (80093fc <osMessageQueueGet+0xb8>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e01b      	b.n	80093f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <osMessageQueueGet+0x80>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d103      	bne.n	80093cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80093c4:	f06f 0303 	mvn.w	r3, #3
 80093c8:	61fb      	str	r3, [r7, #28]
 80093ca:	e011      	b.n	80093f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	69b8      	ldr	r0, [r7, #24]
 80093d2:	f000 fbe3 	bl	8009b9c <xQueueReceive>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d009      	beq.n	80093f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80093e2:	f06f 0301 	mvn.w	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e002      	b.n	80093f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80093ea:	f06f 0302 	mvn.w	r3, #2
 80093ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80093f0:	69fb      	ldr	r3, [r7, #28]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a07      	ldr	r2, [pc, #28]	@ (800942c <vApplicationGetIdleTaskMemory+0x2c>)
 8009410:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4a06      	ldr	r2, [pc, #24]	@ (8009430 <vApplicationGetIdleTaskMemory+0x30>)
 8009416:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2280      	movs	r2, #128	@ 0x80
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200001e8 	.word	0x200001e8
 8009430:	20000244 	.word	0x20000244

08009434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a07      	ldr	r2, [pc, #28]	@ (8009460 <vApplicationGetTimerTaskMemory+0x2c>)
 8009444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4a06      	ldr	r2, [pc, #24]	@ (8009464 <vApplicationGetTimerTaskMemory+0x30>)
 800944a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009452:	601a      	str	r2, [r3, #0]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000444 	.word	0x20000444
 8009464:	200004a0 	.word	0x200004a0

08009468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f103 0208 	add.w	r2, r3, #8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f103 0208 	add.w	r2, r3, #8
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f103 0208 	add.w	r2, r3, #8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009520:	d103      	bne.n	800952a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e00c      	b.n	8009544 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3308      	adds	r3, #8
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e002      	b.n	8009538 <vListInsert+0x2e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	429a      	cmp	r2, r3
 8009542:	d2f6      	bcs.n	8009532 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	601a      	str	r2, [r3, #0]
}
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6892      	ldr	r2, [r2, #8]
 8009592:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	6852      	ldr	r2, [r2, #4]
 800959c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d103      	bne.n	80095b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	1e5a      	subs	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10b      	bne.n	80095fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095f6:	bf00      	nop
 80095f8:	bf00      	nop
 80095fa:	e7fd      	b.n	80095f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095fc:	f002 f934 	bl	800b868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800962c:	3b01      	subs	r3, #1
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	441a      	add	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	22ff      	movs	r2, #255	@ 0xff
 8009640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	22ff      	movs	r2, #255	@ 0xff
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d114      	bne.n	800967c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01a      	beq.n	8009690 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3310      	adds	r3, #16
 800965e:	4618      	mov	r0, r3
 8009660:	f001 f9d8 	bl	800aa14 <xTaskRemoveFromEventList>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d012      	beq.n	8009690 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800966a:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <xQueueGenericReset+0xd0>)
 800966c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	e009      	b.n	8009690 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3310      	adds	r3, #16
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fef1 	bl	8009468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3324      	adds	r3, #36	@ 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff feec 	bl	8009468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009690:	f002 f91c 	bl	800b8cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009694:	2301      	movs	r3, #1
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	@ 0x38
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10b      	bne.n	80096ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	e7fd      	b.n	80096ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <xQueueGenericCreateStatic+0x56>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <xQueueGenericCreateStatic+0x5a>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <xQueueGenericCreateStatic+0x5c>
 80096fe:	2300      	movs	r3, #0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10b      	bne.n	800971c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	623b      	str	r3, [r7, #32]
}
 8009716:	bf00      	nop
 8009718:	bf00      	nop
 800971a:	e7fd      	b.n	8009718 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <xQueueGenericCreateStatic+0x84>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <xQueueGenericCreateStatic+0x88>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <xQueueGenericCreateStatic+0x8a>
 800972c:	2300      	movs	r3, #0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	61fb      	str	r3, [r7, #28]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800974a:	2350      	movs	r3, #80	@ 0x50
 800974c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b50      	cmp	r3, #80	@ 0x50
 8009752:	d00b      	beq.n	800976c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	61bb      	str	r3, [r7, #24]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800976c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00d      	beq.n	8009794 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009780:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f840 	bl	8009814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009796:	4618      	mov	r0, r3
 8009798:	3730      	adds	r7, #48	@ 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b08a      	sub	sp, #40	@ 0x28
 80097a2:	af02      	add	r7, sp, #8
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	4613      	mov	r3, r2
 80097aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	613b      	str	r3, [r7, #16]
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3350      	adds	r3, #80	@ 0x50
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 f967 	bl	800baac <pvPortMalloc>
 80097de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	3350      	adds	r3, #80	@ 0x50
 80097ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097f8:	79fa      	ldrb	r2, [r7, #7]
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	4613      	mov	r3, r2
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f805 	bl	8009814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800980a:	69bb      	ldr	r3, [r7, #24]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e002      	b.n	8009836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009842:	2101      	movs	r1, #1
 8009844:	69b8      	ldr	r0, [r7, #24]
 8009846:	f7ff fec3 	bl	80095d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08e      	sub	sp, #56	@ 0x38
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800986a:	2300      	movs	r3, #0
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10b      	bne.n	8009890 <xQueueGenericSend+0x34>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800988a:	bf00      	nop
 800988c:	bf00      	nop
 800988e:	e7fd      	b.n	800988c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueGenericSend+0x42>
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueGenericSend+0x46>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueGenericSend+0x48>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <xQueueGenericSend+0x64>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	e7fd      	b.n	80098bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d103      	bne.n	80098ce <xQueueGenericSend+0x72>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d101      	bne.n	80098d2 <xQueueGenericSend+0x76>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <xQueueGenericSend+0x78>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <xQueueGenericSend+0x94>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	623b      	str	r3, [r7, #32]
}
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	e7fd      	b.n	80098ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098f0:	f001 fa50 	bl	800ad94 <xTaskGetSchedulerState>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <xQueueGenericSend+0xa4>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <xQueueGenericSend+0xa8>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <xQueueGenericSend+0xaa>
 8009904:	2300      	movs	r3, #0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <xQueueGenericSend+0xc6>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	61fb      	str	r3, [r7, #28]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009922:	f001 ffa1 	bl	800b868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992e:	429a      	cmp	r2, r3
 8009930:	d302      	bcc.n	8009938 <xQueueGenericSend+0xdc>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d129      	bne.n	800998c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800993e:	f000 fa91 	bl	8009e64 <prvCopyDataToQueue>
 8009942:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d010      	beq.n	800996e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	3324      	adds	r3, #36	@ 0x24
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f85f 	bl	800aa14 <xTaskRemoveFromEventList>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d013      	beq.n	8009984 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800995c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a5c <xQueueGenericSend+0x200>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	e00a      	b.n	8009984 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d007      	beq.n	8009984 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009974:	4b39      	ldr	r3, [pc, #228]	@ (8009a5c <xQueueGenericSend+0x200>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009984:	f001 ffa2 	bl	800b8cc <vPortExitCritical>
				return pdPASS;
 8009988:	2301      	movs	r3, #1
 800998a:	e063      	b.n	8009a54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009992:	f001 ff9b 	bl	800b8cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009996:	2300      	movs	r3, #0
 8009998:	e05c      	b.n	8009a54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800999a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099a0:	f107 0314 	add.w	r3, r7, #20
 80099a4:	4618      	mov	r0, r3
 80099a6:	f001 f899 	bl	800aadc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ae:	f001 ff8d 	bl	800b8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099b2:	f000 fe09 	bl	800a5c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099b6:	f001 ff57 	bl	800b868 <vPortEnterCritical>
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099c0:	b25b      	sxtb	r3, r3
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099c6:	d103      	bne.n	80099d0 <xQueueGenericSend+0x174>
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099d6:	b25b      	sxtb	r3, r3
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099dc:	d103      	bne.n	80099e6 <xQueueGenericSend+0x18a>
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e6:	f001 ff71 	bl	800b8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099ea:	1d3a      	adds	r2, r7, #4
 80099ec:	f107 0314 	add.w	r3, r7, #20
 80099f0:	4611      	mov	r1, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 f888 	bl	800ab08 <xTaskCheckForTimeOut>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d124      	bne.n	8009a48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80099fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a00:	f000 fb28 	bl	800a054 <prvIsQueueFull>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d018      	beq.n	8009a3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	3310      	adds	r3, #16
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 ffac 	bl	800a970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a1a:	f000 fab3 	bl	8009f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a1e:	f000 fde1 	bl	800a5e4 <xTaskResumeAll>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f af7c 	bne.w	8009922 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a5c <xQueueGenericSend+0x200>)
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	e772      	b.n	8009922 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a3e:	f000 faa1 	bl	8009f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a42:	f000 fdcf 	bl	800a5e4 <xTaskResumeAll>
 8009a46:	e76c      	b.n	8009922 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a4a:	f000 fa9b 	bl	8009f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a4e:	f000 fdc9 	bl	800a5e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3738      	adds	r7, #56	@ 0x38
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b090      	sub	sp, #64	@ 0x40
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d103      	bne.n	8009a9e <xQueueGenericSendFromISR+0x3e>
 8009a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <xQueueGenericSendFromISR+0x42>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e000      	b.n	8009aa4 <xQueueGenericSendFromISR+0x44>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	e7fd      	b.n	8009abc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d103      	bne.n	8009ace <xQueueGenericSendFromISR+0x6e>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <xQueueGenericSendFromISR+0x72>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <xQueueGenericSendFromISR+0x74>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	623b      	str	r3, [r7, #32]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af0:	f001 ff9a 	bl	800ba28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009af4:	f3ef 8211 	mrs	r2, BASEPRI
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	61fa      	str	r2, [r7, #28]
 8009b0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <xQueueGenericSendFromISR+0xc2>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d12f      	bne.n	8009b82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b38:	f000 f994 	bl	8009e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b44:	d112      	bne.n	8009b6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d016      	beq.n	8009b7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	3324      	adds	r3, #36	@ 0x24
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 ff5e 	bl	800aa14 <xTaskRemoveFromEventList>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00e      	beq.n	8009b7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e007      	b.n	8009b7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b70:	3301      	adds	r3, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	b25a      	sxtb	r2, r3
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009b80:	e001      	b.n	8009b86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3740      	adds	r7, #64	@ 0x40
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	@ 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10b      	bne.n	8009bce <xQueueReceive+0x32>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	623b      	str	r3, [r7, #32]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d103      	bne.n	8009bdc <xQueueReceive+0x40>
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <xQueueReceive+0x44>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <xQueueReceive+0x46>
 8009be0:	2300      	movs	r3, #0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <xQueueReceive+0x62>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	61fb      	str	r3, [r7, #28]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bfe:	f001 f8c9 	bl	800ad94 <xTaskGetSchedulerState>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <xQueueReceive+0x72>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <xQueueReceive+0x76>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <xQueueReceive+0x78>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <xQueueReceive+0x94>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	61bb      	str	r3, [r7, #24]
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c30:	f001 fe1a 	bl	800b868 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01f      	beq.n	8009c80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c44:	f000 f978 	bl	8009f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00f      	beq.n	8009c78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	3310      	adds	r3, #16
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fed9 	bl	800aa14 <xTaskRemoveFromEventList>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c68:	4b3c      	ldr	r3, [pc, #240]	@ (8009d5c <xQueueReceive+0x1c0>)
 8009c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c78:	f001 fe28 	bl	800b8cc <vPortExitCritical>
				return pdPASS;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e069      	b.n	8009d54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c86:	f001 fe21 	bl	800b8cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e062      	b.n	8009d54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d106      	bne.n	8009ca2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c94:	f107 0310 	add.w	r3, r7, #16
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 ff1f 	bl	800aadc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ca2:	f001 fe13 	bl	800b8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca6:	f000 fc8f 	bl	800a5c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009caa:	f001 fddd 	bl	800b868 <vPortEnterCritical>
 8009cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cba:	d103      	bne.n	8009cc4 <xQueueReceive+0x128>
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cca:	b25b      	sxtb	r3, r3
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cd0:	d103      	bne.n	8009cda <xQueueReceive+0x13e>
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cda:	f001 fdf7 	bl	800b8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cde:	1d3a      	adds	r2, r7, #4
 8009ce0:	f107 0310 	add.w	r3, r7, #16
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ff0e 	bl	800ab08 <xTaskCheckForTimeOut>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d123      	bne.n	8009d3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cf4:	f000 f998 	bl	800a028 <prvIsQueueEmpty>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d017      	beq.n	8009d2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d00:	3324      	adds	r3, #36	@ 0x24
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fe32 	bl	800a970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0e:	f000 f939 	bl	8009f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d12:	f000 fc67 	bl	800a5e4 <xTaskResumeAll>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d189      	bne.n	8009c30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d5c <xQueueReceive+0x1c0>)
 8009d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	e780      	b.n	8009c30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d30:	f000 f928 	bl	8009f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d34:	f000 fc56 	bl	800a5e4 <xTaskResumeAll>
 8009d38:	e77a      	b.n	8009c30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d3c:	f000 f922 	bl	8009f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d40:	f000 fc50 	bl	800a5e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d46:	f000 f96f 	bl	800a028 <prvIsQueueEmpty>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f43f af6f 	beq.w	8009c30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3730      	adds	r7, #48	@ 0x30
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	@ 0x38
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	623b      	str	r3, [r7, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <xQueueReceiveFromISR+0x3c>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <xQueueReceiveFromISR+0x40>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <xQueueReceiveFromISR+0x42>
 8009da0:	2300      	movs	r3, #0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10b      	bne.n	8009dbe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	61fb      	str	r3, [r7, #28]
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	e7fd      	b.n	8009dba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dbe:	f001 fe33 	bl	800ba28 <vPortValidateInterruptPriority>
	__asm volatile
 8009dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	61ba      	str	r2, [r7, #24]
 8009dd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d02f      	beq.n	8009e4a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009df8:	f000 f89e 	bl	8009f38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e0c:	d112      	bne.n	8009e34 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d016      	beq.n	8009e44 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	3310      	adds	r3, #16
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fdfa 	bl	800aa14 <xTaskRemoveFromEventList>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00e      	beq.n	8009e44 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	e007      	b.n	8009e44 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e38:	3301      	adds	r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	b25a      	sxtb	r2, r3
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e48:	e001      	b.n	8009e4e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f383 8811 	msr	BASEPRI, r3
}
 8009e58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3738      	adds	r7, #56	@ 0x38
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10d      	bne.n	8009e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d14d      	bne.n	8009f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 ff9e 	bl	800add0 <xTaskPriorityDisinherit>
 8009e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	609a      	str	r2, [r3, #8]
 8009e9c:	e043      	b.n	8009f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d119      	bne.n	8009ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6858      	ldr	r0, [r3, #4]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eac:	461a      	mov	r2, r3
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	f002 fda9 	bl	800ca06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebc:	441a      	add	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d32b      	bcc.n	8009f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	e026      	b.n	8009f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68d8      	ldr	r0, [r3, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	f002 fd8f 	bl	800ca06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	441a      	add	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d207      	bcs.n	8009f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	441a      	add	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d105      	bne.n	8009f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f2e:	697b      	ldr	r3, [r7, #20]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d018      	beq.n	8009f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f52:	441a      	add	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d303      	bcc.n	8009f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	68d9      	ldr	r1, [r3, #12]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f74:	461a      	mov	r2, r3
 8009f76:	6838      	ldr	r0, [r7, #0]
 8009f78:	f002 fd45 	bl	800ca06 <memcpy>
	}
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f8c:	f001 fc6c 	bl	800b868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f98:	e011      	b.n	8009fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d012      	beq.n	8009fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3324      	adds	r3, #36	@ 0x24
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fd34 	bl	800aa14 <xTaskRemoveFromEventList>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fb2:	f000 fe0d 	bl	800abd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dce9      	bgt.n	8009f9a <prvUnlockQueue+0x16>
 8009fc6:	e000      	b.n	8009fca <prvUnlockQueue+0x46>
					break;
 8009fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	22ff      	movs	r2, #255	@ 0xff
 8009fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009fd2:	f001 fc7b 	bl	800b8cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fd6:	f001 fc47 	bl	800b868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fe2:	e011      	b.n	800a008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d012      	beq.n	800a012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3310      	adds	r3, #16
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fd0f 	bl	800aa14 <xTaskRemoveFromEventList>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ffc:	f000 fde8 	bl	800abd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	3b01      	subs	r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dce9      	bgt.n	8009fe4 <prvUnlockQueue+0x60>
 800a010:	e000      	b.n	800a014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	22ff      	movs	r2, #255	@ 0xff
 800a018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a01c:	f001 fc56 	bl	800b8cc <vPortExitCritical>
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a030:	f001 fc1a 	bl	800b868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d102      	bne.n	800a042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e001      	b.n	800a046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a046:	f001 fc41 	bl	800b8cc <vPortExitCritical>

	return xReturn;
 800a04a:	68fb      	ldr	r3, [r7, #12]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a05c:	f001 fc04 	bl	800b868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a068:	429a      	cmp	r2, r3
 800a06a:	d102      	bne.n	800a072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a06c:	2301      	movs	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	e001      	b.n	800a076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a076:	f001 fc29 	bl	800b8cc <vPortExitCritical>

	return xReturn;
 800a07a:	68fb      	ldr	r3, [r7, #12]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a08e:	2300      	movs	r3, #0
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	e014      	b.n	800a0be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a094:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d4 <vQueueAddToRegistry+0x50>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0a0:	490c      	ldr	r1, [pc, #48]	@ (800a0d4 <vQueueAddToRegistry+0x50>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800a0d4 <vQueueAddToRegistry+0x50>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0b6:	e006      	b.n	800a0c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b07      	cmp	r3, #7
 800a0c2:	d9e7      	bls.n	800a094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200008a0 	.word	0x200008a0

0800a0d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0e8:	f001 fbbe 	bl	800b868 <vPortEnterCritical>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0f2:	b25b      	sxtb	r3, r3
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0f8:	d103      	bne.n	800a102 <vQueueWaitForMessageRestricted+0x2a>
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a10e:	d103      	bne.n	800a118 <vQueueWaitForMessageRestricted+0x40>
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a118:	f001 fbd8 	bl	800b8cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a120:	2b00      	cmp	r3, #0
 800a122:	d106      	bne.n	800a132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	3324      	adds	r3, #36	@ 0x24
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fc45 	bl	800a9bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a132:	6978      	ldr	r0, [r7, #20]
 800a134:	f7ff ff26 	bl	8009f84 <prvUnlockQueue>
	}
 800a138:	bf00      	nop
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08e      	sub	sp, #56	@ 0x38
 800a144:	af04      	add	r7, sp, #16
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10b      	bne.n	800a16c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	623b      	str	r3, [r7, #32]
}
 800a166:	bf00      	nop
 800a168:	bf00      	nop
 800a16a:	e7fd      	b.n	800a168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10b      	bne.n	800a18a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61fb      	str	r3, [r7, #28]
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a18a:	235c      	movs	r3, #92	@ 0x5c
 800a18c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b5c      	cmp	r3, #92	@ 0x5c
 800a192:	d00b      	beq.n	800a1ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61bb      	str	r3, [r7, #24]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01e      	beq.n	800a1f2 <xTaskCreateStatic+0xb2>
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d01b      	beq.n	800a1f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f850 	bl	800a28a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1ec:	f000 f8de 	bl	800a3ac <prvAddNewTaskToReadyList>
 800a1f0:	e001      	b.n	800a1f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1f6:	697b      	ldr	r3, [r7, #20]
	}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3728      	adds	r7, #40	@ 0x28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08c      	sub	sp, #48	@ 0x30
 800a204:	af04      	add	r7, sp, #16
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a210:	88fb      	ldrh	r3, [r7, #6]
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4618      	mov	r0, r3
 800a216:	f001 fc49 	bl	800baac <pvPortMalloc>
 800a21a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00e      	beq.n	800a240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a222:	205c      	movs	r0, #92	@ 0x5c
 800a224:	f001 fc42 	bl	800baac <pvPortMalloc>
 800a228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	631a      	str	r2, [r3, #48]	@ 0x30
 800a236:	e005      	b.n	800a244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	f001 fd05 	bl	800bc48 <vPortFree>
 800a23e:	e001      	b.n	800a244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d017      	beq.n	800a27a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a252:	88fa      	ldrh	r2, [r7, #6]
 800a254:	2300      	movs	r3, #0
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f80e 	bl	800a28a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a26e:	69f8      	ldr	r0, [r7, #28]
 800a270:	f000 f89c 	bl	800a3ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a274:	2301      	movs	r3, #1
 800a276:	61bb      	str	r3, [r7, #24]
 800a278:	e002      	b.n	800a280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a27e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a280:	69bb      	ldr	r3, [r7, #24]
	}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
 800a296:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	21a5      	movs	r1, #165	@ 0xa5
 800a2a4:	f002 fb23 	bl	800c8ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f023 0307 	bic.w	r3, r3, #7
 800a2c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	617b      	str	r3, [r7, #20]
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01f      	beq.n	800a32a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	61fb      	str	r3, [r7, #28]
 800a2ee:	e012      	b.n	800a316 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	7819      	ldrb	r1, [r3, #0]
 800a2f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	3334      	adds	r3, #52	@ 0x34
 800a300:	460a      	mov	r2, r1
 800a302:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4413      	add	r3, r2
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d006      	beq.n	800a31e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	3301      	adds	r3, #1
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	2b0f      	cmp	r3, #15
 800a31a:	d9e9      	bls.n	800a2f0 <prvInitialiseNewTask+0x66>
 800a31c:	e000      	b.n	800a320 <prvInitialiseNewTask+0x96>
			{
				break;
 800a31e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a328:	e003      	b.n	800a332 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	2b37      	cmp	r3, #55	@ 0x37
 800a336:	d901      	bls.n	800a33c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a338:	2337      	movs	r3, #55	@ 0x37
 800a33a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a340:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a346:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	2200      	movs	r2, #0
 800a34c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	3304      	adds	r3, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff f8a8 	bl	80094a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	3318      	adds	r3, #24
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff f8a3 	bl	80094a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a366:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a376:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37a:	2200      	movs	r2, #0
 800a37c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68f9      	ldr	r1, [r7, #12]
 800a38a:	69b8      	ldr	r0, [r7, #24]
 800a38c:	f001 f93e 	bl	800b60c <pxPortInitialiseStack>
 800a390:	4602      	mov	r2, r0
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a39e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3a2:	bf00      	nop
 800a3a4:	3720      	adds	r7, #32
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3b4:	f001 fa58 	bl	800b868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3b8:	4b2d      	ldr	r3, [pc, #180]	@ (800a470 <prvAddNewTaskToReadyList+0xc4>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	4a2c      	ldr	r2, [pc, #176]	@ (800a470 <prvAddNewTaskToReadyList+0xc4>)
 800a3c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3c2:	4b2c      	ldr	r3, [pc, #176]	@ (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3d0:	4b27      	ldr	r3, [pc, #156]	@ (800a470 <prvAddNewTaskToReadyList+0xc4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d110      	bne.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3d8:	f000 fc1e 	bl	800ac18 <prvInitialiseTaskLists>
 800a3dc:	e00d      	b.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3de:	4b26      	ldr	r3, [pc, #152]	@ (800a478 <prvAddNewTaskToReadyList+0xcc>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3e6:	4b23      	ldr	r3, [pc, #140]	@ (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d802      	bhi.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3fa:	4b20      	ldr	r3, [pc, #128]	@ (800a47c <prvAddNewTaskToReadyList+0xd0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	4a1e      	ldr	r2, [pc, #120]	@ (800a47c <prvAddNewTaskToReadyList+0xd0>)
 800a402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a404:	4b1d      	ldr	r3, [pc, #116]	@ (800a47c <prvAddNewTaskToReadyList+0xd0>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a410:	4b1b      	ldr	r3, [pc, #108]	@ (800a480 <prvAddNewTaskToReadyList+0xd4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d903      	bls.n	800a420 <prvAddNewTaskToReadyList+0x74>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	4a18      	ldr	r2, [pc, #96]	@ (800a480 <prvAddNewTaskToReadyList+0xd4>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <prvAddNewTaskToReadyList+0xd8>)
 800a42e:	441a      	add	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7ff f843 	bl	80094c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a43c:	f001 fa46 	bl	800b8cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a440:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <prvAddNewTaskToReadyList+0xcc>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00e      	beq.n	800a466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a448:	4b0a      	ldr	r3, [pc, #40]	@ (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a452:	429a      	cmp	r2, r3
 800a454:	d207      	bcs.n	800a466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a456:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <prvAddNewTaskToReadyList+0xdc>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000db4 	.word	0x20000db4
 800a474:	200008e0 	.word	0x200008e0
 800a478:	20000dc0 	.word	0x20000dc0
 800a47c:	20000dd0 	.word	0x20000dd0
 800a480:	20000dbc 	.word	0x20000dbc
 800a484:	200008e4 	.word	0x200008e4
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d018      	beq.n	800a4d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a49e:	4b14      	ldr	r3, [pc, #80]	@ (800a4f0 <vTaskDelay+0x64>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <vTaskDelay+0x32>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4be:	f000 f883 	bl	800a5c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fcf3 	bl	800aeb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4ca:	f000 f88b 	bl	800a5e4 <xTaskResumeAll>
 800a4ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d107      	bne.n	800a4e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4d6:	4b07      	ldr	r3, [pc, #28]	@ (800a4f4 <vTaskDelay+0x68>)
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000ddc 	.word	0x20000ddc
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	@ 0x28
 800a4fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a502:	2300      	movs	r3, #0
 800a504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a506:	463a      	mov	r2, r7
 800a508:	1d39      	adds	r1, r7, #4
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe ff76 	bl	8009400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	9202      	str	r2, [sp, #8]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	2300      	movs	r3, #0
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	2300      	movs	r3, #0
 800a524:	460a      	mov	r2, r1
 800a526:	4922      	ldr	r1, [pc, #136]	@ (800a5b0 <vTaskStartScheduler+0xb8>)
 800a528:	4822      	ldr	r0, [pc, #136]	@ (800a5b4 <vTaskStartScheduler+0xbc>)
 800a52a:	f7ff fe09 	bl	800a140 <xTaskCreateStatic>
 800a52e:	4603      	mov	r3, r0
 800a530:	4a21      	ldr	r2, [pc, #132]	@ (800a5b8 <vTaskStartScheduler+0xc0>)
 800a532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a534:	4b20      	ldr	r3, [pc, #128]	@ (800a5b8 <vTaskStartScheduler+0xc0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e001      	b.n	800a546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d102      	bne.n	800a552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a54c:	f000 fd04 	bl	800af58 <xTimerCreateTimerTask>
 800a550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d116      	bne.n	800a586 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	613b      	str	r3, [r7, #16]
}
 800a56a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a56c:	4b13      	ldr	r3, [pc, #76]	@ (800a5bc <vTaskStartScheduler+0xc4>)
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a572:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a574:	4b12      	ldr	r3, [pc, #72]	@ (800a5c0 <vTaskStartScheduler+0xc8>)
 800a576:	2201      	movs	r2, #1
 800a578:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a57a:	4b12      	ldr	r3, [pc, #72]	@ (800a5c4 <vTaskStartScheduler+0xcc>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a580:	f001 f8ce 	bl	800b720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a584:	e00f      	b.n	800a5a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a58c:	d10b      	bne.n	800a5a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60fb      	str	r3, [r7, #12]
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	e7fd      	b.n	800a5a2 <vTaskStartScheduler+0xaa>
}
 800a5a6:	bf00      	nop
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800d534 	.word	0x0800d534
 800a5b4:	0800abe9 	.word	0x0800abe9
 800a5b8:	20000dd8 	.word	0x20000dd8
 800a5bc:	20000dd4 	.word	0x20000dd4
 800a5c0:	20000dc0 	.word	0x20000dc0
 800a5c4:	20000db8 	.word	0x20000db8

0800a5c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <vTaskSuspendAll+0x18>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	4a03      	ldr	r2, [pc, #12]	@ (800a5e0 <vTaskSuspendAll+0x18>)
 800a5d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5d6:	bf00      	nop
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	20000ddc 	.word	0x20000ddc

0800a5e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5f2:	4b42      	ldr	r3, [pc, #264]	@ (800a6fc <xTaskResumeAll+0x118>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xTaskResumeAll+0x2e>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	603b      	str	r3, [r7, #0]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a612:	f001 f929 	bl	800b868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a616:	4b39      	ldr	r3, [pc, #228]	@ (800a6fc <xTaskResumeAll+0x118>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4a37      	ldr	r2, [pc, #220]	@ (800a6fc <xTaskResumeAll+0x118>)
 800a61e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a620:	4b36      	ldr	r3, [pc, #216]	@ (800a6fc <xTaskResumeAll+0x118>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d162      	bne.n	800a6ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a628:	4b35      	ldr	r3, [pc, #212]	@ (800a700 <xTaskResumeAll+0x11c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d05e      	beq.n	800a6ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a630:	e02f      	b.n	800a692 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a632:	4b34      	ldr	r3, [pc, #208]	@ (800a704 <xTaskResumeAll+0x120>)
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3318      	adds	r3, #24
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe ff9c 	bl	800957c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3304      	adds	r3, #4
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe ff97 	bl	800957c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a652:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <xTaskResumeAll+0x124>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d903      	bls.n	800a662 <xTaskResumeAll+0x7e>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65e:	4a2a      	ldr	r2, [pc, #168]	@ (800a708 <xTaskResumeAll+0x124>)
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a666:	4613      	mov	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4a27      	ldr	r2, [pc, #156]	@ (800a70c <xTaskResumeAll+0x128>)
 800a670:	441a      	add	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3304      	adds	r3, #4
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f7fe ff22 	bl	80094c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a682:	4b23      	ldr	r3, [pc, #140]	@ (800a710 <xTaskResumeAll+0x12c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a688:	429a      	cmp	r2, r3
 800a68a:	d302      	bcc.n	800a692 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a68c:	4b21      	ldr	r3, [pc, #132]	@ (800a714 <xTaskResumeAll+0x130>)
 800a68e:	2201      	movs	r2, #1
 800a690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a692:	4b1c      	ldr	r3, [pc, #112]	@ (800a704 <xTaskResumeAll+0x120>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1cb      	bne.n	800a632 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6a0:	f000 fb58 	bl	800ad54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6a4:	4b1c      	ldr	r3, [pc, #112]	@ (800a718 <xTaskResumeAll+0x134>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d010      	beq.n	800a6d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6b0:	f000 f846 	bl	800a740 <xTaskIncrementTick>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6ba:	4b16      	ldr	r3, [pc, #88]	@ (800a714 <xTaskResumeAll+0x130>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f1      	bne.n	800a6b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6cc:	4b12      	ldr	r3, [pc, #72]	@ (800a718 <xTaskResumeAll+0x134>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6d2:	4b10      	ldr	r3, [pc, #64]	@ (800a714 <xTaskResumeAll+0x130>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d009      	beq.n	800a6ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6de:	4b0f      	ldr	r3, [pc, #60]	@ (800a71c <xTaskResumeAll+0x138>)
 800a6e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6ee:	f001 f8ed 	bl	800b8cc <vPortExitCritical>

	return xAlreadyYielded;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000ddc 	.word	0x20000ddc
 800a700:	20000db4 	.word	0x20000db4
 800a704:	20000d74 	.word	0x20000d74
 800a708:	20000dbc 	.word	0x20000dbc
 800a70c:	200008e4 	.word	0x200008e4
 800a710:	200008e0 	.word	0x200008e0
 800a714:	20000dc8 	.word	0x20000dc8
 800a718:	20000dc4 	.word	0x20000dc4
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a726:	4b05      	ldr	r3, [pc, #20]	@ (800a73c <xTaskGetTickCount+0x1c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a72c:	687b      	ldr	r3, [r7, #4]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000db8 	.word	0x20000db8

0800a740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a74a:	4b4f      	ldr	r3, [pc, #316]	@ (800a888 <xTaskIncrementTick+0x148>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 8090 	bne.w	800a874 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a754:	4b4d      	ldr	r3, [pc, #308]	@ (800a88c <xTaskIncrementTick+0x14c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a75c:	4a4b      	ldr	r2, [pc, #300]	@ (800a88c <xTaskIncrementTick+0x14c>)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d121      	bne.n	800a7ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a768:	4b49      	ldr	r3, [pc, #292]	@ (800a890 <xTaskIncrementTick+0x150>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	603b      	str	r3, [r7, #0]
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	e7fd      	b.n	800a786 <xTaskIncrementTick+0x46>
 800a78a:	4b41      	ldr	r3, [pc, #260]	@ (800a890 <xTaskIncrementTick+0x150>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	4b40      	ldr	r3, [pc, #256]	@ (800a894 <xTaskIncrementTick+0x154>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a3e      	ldr	r2, [pc, #248]	@ (800a890 <xTaskIncrementTick+0x150>)
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	4a3e      	ldr	r2, [pc, #248]	@ (800a894 <xTaskIncrementTick+0x154>)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	4b3e      	ldr	r3, [pc, #248]	@ (800a898 <xTaskIncrementTick+0x158>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	4a3c      	ldr	r2, [pc, #240]	@ (800a898 <xTaskIncrementTick+0x158>)
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	f000 fad4 	bl	800ad54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7ac:	4b3b      	ldr	r3, [pc, #236]	@ (800a89c <xTaskIncrementTick+0x15c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d349      	bcc.n	800a84a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b6:	4b36      	ldr	r3, [pc, #216]	@ (800a890 <xTaskIncrementTick+0x150>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c0:	4b36      	ldr	r3, [pc, #216]	@ (800a89c <xTaskIncrementTick+0x15c>)
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7c6:	601a      	str	r2, [r3, #0]
					break;
 800a7c8:	e03f      	b.n	800a84a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ca:	4b31      	ldr	r3, [pc, #196]	@ (800a890 <xTaskIncrementTick+0x150>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d203      	bcs.n	800a7ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a89c <xTaskIncrementTick+0x15c>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7e8:	e02f      	b.n	800a84a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fec4 	bl	800957c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	3318      	adds	r3, #24
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe febb 	bl	800957c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80a:	4b25      	ldr	r3, [pc, #148]	@ (800a8a0 <xTaskIncrementTick+0x160>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d903      	bls.n	800a81a <xTaskIncrementTick+0xda>
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a816:	4a22      	ldr	r2, [pc, #136]	@ (800a8a0 <xTaskIncrementTick+0x160>)
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a4 <xTaskIncrementTick+0x164>)
 800a828:	441a      	add	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f7fe fe46 	bl	80094c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8a8 <xTaskIncrementTick+0x168>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a840:	429a      	cmp	r2, r3
 800a842:	d3b8      	bcc.n	800a7b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a848:	e7b5      	b.n	800a7b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a84a:	4b17      	ldr	r3, [pc, #92]	@ (800a8a8 <xTaskIncrementTick+0x168>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a850:	4914      	ldr	r1, [pc, #80]	@ (800a8a4 <xTaskIncrementTick+0x164>)
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	440b      	add	r3, r1
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d901      	bls.n	800a866 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a866:	4b11      	ldr	r3, [pc, #68]	@ (800a8ac <xTaskIncrementTick+0x16c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	617b      	str	r3, [r7, #20]
 800a872:	e004      	b.n	800a87e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a874:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b0 <xTaskIncrementTick+0x170>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3301      	adds	r3, #1
 800a87a:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b0 <xTaskIncrementTick+0x170>)
 800a87c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a87e:	697b      	ldr	r3, [r7, #20]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20000ddc 	.word	0x20000ddc
 800a88c:	20000db8 	.word	0x20000db8
 800a890:	20000d6c 	.word	0x20000d6c
 800a894:	20000d70 	.word	0x20000d70
 800a898:	20000dcc 	.word	0x20000dcc
 800a89c:	20000dd4 	.word	0x20000dd4
 800a8a0:	20000dbc 	.word	0x20000dbc
 800a8a4:	200008e4 	.word	0x200008e4
 800a8a8:	200008e0 	.word	0x200008e0
 800a8ac:	20000dc8 	.word	0x20000dc8
 800a8b0:	20000dc4 	.word	0x20000dc4

0800a8b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8ba:	4b28      	ldr	r3, [pc, #160]	@ (800a95c <vTaskSwitchContext+0xa8>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8c2:	4b27      	ldr	r3, [pc, #156]	@ (800a960 <vTaskSwitchContext+0xac>)
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8c8:	e042      	b.n	800a950 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a8ca:	4b25      	ldr	r3, [pc, #148]	@ (800a960 <vTaskSwitchContext+0xac>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d0:	4b24      	ldr	r3, [pc, #144]	@ (800a964 <vTaskSwitchContext+0xb0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	e011      	b.n	800a8fc <vTaskSwitchContext+0x48>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10b      	bne.n	800a8f6 <vTaskSwitchContext+0x42>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <vTaskSwitchContext+0x3e>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	491a      	ldr	r1, [pc, #104]	@ (800a968 <vTaskSwitchContext+0xb4>)
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0e3      	beq.n	800a8d8 <vTaskSwitchContext+0x24>
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4a13      	ldr	r2, [pc, #76]	@ (800a968 <vTaskSwitchContext+0xb4>)
 800a91c:	4413      	add	r3, r2
 800a91e:	60bb      	str	r3, [r7, #8]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	605a      	str	r2, [r3, #4]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	3308      	adds	r3, #8
 800a932:	429a      	cmp	r2, r3
 800a934:	d104      	bne.n	800a940 <vTaskSwitchContext+0x8c>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	605a      	str	r2, [r3, #4]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	4a09      	ldr	r2, [pc, #36]	@ (800a96c <vTaskSwitchContext+0xb8>)
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	4a06      	ldr	r2, [pc, #24]	@ (800a964 <vTaskSwitchContext+0xb0>)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6013      	str	r3, [r2, #0]
}
 800a950:	bf00      	nop
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20000ddc 	.word	0x20000ddc
 800a960:	20000dc8 	.word	0x20000dc8
 800a964:	20000dbc 	.word	0x20000dbc
 800a968:	200008e4 	.word	0x200008e4
 800a96c:	200008e0 	.word	0x200008e0

0800a970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10b      	bne.n	800a998 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a998:	4b07      	ldr	r3, [pc, #28]	@ (800a9b8 <vTaskPlaceOnEventList+0x48>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3318      	adds	r3, #24
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7fe fdb2 	bl	800950a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	6838      	ldr	r0, [r7, #0]
 800a9aa:	f000 fa81 	bl	800aeb0 <prvAddCurrentTaskToDelayedList>
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200008e0 	.word	0x200008e0

0800a9bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	617b      	str	r3, [r7, #20]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800aa10 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3318      	adds	r3, #24
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7fe fd67 	bl	80094c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a9fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	68b8      	ldr	r0, [r7, #8]
 800aa04:	f000 fa54 	bl	800aeb0 <prvAddCurrentTaskToDelayedList>
	}
 800aa08:	bf00      	nop
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	200008e0 	.word	0x200008e0

0800aa14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10b      	bne.n	800aa42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	60fb      	str	r3, [r7, #12]
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	e7fd      	b.n	800aa3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	3318      	adds	r3, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fd98 	bl	800957c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4c:	4b1d      	ldr	r3, [pc, #116]	@ (800aac4 <xTaskRemoveFromEventList+0xb0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11d      	bne.n	800aa90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe fd8f 	bl	800957c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	4b19      	ldr	r3, [pc, #100]	@ (800aac8 <xTaskRemoveFromEventList+0xb4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d903      	bls.n	800aa72 <xTaskRemoveFromEventList+0x5e>
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6e:	4a16      	ldr	r2, [pc, #88]	@ (800aac8 <xTaskRemoveFromEventList+0xb4>)
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4a13      	ldr	r2, [pc, #76]	@ (800aacc <xTaskRemoveFromEventList+0xb8>)
 800aa80:	441a      	add	r2, r3
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	3304      	adds	r3, #4
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7fe fd1a 	bl	80094c2 <vListInsertEnd>
 800aa8e:	e005      	b.n	800aa9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	3318      	adds	r3, #24
 800aa94:	4619      	mov	r1, r3
 800aa96:	480e      	ldr	r0, [pc, #56]	@ (800aad0 <xTaskRemoveFromEventList+0xbc>)
 800aa98:	f7fe fd13 	bl	80094c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa0:	4b0c      	ldr	r3, [pc, #48]	@ (800aad4 <xTaskRemoveFromEventList+0xc0>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d905      	bls.n	800aab6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aaae:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <xTaskRemoveFromEventList+0xc4>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	e001      	b.n	800aaba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aaba:	697b      	ldr	r3, [r7, #20]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20000ddc 	.word	0x20000ddc
 800aac8:	20000dbc 	.word	0x20000dbc
 800aacc:	200008e4 	.word	0x200008e4
 800aad0:	20000d74 	.word	0x20000d74
 800aad4:	200008e0 	.word	0x200008e0
 800aad8:	20000dc8 	.word	0x20000dc8

0800aadc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aae4:	4b06      	ldr	r3, [pc, #24]	@ (800ab00 <vTaskInternalSetTimeOutState+0x24>)
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaec:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <vTaskInternalSetTimeOutState+0x28>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	605a      	str	r2, [r3, #4]
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	20000dcc 	.word	0x20000dcc
 800ab04:	20000db8 	.word	0x20000db8

0800ab08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10b      	bne.n	800ab30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	613b      	str	r3, [r7, #16]
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	e7fd      	b.n	800ab2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10b      	bne.n	800ab4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	60fb      	str	r3, [r7, #12]
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	e7fd      	b.n	800ab4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab4e:	f000 fe8b 	bl	800b868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab52:	4b1d      	ldr	r3, [pc, #116]	@ (800abc8 <xTaskCheckForTimeOut+0xc0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab6a:	d102      	bne.n	800ab72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	e023      	b.n	800abba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4b15      	ldr	r3, [pc, #84]	@ (800abcc <xTaskCheckForTimeOut+0xc4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d007      	beq.n	800ab8e <xTaskCheckForTimeOut+0x86>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e015      	b.n	800abba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d20b      	bcs.n	800abb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ff99 	bl	800aadc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e004      	b.n	800abba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abba:	f000 fe87 	bl	800b8cc <vPortExitCritical>

	return xReturn;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20000db8 	.word	0x20000db8
 800abcc:	20000dcc 	.word	0x20000dcc

0800abd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abd4:	4b03      	ldr	r3, [pc, #12]	@ (800abe4 <vTaskMissedYield+0x14>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	20000dc8 	.word	0x20000dc8

0800abe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abf0:	f000 f852 	bl	800ac98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abf4:	4b06      	ldr	r3, [pc, #24]	@ (800ac10 <prvIdleTask+0x28>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d9f9      	bls.n	800abf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abfc:	4b05      	ldr	r3, [pc, #20]	@ (800ac14 <prvIdleTask+0x2c>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac0c:	e7f0      	b.n	800abf0 <prvIdleTask+0x8>
 800ac0e:	bf00      	nop
 800ac10:	200008e4 	.word	0x200008e4
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e00c      	b.n	800ac3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4a12      	ldr	r2, [pc, #72]	@ (800ac78 <prvInitialiseTaskLists+0x60>)
 800ac30:	4413      	add	r3, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe fc18 	bl	8009468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b37      	cmp	r3, #55	@ 0x37
 800ac42:	d9ef      	bls.n	800ac24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac44:	480d      	ldr	r0, [pc, #52]	@ (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac46:	f7fe fc0f 	bl	8009468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac4a:	480d      	ldr	r0, [pc, #52]	@ (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac4c:	f7fe fc0c 	bl	8009468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac50:	480c      	ldr	r0, [pc, #48]	@ (800ac84 <prvInitialiseTaskLists+0x6c>)
 800ac52:	f7fe fc09 	bl	8009468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac56:	480c      	ldr	r0, [pc, #48]	@ (800ac88 <prvInitialiseTaskLists+0x70>)
 800ac58:	f7fe fc06 	bl	8009468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac5c:	480b      	ldr	r0, [pc, #44]	@ (800ac8c <prvInitialiseTaskLists+0x74>)
 800ac5e:	f7fe fc03 	bl	8009468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac62:	4b0b      	ldr	r3, [pc, #44]	@ (800ac90 <prvInitialiseTaskLists+0x78>)
 800ac64:	4a05      	ldr	r2, [pc, #20]	@ (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	@ (800ac94 <prvInitialiseTaskLists+0x7c>)
 800ac6a:	4a05      	ldr	r2, [pc, #20]	@ (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac6c:	601a      	str	r2, [r3, #0]
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200008e4 	.word	0x200008e4
 800ac7c:	20000d44 	.word	0x20000d44
 800ac80:	20000d58 	.word	0x20000d58
 800ac84:	20000d74 	.word	0x20000d74
 800ac88:	20000d88 	.word	0x20000d88
 800ac8c:	20000da0 	.word	0x20000da0
 800ac90:	20000d6c 	.word	0x20000d6c
 800ac94:	20000d70 	.word	0x20000d70

0800ac98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac9e:	e019      	b.n	800acd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aca0:	f000 fde2 	bl	800b868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca4:	4b10      	ldr	r3, [pc, #64]	@ (800ace8 <prvCheckTasksWaitingTermination+0x50>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fc63 	bl	800957c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acb6:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3b01      	subs	r3, #1
 800acbc:	4a0b      	ldr	r2, [pc, #44]	@ (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	@ (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	4a0a      	ldr	r2, [pc, #40]	@ (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acca:	f000 fdff 	bl	800b8cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f810 	bl	800acf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acd4:	4b06      	ldr	r3, [pc, #24]	@ (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e1      	bne.n	800aca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000d88 	.word	0x20000d88
 800acec:	20000db4 	.word	0x20000db4
 800acf0:	20000d9c 	.word	0x20000d9c

0800acf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d108      	bne.n	800ad18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 ff9c 	bl	800bc48 <vPortFree>
				vPortFree( pxTCB );
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 ff99 	bl	800bc48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad16:	e019      	b.n	800ad4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d103      	bne.n	800ad2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 ff90 	bl	800bc48 <vPortFree>
	}
 800ad28:	e010      	b.n	800ad4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d00b      	beq.n	800ad4c <prvDeleteTCB+0x58>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <prvDeleteTCB+0x54>
	}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad8c <prvResetNextTaskUnblockTime+0x38>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad64:	4b0a      	ldr	r3, [pc, #40]	@ (800ad90 <prvResetNextTaskUnblockTime+0x3c>)
 800ad66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad6c:	e008      	b.n	800ad80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6e:	4b07      	ldr	r3, [pc, #28]	@ (800ad8c <prvResetNextTaskUnblockTime+0x38>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4a04      	ldr	r2, [pc, #16]	@ (800ad90 <prvResetNextTaskUnblockTime+0x3c>)
 800ad7e:	6013      	str	r3, [r2, #0]
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20000d6c 	.word	0x20000d6c
 800ad90:	20000dd4 	.word	0x20000dd4

0800ad94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad9a:	4b0b      	ldr	r3, [pc, #44]	@ (800adc8 <xTaskGetSchedulerState+0x34>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ada2:	2301      	movs	r3, #1
 800ada4:	607b      	str	r3, [r7, #4]
 800ada6:	e008      	b.n	800adba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada8:	4b08      	ldr	r3, [pc, #32]	@ (800adcc <xTaskGetSchedulerState+0x38>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adb0:	2302      	movs	r3, #2
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	e001      	b.n	800adba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adb6:	2300      	movs	r3, #0
 800adb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adba:	687b      	ldr	r3, [r7, #4]
	}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	20000dc0 	.word	0x20000dc0
 800adcc:	20000ddc 	.word	0x20000ddc

0800add0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800addc:	2300      	movs	r3, #0
 800adde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d058      	beq.n	800ae98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ade6:	4b2f      	ldr	r3, [pc, #188]	@ (800aea4 <xTaskPriorityDisinherit+0xd4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	429a      	cmp	r2, r3
 800adee:	d00b      	beq.n	800ae08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60fb      	str	r3, [r7, #12]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10b      	bne.n	800ae28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	60bb      	str	r3, [r7, #8]
}
 800ae22:	bf00      	nop
 800ae24:	bf00      	nop
 800ae26:	e7fd      	b.n	800ae24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d02c      	beq.n	800ae98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d128      	bne.n	800ae98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fb96 	bl	800957c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae68:	4b0f      	ldr	r3, [pc, #60]	@ (800aea8 <xTaskPriorityDisinherit+0xd8>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d903      	bls.n	800ae78 <xTaskPriorityDisinherit+0xa8>
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	4a0c      	ldr	r2, [pc, #48]	@ (800aea8 <xTaskPriorityDisinherit+0xd8>)
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4a09      	ldr	r2, [pc, #36]	@ (800aeac <xTaskPriorityDisinherit+0xdc>)
 800ae86:	441a      	add	r2, r3
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7fe fb17 	bl	80094c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae94:	2301      	movs	r3, #1
 800ae96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae98:	697b      	ldr	r3, [r7, #20]
	}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	200008e0 	.word	0x200008e0
 800aea8:	20000dbc 	.word	0x20000dbc
 800aeac:	200008e4 	.word	0x200008e4

0800aeb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeba:	4b21      	ldr	r3, [pc, #132]	@ (800af40 <prvAddCurrentTaskToDelayedList+0x90>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aec0:	4b20      	ldr	r3, [pc, #128]	@ (800af44 <prvAddCurrentTaskToDelayedList+0x94>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3304      	adds	r3, #4
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fb58 	bl	800957c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aed2:	d10a      	bne.n	800aeea <prvAddCurrentTaskToDelayedList+0x3a>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d007      	beq.n	800aeea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeda:	4b1a      	ldr	r3, [pc, #104]	@ (800af44 <prvAddCurrentTaskToDelayedList+0x94>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4819      	ldr	r0, [pc, #100]	@ (800af48 <prvAddCurrentTaskToDelayedList+0x98>)
 800aee4:	f7fe faed 	bl	80094c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aee8:	e026      	b.n	800af38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4413      	add	r3, r2
 800aef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aef2:	4b14      	ldr	r3, [pc, #80]	@ (800af44 <prvAddCurrentTaskToDelayedList+0x94>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d209      	bcs.n	800af16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af02:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <prvAddCurrentTaskToDelayedList+0x94>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	4610      	mov	r0, r2
 800af10:	f7fe fafb 	bl	800950a <vListInsert>
}
 800af14:	e010      	b.n	800af38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af16:	4b0e      	ldr	r3, [pc, #56]	@ (800af50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b0a      	ldr	r3, [pc, #40]	@ (800af44 <prvAddCurrentTaskToDelayedList+0x94>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3304      	adds	r3, #4
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f7fe faf1 	bl	800950a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af28:	4b0a      	ldr	r3, [pc, #40]	@ (800af54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d202      	bcs.n	800af38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af32:	4a08      	ldr	r2, [pc, #32]	@ (800af54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000db8 	.word	0x20000db8
 800af44:	200008e0 	.word	0x200008e0
 800af48:	20000da0 	.word	0x20000da0
 800af4c:	20000d70 	.word	0x20000d70
 800af50:	20000d6c 	.word	0x20000d6c
 800af54:	20000dd4 	.word	0x20000dd4

0800af58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08a      	sub	sp, #40	@ 0x28
 800af5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af62:	f000 fb13 	bl	800b58c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af66:	4b1d      	ldr	r3, [pc, #116]	@ (800afdc <xTimerCreateTimerTask+0x84>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d021      	beq.n	800afb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af76:	1d3a      	adds	r2, r7, #4
 800af78:	f107 0108 	add.w	r1, r7, #8
 800af7c:	f107 030c 	add.w	r3, r7, #12
 800af80:	4618      	mov	r0, r3
 800af82:	f7fe fa57 	bl	8009434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	9202      	str	r2, [sp, #8]
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	2302      	movs	r3, #2
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	2300      	movs	r3, #0
 800af96:	460a      	mov	r2, r1
 800af98:	4911      	ldr	r1, [pc, #68]	@ (800afe0 <xTimerCreateTimerTask+0x88>)
 800af9a:	4812      	ldr	r0, [pc, #72]	@ (800afe4 <xTimerCreateTimerTask+0x8c>)
 800af9c:	f7ff f8d0 	bl	800a140 <xTaskCreateStatic>
 800afa0:	4603      	mov	r3, r0
 800afa2:	4a11      	ldr	r2, [pc, #68]	@ (800afe8 <xTimerCreateTimerTask+0x90>)
 800afa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afa6:	4b10      	ldr	r3, [pc, #64]	@ (800afe8 <xTimerCreateTimerTask+0x90>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afae:	2301      	movs	r3, #1
 800afb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10b      	bne.n	800afd0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	613b      	str	r3, [r7, #16]
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800afd0:	697b      	ldr	r3, [r7, #20]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20000e10 	.word	0x20000e10
 800afe0:	0800d53c 	.word	0x0800d53c
 800afe4:	0800b125 	.word	0x0800b125
 800afe8:	20000e14 	.word	0x20000e14

0800afec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	@ 0x28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800affa:	2300      	movs	r3, #0
 800affc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <xTimerGenericCommand+0x30>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	623b      	str	r3, [r7, #32]
}
 800b016:	bf00      	nop
 800b018:	bf00      	nop
 800b01a:	e7fd      	b.n	800b018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b01c:	4b19      	ldr	r3, [pc, #100]	@ (800b084 <xTimerGenericCommand+0x98>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d02a      	beq.n	800b07a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b05      	cmp	r3, #5
 800b034:	dc18      	bgt.n	800b068 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b036:	f7ff fead 	bl	800ad94 <xTaskGetSchedulerState>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d109      	bne.n	800b054 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b040:	4b10      	ldr	r3, [pc, #64]	@ (800b084 <xTimerGenericCommand+0x98>)
 800b042:	6818      	ldr	r0, [r3, #0]
 800b044:	f107 0110 	add.w	r1, r7, #16
 800b048:	2300      	movs	r3, #0
 800b04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b04c:	f7fe fc06 	bl	800985c <xQueueGenericSend>
 800b050:	6278      	str	r0, [r7, #36]	@ 0x24
 800b052:	e012      	b.n	800b07a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b054:	4b0b      	ldr	r3, [pc, #44]	@ (800b084 <xTimerGenericCommand+0x98>)
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	f107 0110 	add.w	r1, r7, #16
 800b05c:	2300      	movs	r3, #0
 800b05e:	2200      	movs	r2, #0
 800b060:	f7fe fbfc 	bl	800985c <xQueueGenericSend>
 800b064:	6278      	str	r0, [r7, #36]	@ 0x24
 800b066:	e008      	b.n	800b07a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b068:	4b06      	ldr	r3, [pc, #24]	@ (800b084 <xTimerGenericCommand+0x98>)
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	f107 0110 	add.w	r1, r7, #16
 800b070:	2300      	movs	r3, #0
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	f7fe fcf4 	bl	8009a60 <xQueueGenericSendFromISR>
 800b078:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3728      	adds	r7, #40	@ 0x28
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000e10 	.word	0x20000e10

0800b088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b092:	4b23      	ldr	r3, [pc, #140]	@ (800b120 <prvProcessExpiredTimer+0x98>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fe fa6b 	bl	800957c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d023      	beq.n	800b0fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	699a      	ldr	r2, [r3, #24]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	18d1      	adds	r1, r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	6978      	ldr	r0, [r7, #20]
 800b0c2:	f000 f8d5 	bl	800b270 <prvInsertTimerInActiveList>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d020      	beq.n	800b10e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6978      	ldr	r0, [r7, #20]
 800b0d8:	f7ff ff88 	bl	800afec <xTimerGenericCommand>
 800b0dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d114      	bne.n	800b10e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60fb      	str	r3, [r7, #12]
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b102:	f023 0301 	bic.w	r3, r3, #1
 800b106:	b2da      	uxtb	r2, r3
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	4798      	blx	r3
}
 800b116:	bf00      	nop
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000e08 	.word	0x20000e08

0800b124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b12c:	f107 0308 	add.w	r3, r7, #8
 800b130:	4618      	mov	r0, r3
 800b132:	f000 f859 	bl	800b1e8 <prvGetNextExpireTime>
 800b136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	4619      	mov	r1, r3
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f805 	bl	800b14c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b142:	f000 f8d7 	bl	800b2f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b146:	bf00      	nop
 800b148:	e7f0      	b.n	800b12c <prvTimerTask+0x8>
	...

0800b14c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b156:	f7ff fa37 	bl	800a5c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f866 	bl	800b230 <prvSampleTimeNow>
 800b164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d130      	bne.n	800b1ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <prvProcessTimerOrBlockTask+0x3c>
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	429a      	cmp	r2, r3
 800b178:	d806      	bhi.n	800b188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b17a:	f7ff fa33 	bl	800a5e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff ff81 	bl	800b088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b186:	e024      	b.n	800b1d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d008      	beq.n	800b1a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b18e:	4b13      	ldr	r3, [pc, #76]	@ (800b1dc <prvProcessTimerOrBlockTask+0x90>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <prvProcessTimerOrBlockTask+0x50>
 800b198:	2301      	movs	r3, #1
 800b19a:	e000      	b.n	800b19e <prvProcessTimerOrBlockTask+0x52>
 800b19c:	2300      	movs	r3, #0
 800b19e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <prvProcessTimerOrBlockTask+0x94>)
 800b1a2:	6818      	ldr	r0, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f7fe ff93 	bl	800a0d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1b2:	f7ff fa17 	bl	800a5e4 <xTaskResumeAll>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1bc:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <prvProcessTimerOrBlockTask+0x98>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
}
 800b1cc:	e001      	b.n	800b1d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b1ce:	f7ff fa09 	bl	800a5e4 <xTaskResumeAll>
}
 800b1d2:	bf00      	nop
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000e0c 	.word	0x20000e0c
 800b1e0:	20000e10 	.word	0x20000e10
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b22c <prvGetNextExpireTime+0x44>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <prvGetNextExpireTime+0x16>
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	e000      	b.n	800b200 <prvGetNextExpireTime+0x18>
 800b1fe:	2200      	movs	r2, #0
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d105      	bne.n	800b218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b20c:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <prvGetNextExpireTime+0x44>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e001      	b.n	800b21c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b21c:	68fb      	ldr	r3, [r7, #12]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	20000e08 	.word	0x20000e08

0800b230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b238:	f7ff fa72 	bl	800a720 <xTaskGetTickCount>
 800b23c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b23e:	4b0b      	ldr	r3, [pc, #44]	@ (800b26c <prvSampleTimeNow+0x3c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d205      	bcs.n	800b254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b248:	f000 f93a 	bl	800b4c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	e002      	b.n	800b25a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b25a:	4a04      	ldr	r2, [pc, #16]	@ (800b26c <prvSampleTimeNow+0x3c>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b260:	68fb      	ldr	r3, [r7, #12]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000e18 	.word	0x20000e18

0800b270 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	429a      	cmp	r2, r3
 800b294:	d812      	bhi.n	800b2bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	1ad2      	subs	r2, r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d302      	bcc.n	800b2aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	e01b      	b.n	800b2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2aa:	4b10      	ldr	r3, [pc, #64]	@ (800b2ec <prvInsertTimerInActiveList+0x7c>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7fe f928 	bl	800950a <vListInsert>
 800b2ba:	e012      	b.n	800b2e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d206      	bcs.n	800b2d2 <prvInsertTimerInActiveList+0x62>
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d302      	bcc.n	800b2d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e007      	b.n	800b2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2d2:	4b07      	ldr	r3, [pc, #28]	@ (800b2f0 <prvInsertTimerInActiveList+0x80>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f7fe f914 	bl	800950a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2e2:	697b      	ldr	r3, [r7, #20]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20000e0c 	.word	0x20000e0c
 800b2f0:	20000e08 	.word	0x20000e08

0800b2f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	@ 0x38
 800b2f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2fa:	e0ce      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da19      	bge.n	800b336 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b302:	1d3b      	adds	r3, r7, #4
 800b304:	3304      	adds	r3, #4
 800b306:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10b      	bne.n	800b326 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	61fb      	str	r3, [r7, #28]
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	e7fd      	b.n	800b322 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b32c:	6850      	ldr	r0, [r2, #4]
 800b32e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b330:	6892      	ldr	r2, [r2, #8]
 800b332:	4611      	mov	r1, r2
 800b334:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f2c0 80ae 	blt.w	800b49a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34c:	3304      	adds	r3, #4
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe f914 	bl	800957c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b354:	463b      	mov	r3, r7
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff ff6a 	bl	800b230 <prvSampleTimeNow>
 800b35c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b09      	cmp	r3, #9
 800b362:	f200 8097 	bhi.w	800b494 <prvProcessReceivedCommands+0x1a0>
 800b366:	a201      	add	r2, pc, #4	@ (adr r2, 800b36c <prvProcessReceivedCommands+0x78>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b395 	.word	0x0800b395
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b395 	.word	0x0800b395
 800b378:	0800b40b 	.word	0x0800b40b
 800b37c:	0800b41f 	.word	0x0800b41f
 800b380:	0800b46b 	.word	0x0800b46b
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b395 	.word	0x0800b395
 800b38c:	0800b40b 	.word	0x0800b40b
 800b390:	0800b41f 	.word	0x0800b41f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	18d1      	adds	r1, r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3b4:	f7ff ff5c 	bl	800b270 <prvInsertTimerInActiveList>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d06c      	beq.n	800b498 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d061      	beq.n	800b498 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	441a      	add	r2, r3
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3e6:	f7ff fe01 	bl	800afec <xTimerGenericCommand>
 800b3ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d152      	bne.n	800b498 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	61bb      	str	r3, [r7, #24]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b410:	f023 0301 	bic.w	r3, r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b418:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b41c:	e03d      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b424:	f043 0301 	orr.w	r3, r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	617b      	str	r3, [r7, #20]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b458:	699a      	ldr	r2, [r3, #24]
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	18d1      	adds	r1, r2, r3
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b464:	f7ff ff04 	bl	800b270 <prvInsertTimerInActiveList>
					break;
 800b468:	e017      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d103      	bne.n	800b480 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b47a:	f000 fbe5 	bl	800bc48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b47e:	e00c      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b486:	f023 0301 	bic.w	r3, r3, #1
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b492:	e002      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b494:	bf00      	nop
 800b496:	e000      	b.n	800b49a <prvProcessReceivedCommands+0x1a6>
					break;
 800b498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b49a:	4b08      	ldr	r3, [pc, #32]	@ (800b4bc <prvProcessReceivedCommands+0x1c8>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	1d39      	adds	r1, r7, #4
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fb7a 	bl	8009b9c <xQueueReceive>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f47f af26 	bne.w	800b2fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	3730      	adds	r7, #48	@ 0x30
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000e10 	.word	0x20000e10

0800b4c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4c6:	e049      	b.n	800b55c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4c8:	4b2e      	ldr	r3, [pc, #184]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe f84b 	bl	800957c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d02f      	beq.n	800b55c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d90e      	bls.n	800b52c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b51a:	4b1a      	ldr	r3, [pc, #104]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3304      	adds	r3, #4
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7fd fff0 	bl	800950a <vListInsert>
 800b52a:	e017      	b.n	800b55c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b52c:	2300      	movs	r3, #0
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	2300      	movs	r3, #0
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	2100      	movs	r1, #0
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff fd58 	bl	800afec <xTimerGenericCommand>
 800b53c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10b      	bne.n	800b55c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	603b      	str	r3, [r7, #0]
}
 800b556:	bf00      	nop
 800b558:	bf00      	nop
 800b55a:	e7fd      	b.n	800b558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b55c:	4b09      	ldr	r3, [pc, #36]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1b0      	bne.n	800b4c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b566:	4b07      	ldr	r3, [pc, #28]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b56c:	4b06      	ldr	r3, [pc, #24]	@ (800b588 <prvSwitchTimerLists+0xc8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a04      	ldr	r2, [pc, #16]	@ (800b584 <prvSwitchTimerLists+0xc4>)
 800b572:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b574:	4a04      	ldr	r2, [pc, #16]	@ (800b588 <prvSwitchTimerLists+0xc8>)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	6013      	str	r3, [r2, #0]
}
 800b57a:	bf00      	nop
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000e08 	.word	0x20000e08
 800b588:	20000e0c 	.word	0x20000e0c

0800b58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b592:	f000 f969 	bl	800b868 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b596:	4b15      	ldr	r3, [pc, #84]	@ (800b5ec <prvCheckForValidListAndQueue+0x60>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d120      	bne.n	800b5e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b59e:	4814      	ldr	r0, [pc, #80]	@ (800b5f0 <prvCheckForValidListAndQueue+0x64>)
 800b5a0:	f7fd ff62 	bl	8009468 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5a4:	4813      	ldr	r0, [pc, #76]	@ (800b5f4 <prvCheckForValidListAndQueue+0x68>)
 800b5a6:	f7fd ff5f 	bl	8009468 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5aa:	4b13      	ldr	r3, [pc, #76]	@ (800b5f8 <prvCheckForValidListAndQueue+0x6c>)
 800b5ac:	4a10      	ldr	r2, [pc, #64]	@ (800b5f0 <prvCheckForValidListAndQueue+0x64>)
 800b5ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5b0:	4b12      	ldr	r3, [pc, #72]	@ (800b5fc <prvCheckForValidListAndQueue+0x70>)
 800b5b2:	4a10      	ldr	r2, [pc, #64]	@ (800b5f4 <prvCheckForValidListAndQueue+0x68>)
 800b5b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	4b11      	ldr	r3, [pc, #68]	@ (800b600 <prvCheckForValidListAndQueue+0x74>)
 800b5bc:	4a11      	ldr	r2, [pc, #68]	@ (800b604 <prvCheckForValidListAndQueue+0x78>)
 800b5be:	2110      	movs	r1, #16
 800b5c0:	200a      	movs	r0, #10
 800b5c2:	f7fe f86f 	bl	80096a4 <xQueueGenericCreateStatic>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	4a08      	ldr	r2, [pc, #32]	@ (800b5ec <prvCheckForValidListAndQueue+0x60>)
 800b5ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b5cc:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <prvCheckForValidListAndQueue+0x60>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b5d4:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <prvCheckForValidListAndQueue+0x60>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	490b      	ldr	r1, [pc, #44]	@ (800b608 <prvCheckForValidListAndQueue+0x7c>)
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fd52 	bl	800a084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5e0:	f000 f974 	bl	800b8cc <vPortExitCritical>
}
 800b5e4:	bf00      	nop
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20000e10 	.word	0x20000e10
 800b5f0:	20000de0 	.word	0x20000de0
 800b5f4:	20000df4 	.word	0x20000df4
 800b5f8:	20000e08 	.word	0x20000e08
 800b5fc:	20000e0c 	.word	0x20000e0c
 800b600:	20000ebc 	.word	0x20000ebc
 800b604:	20000e1c 	.word	0x20000e1c
 800b608:	0800d544 	.word	0x0800d544

0800b60c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3b04      	subs	r3, #4
 800b61c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3b04      	subs	r3, #4
 800b62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f023 0201 	bic.w	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3b04      	subs	r3, #4
 800b63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b63c:	4a0c      	ldr	r2, [pc, #48]	@ (800b670 <pxPortInitialiseStack+0x64>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3b14      	subs	r3, #20
 800b646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3b04      	subs	r3, #4
 800b652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f06f 0202 	mvn.w	r2, #2
 800b65a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3b20      	subs	r3, #32
 800b660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b662:	68fb      	ldr	r3, [r7, #12]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	0800b675 	.word	0x0800b675

0800b674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b67e:	4b13      	ldr	r3, [pc, #76]	@ (800b6cc <prvTaskExitError+0x58>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b686:	d00b      	beq.n	800b6a0 <prvTaskExitError+0x2c>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	60fb      	str	r3, [r7, #12]
}
 800b69a:	bf00      	nop
 800b69c:	bf00      	nop
 800b69e:	e7fd      	b.n	800b69c <prvTaskExitError+0x28>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60bb      	str	r3, [r7, #8]
}
 800b6b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6b4:	bf00      	nop
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0fc      	beq.n	800b6b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	2000002c 	.word	0x2000002c

0800b6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6d0:	4b07      	ldr	r3, [pc, #28]	@ (800b6f0 <pxCurrentTCBConst2>)
 800b6d2:	6819      	ldr	r1, [r3, #0]
 800b6d4:	6808      	ldr	r0, [r1, #0]
 800b6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f380 8809 	msr	PSP, r0
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8811 	msr	BASEPRI, r0
 800b6ea:	4770      	bx	lr
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <pxCurrentTCBConst2>:
 800b6f0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop

0800b6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6f8:	4808      	ldr	r0, [pc, #32]	@ (800b71c <prvPortStartFirstTask+0x24>)
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	6800      	ldr	r0, [r0, #0]
 800b6fe:	f380 8808 	msr	MSP, r0
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8814 	msr	CONTROL, r0
 800b70a:	b662      	cpsie	i
 800b70c:	b661      	cpsie	f
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	df00      	svc	0
 800b718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b71a:	bf00      	nop
 800b71c:	e000ed08 	.word	0xe000ed08

0800b720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b726:	4b47      	ldr	r3, [pc, #284]	@ (800b844 <xPortStartScheduler+0x124>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a47      	ldr	r2, [pc, #284]	@ (800b848 <xPortStartScheduler+0x128>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d10b      	bne.n	800b748 <xPortStartScheduler+0x28>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	e7fd      	b.n	800b744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b748:	4b3e      	ldr	r3, [pc, #248]	@ (800b844 <xPortStartScheduler+0x124>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a3f      	ldr	r2, [pc, #252]	@ (800b84c <xPortStartScheduler+0x12c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d10b      	bne.n	800b76a <xPortStartScheduler+0x4a>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	60fb      	str	r3, [r7, #12]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b76a:	4b39      	ldr	r3, [pc, #228]	@ (800b850 <xPortStartScheduler+0x130>)
 800b76c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	22ff      	movs	r2, #255	@ 0xff
 800b77a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	4b31      	ldr	r3, [pc, #196]	@ (800b854 <xPortStartScheduler+0x134>)
 800b790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b792:	4b31      	ldr	r3, [pc, #196]	@ (800b858 <xPortStartScheduler+0x138>)
 800b794:	2207      	movs	r2, #7
 800b796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b798:	e009      	b.n	800b7ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b79a:	4b2f      	ldr	r3, [pc, #188]	@ (800b858 <xPortStartScheduler+0x138>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b6:	2b80      	cmp	r3, #128	@ 0x80
 800b7b8:	d0ef      	beq.n	800b79a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7ba:	4b27      	ldr	r3, [pc, #156]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1c3 0307 	rsb	r3, r3, #7
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	d00b      	beq.n	800b7de <xPortStartScheduler+0xbe>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60bb      	str	r3, [r7, #8]
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7de:	4b1e      	ldr	r3, [pc, #120]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7f0:	4a19      	ldr	r2, [pc, #100]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7fc:	4b17      	ldr	r3, [pc, #92]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a16      	ldr	r2, [pc, #88]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b808:	4b14      	ldr	r3, [pc, #80]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a13      	ldr	r2, [pc, #76]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b814:	f000 f8da 	bl	800b9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b818:	4b11      	ldr	r3, [pc, #68]	@ (800b860 <xPortStartScheduler+0x140>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b81e:	f000 f8f9 	bl	800ba14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b822:	4b10      	ldr	r3, [pc, #64]	@ (800b864 <xPortStartScheduler+0x144>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a0f      	ldr	r2, [pc, #60]	@ (800b864 <xPortStartScheduler+0x144>)
 800b828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b82e:	f7ff ff63 	bl	800b6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b832:	f7ff f83f 	bl	800a8b4 <vTaskSwitchContext>
	prvTaskExitError();
 800b836:	f7ff ff1d 	bl	800b674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	e000ed00 	.word	0xe000ed00
 800b848:	410fc271 	.word	0x410fc271
 800b84c:	410fc270 	.word	0x410fc270
 800b850:	e000e400 	.word	0xe000e400
 800b854:	20000f0c 	.word	0x20000f0c
 800b858:	20000f10 	.word	0x20000f10
 800b85c:	e000ed20 	.word	0xe000ed20
 800b860:	2000002c 	.word	0x2000002c
 800b864:	e000ef34 	.word	0xe000ef34

0800b868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b882:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	4a0e      	ldr	r2, [pc, #56]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b88a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b88c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d110      	bne.n	800b8b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b894:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <vPortEnterCritical+0x60>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	603b      	str	r3, [r7, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <vPortEnterCritical+0x4a>
	}
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000002c 	.word	0x2000002c
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8d2:	4b12      	ldr	r3, [pc, #72]	@ (800b91c <vPortExitCritical+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <vPortExitCritical+0x26>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	607b      	str	r3, [r7, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	e7fd      	b.n	800b8ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <vPortExitCritical+0x50>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	4a08      	ldr	r2, [pc, #32]	@ (800b91c <vPortExitCritical+0x50>)
 800b8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8fc:	4b07      	ldr	r3, [pc, #28]	@ (800b91c <vPortExitCritical+0x50>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d105      	bne.n	800b910 <vPortExitCritical+0x44>
 800b904:	2300      	movs	r3, #0
 800b906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f383 8811 	msr	BASEPRI, r3
}
 800b90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	2000002c 	.word	0x2000002c

0800b920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b920:	f3ef 8009 	mrs	r0, PSP
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	4b15      	ldr	r3, [pc, #84]	@ (800b980 <pxCurrentTCBConst>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	f01e 0f10 	tst.w	lr, #16
 800b930:	bf08      	it	eq
 800b932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	6010      	str	r0, [r2, #0]
 800b93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b944:	f380 8811 	msr	BASEPRI, r0
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f7fe ffb0 	bl	800a8b4 <vTaskSwitchContext>
 800b954:	f04f 0000 	mov.w	r0, #0
 800b958:	f380 8811 	msr	BASEPRI, r0
 800b95c:	bc09      	pop	{r0, r3}
 800b95e:	6819      	ldr	r1, [r3, #0]
 800b960:	6808      	ldr	r0, [r1, #0]
 800b962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b966:	f01e 0f10 	tst.w	lr, #16
 800b96a:	bf08      	it	eq
 800b96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b970:	f380 8809 	msr	PSP, r0
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w

0800b980 <pxCurrentTCBConst>:
 800b980:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop

0800b988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	607b      	str	r3, [r7, #4]
}
 800b9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9a2:	f7fe fecd 	bl	800a740 <xTaskIncrementTick>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9ac:	4b06      	ldr	r3, [pc, #24]	@ (800b9c8 <xPortSysTickHandler+0x40>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f383 8811 	msr	BASEPRI, r3
}
 800b9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba00 <vPortSetupTimerInterrupt+0x34>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <vPortSetupTimerInterrupt+0x38>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <vPortSetupTimerInterrupt+0x3c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800ba0c <vPortSetupTimerInterrupt+0x40>)
 800b9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e6:	099b      	lsrs	r3, r3, #6
 800b9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ba10 <vPortSetupTimerInterrupt+0x44>)
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ba00 <vPortSetupTimerInterrupt+0x34>)
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	601a      	str	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	e000e010 	.word	0xe000e010
 800ba04:	e000e018 	.word	0xe000e018
 800ba08:	20000000 	.word	0x20000000
 800ba0c:	10624dd3 	.word	0x10624dd3
 800ba10:	e000e014 	.word	0xe000e014

0800ba14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba24 <vPortEnableVFP+0x10>
 800ba18:	6801      	ldr	r1, [r0, #0]
 800ba1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba1e:	6001      	str	r1, [r0, #0]
 800ba20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba22:	bf00      	nop
 800ba24:	e000ed88 	.word	0xe000ed88

0800ba28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba2e:	f3ef 8305 	mrs	r3, IPSR
 800ba32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b0f      	cmp	r3, #15
 800ba38:	d915      	bls.n	800ba66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba3a:	4a18      	ldr	r2, [pc, #96]	@ (800ba9c <vPortValidateInterruptPriority+0x74>)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba44:	4b16      	ldr	r3, [pc, #88]	@ (800baa0 <vPortValidateInterruptPriority+0x78>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	7afa      	ldrb	r2, [r7, #11]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d20b      	bcs.n	800ba66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	607b      	str	r3, [r7, #4]
}
 800ba60:	bf00      	nop
 800ba62:	bf00      	nop
 800ba64:	e7fd      	b.n	800ba62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba66:	4b0f      	ldr	r3, [pc, #60]	@ (800baa4 <vPortValidateInterruptPriority+0x7c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba6e:	4b0e      	ldr	r3, [pc, #56]	@ (800baa8 <vPortValidateInterruptPriority+0x80>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d90b      	bls.n	800ba8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	603b      	str	r3, [r7, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	bf00      	nop
 800ba8c:	e7fd      	b.n	800ba8a <vPortValidateInterruptPriority+0x62>
	}
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	e000e3f0 	.word	0xe000e3f0
 800baa0:	20000f0c 	.word	0x20000f0c
 800baa4:	e000ed0c 	.word	0xe000ed0c
 800baa8:	20000f10 	.word	0x20000f10

0800baac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08a      	sub	sp, #40	@ 0x28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bab8:	f7fe fd86 	bl	800a5c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800babc:	4b5c      	ldr	r3, [pc, #368]	@ (800bc30 <pvPortMalloc+0x184>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bac4:	f000 f924 	bl	800bd10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bac8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc34 <pvPortMalloc+0x188>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4013      	ands	r3, r2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f040 8095 	bne.w	800bc00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d01e      	beq.n	800bb1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800badc:	2208      	movs	r2, #8
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	2b00      	cmp	r3, #0
 800baec:	d015      	beq.n	800bb1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f023 0307 	bic.w	r3, r3, #7
 800baf4:	3308      	adds	r3, #8
 800baf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <pvPortMalloc+0x6e>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	617b      	str	r3, [r7, #20]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d06f      	beq.n	800bc00 <pvPortMalloc+0x154>
 800bb20:	4b45      	ldr	r3, [pc, #276]	@ (800bc38 <pvPortMalloc+0x18c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d86a      	bhi.n	800bc00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb2a:	4b44      	ldr	r3, [pc, #272]	@ (800bc3c <pvPortMalloc+0x190>)
 800bb2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb2e:	4b43      	ldr	r3, [pc, #268]	@ (800bc3c <pvPortMalloc+0x190>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb34:	e004      	b.n	800bb40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d903      	bls.n	800bb52 <pvPortMalloc+0xa6>
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1f1      	bne.n	800bb36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb52:	4b37      	ldr	r3, [pc, #220]	@ (800bc30 <pvPortMalloc+0x184>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d051      	beq.n	800bc00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2208      	movs	r2, #8
 800bb62:	4413      	add	r3, r2
 800bb64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	1ad2      	subs	r2, r2, r3
 800bb76:	2308      	movs	r3, #8
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d920      	bls.n	800bbc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4413      	add	r3, r2
 800bb84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	f003 0307 	and.w	r3, r3, #7
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00b      	beq.n	800bba8 <pvPortMalloc+0xfc>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	613b      	str	r3, [r7, #16]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	1ad2      	subs	r2, r2, r3
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbba:	69b8      	ldr	r0, [r7, #24]
 800bbbc:	f000 f90a 	bl	800bdd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc38 <pvPortMalloc+0x18c>)
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	4a1b      	ldr	r2, [pc, #108]	@ (800bc38 <pvPortMalloc+0x18c>)
 800bbcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbce:	4b1a      	ldr	r3, [pc, #104]	@ (800bc38 <pvPortMalloc+0x18c>)
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc40 <pvPortMalloc+0x194>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d203      	bcs.n	800bbe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbda:	4b17      	ldr	r3, [pc, #92]	@ (800bc38 <pvPortMalloc+0x18c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a18      	ldr	r2, [pc, #96]	@ (800bc40 <pvPortMalloc+0x194>)
 800bbe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	4b13      	ldr	r3, [pc, #76]	@ (800bc34 <pvPortMalloc+0x188>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbf6:	4b13      	ldr	r3, [pc, #76]	@ (800bc44 <pvPortMalloc+0x198>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	4a11      	ldr	r2, [pc, #68]	@ (800bc44 <pvPortMalloc+0x198>)
 800bbfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc00:	f7fe fcf0 	bl	800a5e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	f003 0307 	and.w	r3, r3, #7
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <pvPortMalloc+0x17a>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	60fb      	str	r3, [r7, #12]
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	e7fd      	b.n	800bc22 <pvPortMalloc+0x176>
	return pvReturn;
 800bc26:	69fb      	ldr	r3, [r7, #28]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3728      	adds	r7, #40	@ 0x28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20004b1c 	.word	0x20004b1c
 800bc34:	20004b30 	.word	0x20004b30
 800bc38:	20004b20 	.word	0x20004b20
 800bc3c:	20004b14 	.word	0x20004b14
 800bc40:	20004b24 	.word	0x20004b24
 800bc44:	20004b28 	.word	0x20004b28

0800bc48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d04f      	beq.n	800bcfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	425b      	negs	r3, r3
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	4413      	add	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	4b25      	ldr	r3, [pc, #148]	@ (800bd04 <vPortFree+0xbc>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4013      	ands	r3, r2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10b      	bne.n	800bc8e <vPortFree+0x46>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60fb      	str	r3, [r7, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00b      	beq.n	800bcae <vPortFree+0x66>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	60bb      	str	r3, [r7, #8]
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	e7fd      	b.n	800bcaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	4b14      	ldr	r3, [pc, #80]	@ (800bd04 <vPortFree+0xbc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01e      	beq.n	800bcfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11a      	bne.n	800bcfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	4b0e      	ldr	r3, [pc, #56]	@ (800bd04 <vPortFree+0xbc>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	43db      	mvns	r3, r3
 800bcce:	401a      	ands	r2, r3
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcd4:	f7fe fc78 	bl	800a5c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	@ (800bd08 <vPortFree+0xc0>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4413      	add	r3, r2
 800bce2:	4a09      	ldr	r2, [pc, #36]	@ (800bd08 <vPortFree+0xc0>)
 800bce4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bce6:	6938      	ldr	r0, [r7, #16]
 800bce8:	f000 f874 	bl	800bdd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bcec:	4b07      	ldr	r3, [pc, #28]	@ (800bd0c <vPortFree+0xc4>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	4a06      	ldr	r2, [pc, #24]	@ (800bd0c <vPortFree+0xc4>)
 800bcf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcf6:	f7fe fc75 	bl	800a5e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcfa:	bf00      	nop
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20004b30 	.word	0x20004b30
 800bd08:	20004b20 	.word	0x20004b20
 800bd0c:	20004b2c 	.word	0x20004b2c

0800bd10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bd1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd1c:	4b27      	ldr	r3, [pc, #156]	@ (800bdbc <prvHeapInit+0xac>)
 800bd1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00c      	beq.n	800bd44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3307      	adds	r3, #7
 800bd2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 0307 	bic.w	r3, r3, #7
 800bd36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	4a1f      	ldr	r2, [pc, #124]	@ (800bdbc <prvHeapInit+0xac>)
 800bd40:	4413      	add	r3, r2
 800bd42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd48:	4a1d      	ldr	r2, [pc, #116]	@ (800bdc0 <prvHeapInit+0xb0>)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc0 <prvHeapInit+0xb0>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	4413      	add	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd5c:	2208      	movs	r2, #8
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	1a9b      	subs	r3, r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0307 	bic.w	r3, r3, #7
 800bd6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4a15      	ldr	r2, [pc, #84]	@ (800bdc4 <prvHeapInit+0xb4>)
 800bd70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd72:	4b14      	ldr	r3, [pc, #80]	@ (800bdc4 <prvHeapInit+0xb4>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd7a:	4b12      	ldr	r3, [pc, #72]	@ (800bdc4 <prvHeapInit+0xb4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	1ad2      	subs	r2, r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd90:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <prvHeapInit+0xb4>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	4a0a      	ldr	r2, [pc, #40]	@ (800bdc8 <prvHeapInit+0xb8>)
 800bd9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4a09      	ldr	r2, [pc, #36]	@ (800bdcc <prvHeapInit+0xbc>)
 800bda6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bda8:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <prvHeapInit+0xc0>)
 800bdaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bdae:	601a      	str	r2, [r3, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000f14 	.word	0x20000f14
 800bdc0:	20004b14 	.word	0x20004b14
 800bdc4:	20004b1c 	.word	0x20004b1c
 800bdc8:	20004b24 	.word	0x20004b24
 800bdcc:	20004b20 	.word	0x20004b20
 800bdd0:	20004b30 	.word	0x20004b30

0800bdd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bddc:	4b28      	ldr	r3, [pc, #160]	@ (800be80 <prvInsertBlockIntoFreeList+0xac>)
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e002      	b.n	800bde8 <prvInsertBlockIntoFreeList+0x14>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d8f7      	bhi.n	800bde2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	429a      	cmp	r2, r3
 800be02:	d108      	bne.n	800be16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	441a      	add	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	441a      	add	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d118      	bne.n	800be5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	4b15      	ldr	r3, [pc, #84]	@ (800be84 <prvInsertBlockIntoFreeList+0xb0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d00d      	beq.n	800be52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	441a      	add	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e008      	b.n	800be64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be52:	4b0c      	ldr	r3, [pc, #48]	@ (800be84 <prvInsertBlockIntoFreeList+0xb0>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	e003      	b.n	800be64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d002      	beq.n	800be72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be72:	bf00      	nop
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20004b14 	.word	0x20004b14
 800be84:	20004b1c 	.word	0x20004b1c

0800be88 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be8c:	2201      	movs	r2, #1
 800be8e:	490e      	ldr	r1, [pc, #56]	@ (800bec8 <MX_USB_HOST_Init+0x40>)
 800be90:	480e      	ldr	r0, [pc, #56]	@ (800becc <MX_USB_HOST_Init+0x44>)
 800be92:	f7fb f945 	bl	8007120 <USBH_Init>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be9c:	f7f5 f83a 	bl	8000f14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bea0:	490b      	ldr	r1, [pc, #44]	@ (800bed0 <MX_USB_HOST_Init+0x48>)
 800bea2:	480a      	ldr	r0, [pc, #40]	@ (800becc <MX_USB_HOST_Init+0x44>)
 800bea4:	f7fb fa0b 	bl	80072be <USBH_RegisterClass>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800beae:	f7f5 f831 	bl	8000f14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800beb2:	4806      	ldr	r0, [pc, #24]	@ (800becc <MX_USB_HOST_Init+0x44>)
 800beb4:	f7fb fa8f 	bl	80073d6 <USBH_Start>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bebe:	f7f5 f829 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bec2:	bf00      	nop
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	0800bed5 	.word	0x0800bed5
 800becc:	20004b34 	.word	0x20004b34
 800bed0:	2000000c 	.word	0x2000000c

0800bed4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	d819      	bhi.n	800bf1c <USBH_UserProcess+0x48>
 800bee8:	a201      	add	r2, pc, #4	@ (adr r2, 800bef0 <USBH_UserProcess+0x1c>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	0800bf0d 	.word	0x0800bf0d
 800bef8:	0800bf1d 	.word	0x0800bf1d
 800befc:	0800bf15 	.word	0x0800bf15
 800bf00:	0800bf05 	.word	0x0800bf05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bf04:	4b09      	ldr	r3, [pc, #36]	@ (800bf2c <USBH_UserProcess+0x58>)
 800bf06:	2203      	movs	r2, #3
 800bf08:	701a      	strb	r2, [r3, #0]
  break;
 800bf0a:	e008      	b.n	800bf1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf0c:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <USBH_UserProcess+0x58>)
 800bf0e:	2202      	movs	r2, #2
 800bf10:	701a      	strb	r2, [r3, #0]
  break;
 800bf12:	e004      	b.n	800bf1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf14:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <USBH_UserProcess+0x58>)
 800bf16:	2201      	movs	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
  break;
 800bf1a:	e000      	b.n	800bf1e <USBH_UserProcess+0x4a>

  default:
  break;
 800bf1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20004f18 	.word	0x20004f18

0800bf30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08a      	sub	sp, #40	@ 0x28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf38:	f107 0314 	add.w	r3, r7, #20
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	609a      	str	r2, [r3, #8]
 800bf44:	60da      	str	r2, [r3, #12]
 800bf46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf50:	d147      	bne.n	800bfe2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf52:	2300      	movs	r3, #0
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	4b25      	ldr	r3, [pc, #148]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5a:	4a24      	ldr	r2, [pc, #144]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bf5c:	f043 0301 	orr.w	r3, r3, #1
 800bf60:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf62:	4b22      	ldr	r3, [pc, #136]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bf64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf7c:	f107 0314 	add.w	r3, r7, #20
 800bf80:	4619      	mov	r1, r3
 800bf82:	481b      	ldr	r0, [pc, #108]	@ (800bff0 <HAL_HCD_MspInit+0xc0>)
 800bf84:	f7f5 fc20 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf88:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bf8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf96:	2300      	movs	r3, #0
 800bf98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf9a:	230a      	movs	r3, #10
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf9e:	f107 0314 	add.w	r3, r7, #20
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4812      	ldr	r0, [pc, #72]	@ (800bff0 <HAL_HCD_MspInit+0xc0>)
 800bfa6:	f7f5 fc0f 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfaa:	4b10      	ldr	r3, [pc, #64]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bfac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfae:	4a0f      	ldr	r2, [pc, #60]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bfb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb4:	6353      	str	r3, [r2, #52]	@ 0x34
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	4b0c      	ldr	r3, [pc, #48]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bfbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfbe:	4a0b      	ldr	r2, [pc, #44]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bfc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfc4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfc6:	4b09      	ldr	r3, [pc, #36]	@ (800bfec <HAL_HCD_MspInit+0xbc>)
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	2105      	movs	r1, #5
 800bfd6:	2043      	movs	r0, #67	@ 0x43
 800bfd8:	f7f5 fbbf 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfdc:	2043      	movs	r0, #67	@ 0x43
 800bfde:	f7f5 fbd8 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	3728      	adds	r7, #40	@ 0x28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	40023800 	.word	0x40023800
 800bff0:	40020000 	.word	0x40020000

0800bff4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c002:	4618      	mov	r0, r3
 800c004:	f7fb fe99 	bl	8007d3a <USBH_LL_IncTimer>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fb fedd 	bl	8007dde <USBH_LL_Connect>
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fb fef2 	bl	8007e24 <USBH_LL_Disconnect>
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
 800c054:	4613      	mov	r3, r2
 800c056:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fb ff29 	bl	8007eb6 <USBH_LL_NotifyURBChange>
#endif
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fb fe87 	bl	8007d8e <USBH_LL_PortEnabled>
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c096:	4618      	mov	r0, r3
 800c098:	f7fb fe93 	bl	8007dc2 <USBH_LL_PortDisabled>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d12a      	bne.n	800c10c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c0b6:	4a18      	ldr	r2, [pc, #96]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a15      	ldr	r2, [pc, #84]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0c2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0c6:	4b14      	ldr	r3, [pc, #80]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c0cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c0ce:	4b12      	ldr	r3, [pc, #72]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c0d4:	4b10      	ldr	r3, [pc, #64]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0da:	4b0f      	ldr	r3, [pc, #60]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c0e0:	4b0d      	ldr	r3, [pc, #52]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c0ec:	480a      	ldr	r0, [pc, #40]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0ee:	f7f5 fd52 	bl	8001b96 <HAL_HCD_Init>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c0f8:	f7f4 ff0c 	bl	8000f14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c0fc:	4806      	ldr	r0, [pc, #24]	@ (800c118 <USBH_LL_Init+0x74>)
 800c0fe:	f7f6 f9b3 	bl	8002468 <HAL_HCD_GetCurrentFrame>
 800c102:	4603      	mov	r3, r0
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7fb fe08 	bl	8007d1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20004f1c 	.word	0x20004f1c

0800c11c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c132:	4618      	mov	r0, r3
 800c134:	f7f6 f920 	bl	8002378 <HAL_HCD_Start>
 800c138:	4603      	mov	r3, r0
 800c13a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f95e 	bl	800c400 <USBH_Get_USB_Status>
 800c144:	4603      	mov	r3, r0
 800c146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c148:	7bbb      	ldrb	r3, [r7, #14]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f6 f928 	bl	80023be <HAL_HCD_Stop>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 f943 	bl	800c400 <USBH_Get_USB_Status>
 800c17a:	4603      	mov	r3, r0
 800c17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c190:	2301      	movs	r3, #1
 800c192:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f6 f972 	bl	8002484 <HAL_HCD_GetCurrentSpeed>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d00c      	beq.n	800c1c0 <USBH_LL_GetSpeed+0x38>
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d80d      	bhi.n	800c1c6 <USBH_LL_GetSpeed+0x3e>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <USBH_LL_GetSpeed+0x2c>
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d003      	beq.n	800c1ba <USBH_LL_GetSpeed+0x32>
 800c1b2:	e008      	b.n	800c1c6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b8:	e008      	b.n	800c1cc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c1be:	e005      	b.n	800c1cc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c4:	e002      	b.n	800c1cc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ca:	bf00      	nop
  }
  return  speed;
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f6 f903 	bl	80023f8 <HAL_HCD_ResetPort>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f000 f901 	bl	800c400 <USBH_Get_USB_Status>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c202:	7bbb      	ldrb	r3, [r7, #14]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c21e:	78fa      	ldrb	r2, [r7, #3]
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f7f6 f90b 	bl	800243e <HAL_HCD_HC_GetXferCount>
 800c228:	4603      	mov	r3, r0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c232:	b590      	push	{r4, r7, lr}
 800c234:	b089      	sub	sp, #36	@ 0x24
 800c236:	af04      	add	r7, sp, #16
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	4608      	mov	r0, r1
 800c23c:	4611      	mov	r1, r2
 800c23e:	461a      	mov	r2, r3
 800c240:	4603      	mov	r3, r0
 800c242:	70fb      	strb	r3, [r7, #3]
 800c244:	460b      	mov	r3, r1
 800c246:	70bb      	strb	r3, [r7, #2]
 800c248:	4613      	mov	r3, r2
 800c24a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c25a:	787c      	ldrb	r4, [r7, #1]
 800c25c:	78ba      	ldrb	r2, [r7, #2]
 800c25e:	78f9      	ldrb	r1, [r7, #3]
 800c260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c262:	9302      	str	r3, [sp, #8]
 800c264:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c268:	9301      	str	r3, [sp, #4]
 800c26a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	4623      	mov	r3, r4
 800c272:	f7f5 fcf7 	bl	8001c64 <HAL_HCD_HC_Init>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 f8bf 	bl	800c400 <USBH_Get_USB_Status>
 800c282:	4603      	mov	r3, r0
 800c284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c286:	7bbb      	ldrb	r3, [r7, #14]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd90      	pop	{r4, r7, pc}

0800c290 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f5 fd90 	bl	8001dd4 <HAL_HCD_HC_Halt>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f8a0 	bl	800c400 <USBH_Get_USB_Status>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c2ce:	b590      	push	{r4, r7, lr}
 800c2d0:	b089      	sub	sp, #36	@ 0x24
 800c2d2:	af04      	add	r7, sp, #16
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	4608      	mov	r0, r1
 800c2d8:	4611      	mov	r1, r2
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4603      	mov	r3, r0
 800c2de:	70fb      	strb	r3, [r7, #3]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70bb      	strb	r3, [r7, #2]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c2f6:	787c      	ldrb	r4, [r7, #1]
 800c2f8:	78ba      	ldrb	r2, [r7, #2]
 800c2fa:	78f9      	ldrb	r1, [r7, #3]
 800c2fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c304:	9302      	str	r3, [sp, #8]
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	4623      	mov	r3, r4
 800c312:	f7f5 fd83 	bl	8001e1c <HAL_HCD_HC_SubmitRequest>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f86f 	bl	800c400 <USBH_Get_USB_Status>
 800c322:	4603      	mov	r3, r0
 800c324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c326:	7bbb      	ldrb	r3, [r7, #14]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd90      	pop	{r4, r7, pc}

0800c330 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7f6 f864 	bl	8002414 <HAL_HCD_HC_GetURBState>
 800c34c:	4603      	mov	r3, r0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d103      	bne.n	800c374 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c36c:	78fb      	ldrb	r3, [r7, #3]
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 f872 	bl	800c458 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c374:	20c8      	movs	r0, #200	@ 0xc8
 800c376:	f7f5 f8f1 	bl	800155c <HAL_Delay>
  return USBH_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
 800c390:	4613      	mov	r3, r2
 800c392:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c39a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3317      	adds	r3, #23
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00a      	beq.n	800c3c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c3b2:	78fa      	ldrb	r2, [r7, #3]
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	440b      	add	r3, r1
 800c3c0:	333c      	adds	r3, #60	@ 0x3c
 800c3c2:	78ba      	ldrb	r2, [r7, #2]
 800c3c4:	701a      	strb	r2, [r3, #0]
 800c3c6:	e009      	b.n	800c3dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c3c8:	78fa      	ldrb	r2, [r7, #3]
 800c3ca:	68f9      	ldr	r1, [r7, #12]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	011b      	lsls	r3, r3, #4
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	333d      	adds	r3, #61	@ 0x3d
 800c3d8:	78ba      	ldrb	r2, [r7, #2]
 800c3da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7f5 f8b2 	bl	800155c <HAL_Delay>
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	2b03      	cmp	r3, #3
 800c412:	d817      	bhi.n	800c444 <USBH_Get_USB_Status+0x44>
 800c414:	a201      	add	r2, pc, #4	@ (adr r2, 800c41c <USBH_Get_USB_Status+0x1c>)
 800c416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41a:	bf00      	nop
 800c41c:	0800c42d 	.word	0x0800c42d
 800c420:	0800c433 	.word	0x0800c433
 800c424:	0800c439 	.word	0x0800c439
 800c428:	0800c43f 	.word	0x0800c43f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
    break;
 800c430:	e00b      	b.n	800c44a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c432:	2302      	movs	r3, #2
 800c434:	73fb      	strb	r3, [r7, #15]
    break;
 800c436:	e008      	b.n	800c44a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c438:	2301      	movs	r3, #1
 800c43a:	73fb      	strb	r3, [r7, #15]
    break;
 800c43c:	e005      	b.n	800c44a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c43e:	2302      	movs	r3, #2
 800c440:	73fb      	strb	r3, [r7, #15]
    break;
 800c442:	e002      	b.n	800c44a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c444:	2302      	movs	r3, #2
 800c446:	73fb      	strb	r3, [r7, #15]
    break;
 800c448:	bf00      	nop
  }
  return usb_status;
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c462:	79fb      	ldrb	r3, [r7, #7]
 800c464:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
 800c470:	e001      	b.n	800c476 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c472:	2301      	movs	r3, #1
 800c474:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	461a      	mov	r2, r3
 800c47a:	2101      	movs	r1, #1
 800c47c:	4803      	ldr	r0, [pc, #12]	@ (800c48c <MX_DriverVbusFS+0x34>)
 800c47e:	f7f5 fb57 	bl	8001b30 <HAL_GPIO_WritePin>
}
 800c482:	bf00      	nop
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	40020800 	.word	0x40020800

0800c490 <malloc>:
 800c490:	4b02      	ldr	r3, [pc, #8]	@ (800c49c <malloc+0xc>)
 800c492:	4601      	mov	r1, r0
 800c494:	6818      	ldr	r0, [r3, #0]
 800c496:	f000 b82d 	b.w	800c4f4 <_malloc_r>
 800c49a:	bf00      	nop
 800c49c:	2000003c 	.word	0x2000003c

0800c4a0 <free>:
 800c4a0:	4b02      	ldr	r3, [pc, #8]	@ (800c4ac <free+0xc>)
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	f000 badb 	b.w	800ca60 <_free_r>
 800c4aa:	bf00      	nop
 800c4ac:	2000003c 	.word	0x2000003c

0800c4b0 <sbrk_aligned>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c4f0 <sbrk_aligned+0x40>)
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	6831      	ldr	r1, [r6, #0]
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	b911      	cbnz	r1, 800c4c2 <sbrk_aligned+0x12>
 800c4bc:	f000 fa54 	bl	800c968 <_sbrk_r>
 800c4c0:	6030      	str	r0, [r6, #0]
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f000 fa4f 	bl	800c968 <_sbrk_r>
 800c4ca:	1c43      	adds	r3, r0, #1
 800c4cc:	d103      	bne.n	800c4d6 <sbrk_aligned+0x26>
 800c4ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	bd70      	pop	{r4, r5, r6, pc}
 800c4d6:	1cc4      	adds	r4, r0, #3
 800c4d8:	f024 0403 	bic.w	r4, r4, #3
 800c4dc:	42a0      	cmp	r0, r4
 800c4de:	d0f8      	beq.n	800c4d2 <sbrk_aligned+0x22>
 800c4e0:	1a21      	subs	r1, r4, r0
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f000 fa40 	bl	800c968 <_sbrk_r>
 800c4e8:	3001      	adds	r0, #1
 800c4ea:	d1f2      	bne.n	800c4d2 <sbrk_aligned+0x22>
 800c4ec:	e7ef      	b.n	800c4ce <sbrk_aligned+0x1e>
 800c4ee:	bf00      	nop
 800c4f0:	200052fc 	.word	0x200052fc

0800c4f4 <_malloc_r>:
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f8:	1ccd      	adds	r5, r1, #3
 800c4fa:	f025 0503 	bic.w	r5, r5, #3
 800c4fe:	3508      	adds	r5, #8
 800c500:	2d0c      	cmp	r5, #12
 800c502:	bf38      	it	cc
 800c504:	250c      	movcc	r5, #12
 800c506:	2d00      	cmp	r5, #0
 800c508:	4606      	mov	r6, r0
 800c50a:	db01      	blt.n	800c510 <_malloc_r+0x1c>
 800c50c:	42a9      	cmp	r1, r5
 800c50e:	d904      	bls.n	800c51a <_malloc_r+0x26>
 800c510:	230c      	movs	r3, #12
 800c512:	6033      	str	r3, [r6, #0]
 800c514:	2000      	movs	r0, #0
 800c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5f0 <_malloc_r+0xfc>
 800c51e:	f000 f869 	bl	800c5f4 <__malloc_lock>
 800c522:	f8d8 3000 	ldr.w	r3, [r8]
 800c526:	461c      	mov	r4, r3
 800c528:	bb44      	cbnz	r4, 800c57c <_malloc_r+0x88>
 800c52a:	4629      	mov	r1, r5
 800c52c:	4630      	mov	r0, r6
 800c52e:	f7ff ffbf 	bl	800c4b0 <sbrk_aligned>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	4604      	mov	r4, r0
 800c536:	d158      	bne.n	800c5ea <_malloc_r+0xf6>
 800c538:	f8d8 4000 	ldr.w	r4, [r8]
 800c53c:	4627      	mov	r7, r4
 800c53e:	2f00      	cmp	r7, #0
 800c540:	d143      	bne.n	800c5ca <_malloc_r+0xd6>
 800c542:	2c00      	cmp	r4, #0
 800c544:	d04b      	beq.n	800c5de <_malloc_r+0xea>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	4639      	mov	r1, r7
 800c54a:	4630      	mov	r0, r6
 800c54c:	eb04 0903 	add.w	r9, r4, r3
 800c550:	f000 fa0a 	bl	800c968 <_sbrk_r>
 800c554:	4581      	cmp	r9, r0
 800c556:	d142      	bne.n	800c5de <_malloc_r+0xea>
 800c558:	6821      	ldr	r1, [r4, #0]
 800c55a:	1a6d      	subs	r5, r5, r1
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff ffa6 	bl	800c4b0 <sbrk_aligned>
 800c564:	3001      	adds	r0, #1
 800c566:	d03a      	beq.n	800c5de <_malloc_r+0xea>
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	442b      	add	r3, r5
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	f8d8 3000 	ldr.w	r3, [r8]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	bb62      	cbnz	r2, 800c5d0 <_malloc_r+0xdc>
 800c576:	f8c8 7000 	str.w	r7, [r8]
 800c57a:	e00f      	b.n	800c59c <_malloc_r+0xa8>
 800c57c:	6822      	ldr	r2, [r4, #0]
 800c57e:	1b52      	subs	r2, r2, r5
 800c580:	d420      	bmi.n	800c5c4 <_malloc_r+0xd0>
 800c582:	2a0b      	cmp	r2, #11
 800c584:	d917      	bls.n	800c5b6 <_malloc_r+0xc2>
 800c586:	1961      	adds	r1, r4, r5
 800c588:	42a3      	cmp	r3, r4
 800c58a:	6025      	str	r5, [r4, #0]
 800c58c:	bf18      	it	ne
 800c58e:	6059      	strne	r1, [r3, #4]
 800c590:	6863      	ldr	r3, [r4, #4]
 800c592:	bf08      	it	eq
 800c594:	f8c8 1000 	streq.w	r1, [r8]
 800c598:	5162      	str	r2, [r4, r5]
 800c59a:	604b      	str	r3, [r1, #4]
 800c59c:	4630      	mov	r0, r6
 800c59e:	f000 f82f 	bl	800c600 <__malloc_unlock>
 800c5a2:	f104 000b 	add.w	r0, r4, #11
 800c5a6:	1d23      	adds	r3, r4, #4
 800c5a8:	f020 0007 	bic.w	r0, r0, #7
 800c5ac:	1ac2      	subs	r2, r0, r3
 800c5ae:	bf1c      	itt	ne
 800c5b0:	1a1b      	subne	r3, r3, r0
 800c5b2:	50a3      	strne	r3, [r4, r2]
 800c5b4:	e7af      	b.n	800c516 <_malloc_r+0x22>
 800c5b6:	6862      	ldr	r2, [r4, #4]
 800c5b8:	42a3      	cmp	r3, r4
 800c5ba:	bf0c      	ite	eq
 800c5bc:	f8c8 2000 	streq.w	r2, [r8]
 800c5c0:	605a      	strne	r2, [r3, #4]
 800c5c2:	e7eb      	b.n	800c59c <_malloc_r+0xa8>
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	6864      	ldr	r4, [r4, #4]
 800c5c8:	e7ae      	b.n	800c528 <_malloc_r+0x34>
 800c5ca:	463c      	mov	r4, r7
 800c5cc:	687f      	ldr	r7, [r7, #4]
 800c5ce:	e7b6      	b.n	800c53e <_malloc_r+0x4a>
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	d1fb      	bne.n	800c5d0 <_malloc_r+0xdc>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	6053      	str	r3, [r2, #4]
 800c5dc:	e7de      	b.n	800c59c <_malloc_r+0xa8>
 800c5de:	230c      	movs	r3, #12
 800c5e0:	6033      	str	r3, [r6, #0]
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 f80c 	bl	800c600 <__malloc_unlock>
 800c5e8:	e794      	b.n	800c514 <_malloc_r+0x20>
 800c5ea:	6005      	str	r5, [r0, #0]
 800c5ec:	e7d6      	b.n	800c59c <_malloc_r+0xa8>
 800c5ee:	bf00      	nop
 800c5f0:	20005300 	.word	0x20005300

0800c5f4 <__malloc_lock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	@ (800c5fc <__malloc_lock+0x8>)
 800c5f6:	f000 ba04 	b.w	800ca02 <__retarget_lock_acquire_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	20005444 	.word	0x20005444

0800c600 <__malloc_unlock>:
 800c600:	4801      	ldr	r0, [pc, #4]	@ (800c608 <__malloc_unlock+0x8>)
 800c602:	f000 b9ff 	b.w	800ca04 <__retarget_lock_release_recursive>
 800c606:	bf00      	nop
 800c608:	20005444 	.word	0x20005444

0800c60c <srand>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4b10      	ldr	r3, [pc, #64]	@ (800c650 <srand+0x44>)
 800c610:	681d      	ldr	r5, [r3, #0]
 800c612:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c614:	4604      	mov	r4, r0
 800c616:	b9b3      	cbnz	r3, 800c646 <srand+0x3a>
 800c618:	2018      	movs	r0, #24
 800c61a:	f7ff ff39 	bl	800c490 <malloc>
 800c61e:	4602      	mov	r2, r0
 800c620:	6328      	str	r0, [r5, #48]	@ 0x30
 800c622:	b920      	cbnz	r0, 800c62e <srand+0x22>
 800c624:	4b0b      	ldr	r3, [pc, #44]	@ (800c654 <srand+0x48>)
 800c626:	480c      	ldr	r0, [pc, #48]	@ (800c658 <srand+0x4c>)
 800c628:	2146      	movs	r1, #70	@ 0x46
 800c62a:	f000 f9fb 	bl	800ca24 <__assert_func>
 800c62e:	490b      	ldr	r1, [pc, #44]	@ (800c65c <srand+0x50>)
 800c630:	4b0b      	ldr	r3, [pc, #44]	@ (800c660 <srand+0x54>)
 800c632:	e9c0 1300 	strd	r1, r3, [r0]
 800c636:	4b0b      	ldr	r3, [pc, #44]	@ (800c664 <srand+0x58>)
 800c638:	6083      	str	r3, [r0, #8]
 800c63a:	230b      	movs	r3, #11
 800c63c:	8183      	strh	r3, [r0, #12]
 800c63e:	2100      	movs	r1, #0
 800c640:	2001      	movs	r0, #1
 800c642:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c646:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c648:	2200      	movs	r2, #0
 800c64a:	611c      	str	r4, [r3, #16]
 800c64c:	615a      	str	r2, [r3, #20]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	2000003c 	.word	0x2000003c
 800c654:	0800d590 	.word	0x0800d590
 800c658:	0800d5a7 	.word	0x0800d5a7
 800c65c:	abcd330e 	.word	0xabcd330e
 800c660:	e66d1234 	.word	0xe66d1234
 800c664:	0005deec 	.word	0x0005deec

0800c668 <rand>:
 800c668:	4b16      	ldr	r3, [pc, #88]	@ (800c6c4 <rand+0x5c>)
 800c66a:	b510      	push	{r4, lr}
 800c66c:	681c      	ldr	r4, [r3, #0]
 800c66e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c670:	b9b3      	cbnz	r3, 800c6a0 <rand+0x38>
 800c672:	2018      	movs	r0, #24
 800c674:	f7ff ff0c 	bl	800c490 <malloc>
 800c678:	4602      	mov	r2, r0
 800c67a:	6320      	str	r0, [r4, #48]	@ 0x30
 800c67c:	b920      	cbnz	r0, 800c688 <rand+0x20>
 800c67e:	4b12      	ldr	r3, [pc, #72]	@ (800c6c8 <rand+0x60>)
 800c680:	4812      	ldr	r0, [pc, #72]	@ (800c6cc <rand+0x64>)
 800c682:	2152      	movs	r1, #82	@ 0x52
 800c684:	f000 f9ce 	bl	800ca24 <__assert_func>
 800c688:	4911      	ldr	r1, [pc, #68]	@ (800c6d0 <rand+0x68>)
 800c68a:	4b12      	ldr	r3, [pc, #72]	@ (800c6d4 <rand+0x6c>)
 800c68c:	e9c0 1300 	strd	r1, r3, [r0]
 800c690:	4b11      	ldr	r3, [pc, #68]	@ (800c6d8 <rand+0x70>)
 800c692:	6083      	str	r3, [r0, #8]
 800c694:	230b      	movs	r3, #11
 800c696:	8183      	strh	r3, [r0, #12]
 800c698:	2100      	movs	r1, #0
 800c69a:	2001      	movs	r0, #1
 800c69c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c6a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c6a2:	480e      	ldr	r0, [pc, #56]	@ (800c6dc <rand+0x74>)
 800c6a4:	690b      	ldr	r3, [r1, #16]
 800c6a6:	694c      	ldr	r4, [r1, #20]
 800c6a8:	4a0d      	ldr	r2, [pc, #52]	@ (800c6e0 <rand+0x78>)
 800c6aa:	4358      	muls	r0, r3
 800c6ac:	fb02 0004 	mla	r0, r2, r4, r0
 800c6b0:	fba3 3202 	umull	r3, r2, r3, r2
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	eb40 0002 	adc.w	r0, r0, r2
 800c6ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c6be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	2000003c 	.word	0x2000003c
 800c6c8:	0800d590 	.word	0x0800d590
 800c6cc:	0800d5a7 	.word	0x0800d5a7
 800c6d0:	abcd330e 	.word	0xabcd330e
 800c6d4:	e66d1234 	.word	0xe66d1234
 800c6d8:	0005deec 	.word	0x0005deec
 800c6dc:	5851f42d 	.word	0x5851f42d
 800c6e0:	4c957f2d 	.word	0x4c957f2d

0800c6e4 <std>:
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	b510      	push	{r4, lr}
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6f2:	6083      	str	r3, [r0, #8]
 800c6f4:	8181      	strh	r1, [r0, #12]
 800c6f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6f8:	81c2      	strh	r2, [r0, #14]
 800c6fa:	6183      	str	r3, [r0, #24]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	2208      	movs	r2, #8
 800c700:	305c      	adds	r0, #92	@ 0x5c
 800c702:	f000 f8f4 	bl	800c8ee <memset>
 800c706:	4b0d      	ldr	r3, [pc, #52]	@ (800c73c <std+0x58>)
 800c708:	6263      	str	r3, [r4, #36]	@ 0x24
 800c70a:	4b0d      	ldr	r3, [pc, #52]	@ (800c740 <std+0x5c>)
 800c70c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c70e:	4b0d      	ldr	r3, [pc, #52]	@ (800c744 <std+0x60>)
 800c710:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c712:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <std+0x64>)
 800c714:	6323      	str	r3, [r4, #48]	@ 0x30
 800c716:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <std+0x68>)
 800c718:	6224      	str	r4, [r4, #32]
 800c71a:	429c      	cmp	r4, r3
 800c71c:	d006      	beq.n	800c72c <std+0x48>
 800c71e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c722:	4294      	cmp	r4, r2
 800c724:	d002      	beq.n	800c72c <std+0x48>
 800c726:	33d0      	adds	r3, #208	@ 0xd0
 800c728:	429c      	cmp	r4, r3
 800c72a:	d105      	bne.n	800c738 <std+0x54>
 800c72c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c734:	f000 b964 	b.w	800ca00 <__retarget_lock_init_recursive>
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	bf00      	nop
 800c73c:	0800c869 	.word	0x0800c869
 800c740:	0800c88b 	.word	0x0800c88b
 800c744:	0800c8c3 	.word	0x0800c8c3
 800c748:	0800c8e7 	.word	0x0800c8e7
 800c74c:	20005304 	.word	0x20005304

0800c750 <stdio_exit_handler>:
 800c750:	4a02      	ldr	r2, [pc, #8]	@ (800c75c <stdio_exit_handler+0xc>)
 800c752:	4903      	ldr	r1, [pc, #12]	@ (800c760 <stdio_exit_handler+0x10>)
 800c754:	4803      	ldr	r0, [pc, #12]	@ (800c764 <stdio_exit_handler+0x14>)
 800c756:	f000 b869 	b.w	800c82c <_fwalk_sglue>
 800c75a:	bf00      	nop
 800c75c:	20000030 	.word	0x20000030
 800c760:	0800cbfd 	.word	0x0800cbfd
 800c764:	20000040 	.word	0x20000040

0800c768 <cleanup_stdio>:
 800c768:	6841      	ldr	r1, [r0, #4]
 800c76a:	4b0c      	ldr	r3, [pc, #48]	@ (800c79c <cleanup_stdio+0x34>)
 800c76c:	4299      	cmp	r1, r3
 800c76e:	b510      	push	{r4, lr}
 800c770:	4604      	mov	r4, r0
 800c772:	d001      	beq.n	800c778 <cleanup_stdio+0x10>
 800c774:	f000 fa42 	bl	800cbfc <_fflush_r>
 800c778:	68a1      	ldr	r1, [r4, #8]
 800c77a:	4b09      	ldr	r3, [pc, #36]	@ (800c7a0 <cleanup_stdio+0x38>)
 800c77c:	4299      	cmp	r1, r3
 800c77e:	d002      	beq.n	800c786 <cleanup_stdio+0x1e>
 800c780:	4620      	mov	r0, r4
 800c782:	f000 fa3b 	bl	800cbfc <_fflush_r>
 800c786:	68e1      	ldr	r1, [r4, #12]
 800c788:	4b06      	ldr	r3, [pc, #24]	@ (800c7a4 <cleanup_stdio+0x3c>)
 800c78a:	4299      	cmp	r1, r3
 800c78c:	d004      	beq.n	800c798 <cleanup_stdio+0x30>
 800c78e:	4620      	mov	r0, r4
 800c790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c794:	f000 ba32 	b.w	800cbfc <_fflush_r>
 800c798:	bd10      	pop	{r4, pc}
 800c79a:	bf00      	nop
 800c79c:	20005304 	.word	0x20005304
 800c7a0:	2000536c 	.word	0x2000536c
 800c7a4:	200053d4 	.word	0x200053d4

0800c7a8 <global_stdio_init.part.0>:
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c7d8 <global_stdio_init.part.0+0x30>)
 800c7ac:	4c0b      	ldr	r4, [pc, #44]	@ (800c7dc <global_stdio_init.part.0+0x34>)
 800c7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e0 <global_stdio_init.part.0+0x38>)
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2104      	movs	r1, #4
 800c7b8:	f7ff ff94 	bl	800c6e4 <std>
 800c7bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	2109      	movs	r1, #9
 800c7c4:	f7ff ff8e 	bl	800c6e4 <std>
 800c7c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7d2:	2112      	movs	r1, #18
 800c7d4:	f7ff bf86 	b.w	800c6e4 <std>
 800c7d8:	2000543c 	.word	0x2000543c
 800c7dc:	20005304 	.word	0x20005304
 800c7e0:	0800c751 	.word	0x0800c751

0800c7e4 <__sfp_lock_acquire>:
 800c7e4:	4801      	ldr	r0, [pc, #4]	@ (800c7ec <__sfp_lock_acquire+0x8>)
 800c7e6:	f000 b90c 	b.w	800ca02 <__retarget_lock_acquire_recursive>
 800c7ea:	bf00      	nop
 800c7ec:	20005445 	.word	0x20005445

0800c7f0 <__sfp_lock_release>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	@ (800c7f8 <__sfp_lock_release+0x8>)
 800c7f2:	f000 b907 	b.w	800ca04 <__retarget_lock_release_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	20005445 	.word	0x20005445

0800c7fc <__sinit>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	4604      	mov	r4, r0
 800c800:	f7ff fff0 	bl	800c7e4 <__sfp_lock_acquire>
 800c804:	6a23      	ldr	r3, [r4, #32]
 800c806:	b11b      	cbz	r3, 800c810 <__sinit+0x14>
 800c808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c80c:	f7ff bff0 	b.w	800c7f0 <__sfp_lock_release>
 800c810:	4b04      	ldr	r3, [pc, #16]	@ (800c824 <__sinit+0x28>)
 800c812:	6223      	str	r3, [r4, #32]
 800c814:	4b04      	ldr	r3, [pc, #16]	@ (800c828 <__sinit+0x2c>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f5      	bne.n	800c808 <__sinit+0xc>
 800c81c:	f7ff ffc4 	bl	800c7a8 <global_stdio_init.part.0>
 800c820:	e7f2      	b.n	800c808 <__sinit+0xc>
 800c822:	bf00      	nop
 800c824:	0800c769 	.word	0x0800c769
 800c828:	2000543c 	.word	0x2000543c

0800c82c <_fwalk_sglue>:
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c830:	4607      	mov	r7, r0
 800c832:	4688      	mov	r8, r1
 800c834:	4614      	mov	r4, r2
 800c836:	2600      	movs	r6, #0
 800c838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c83c:	f1b9 0901 	subs.w	r9, r9, #1
 800c840:	d505      	bpl.n	800c84e <_fwalk_sglue+0x22>
 800c842:	6824      	ldr	r4, [r4, #0]
 800c844:	2c00      	cmp	r4, #0
 800c846:	d1f7      	bne.n	800c838 <_fwalk_sglue+0xc>
 800c848:	4630      	mov	r0, r6
 800c84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84e:	89ab      	ldrh	r3, [r5, #12]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d907      	bls.n	800c864 <_fwalk_sglue+0x38>
 800c854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c858:	3301      	adds	r3, #1
 800c85a:	d003      	beq.n	800c864 <_fwalk_sglue+0x38>
 800c85c:	4629      	mov	r1, r5
 800c85e:	4638      	mov	r0, r7
 800c860:	47c0      	blx	r8
 800c862:	4306      	orrs	r6, r0
 800c864:	3568      	adds	r5, #104	@ 0x68
 800c866:	e7e9      	b.n	800c83c <_fwalk_sglue+0x10>

0800c868 <__sread>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c870:	f000 f868 	bl	800c944 <_read_r>
 800c874:	2800      	cmp	r0, #0
 800c876:	bfab      	itete	ge
 800c878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c87a:	89a3      	ldrhlt	r3, [r4, #12]
 800c87c:	181b      	addge	r3, r3, r0
 800c87e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c882:	bfac      	ite	ge
 800c884:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c886:	81a3      	strhlt	r3, [r4, #12]
 800c888:	bd10      	pop	{r4, pc}

0800c88a <__swrite>:
 800c88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c88e:	461f      	mov	r7, r3
 800c890:	898b      	ldrh	r3, [r1, #12]
 800c892:	05db      	lsls	r3, r3, #23
 800c894:	4605      	mov	r5, r0
 800c896:	460c      	mov	r4, r1
 800c898:	4616      	mov	r6, r2
 800c89a:	d505      	bpl.n	800c8a8 <__swrite+0x1e>
 800c89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f000 f83c 	bl	800c920 <_lseek_r>
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	4632      	mov	r2, r6
 800c8b6:	463b      	mov	r3, r7
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8be:	f000 b863 	b.w	800c988 <_write_r>

0800c8c2 <__sseek>:
 800c8c2:	b510      	push	{r4, lr}
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ca:	f000 f829 	bl	800c920 <_lseek_r>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	bf15      	itete	ne
 800c8d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8de:	81a3      	strheq	r3, [r4, #12]
 800c8e0:	bf18      	it	ne
 800c8e2:	81a3      	strhne	r3, [r4, #12]
 800c8e4:	bd10      	pop	{r4, pc}

0800c8e6 <__sclose>:
 800c8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ea:	f000 b809 	b.w	800c900 <_close_r>

0800c8ee <memset>:
 800c8ee:	4402      	add	r2, r0
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d100      	bne.n	800c8f8 <memset+0xa>
 800c8f6:	4770      	bx	lr
 800c8f8:	f803 1b01 	strb.w	r1, [r3], #1
 800c8fc:	e7f9      	b.n	800c8f2 <memset+0x4>
	...

0800c900 <_close_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d06      	ldr	r5, [pc, #24]	@ (800c91c <_close_r+0x1c>)
 800c904:	2300      	movs	r3, #0
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f4 fd0e 	bl	800132c <_close>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_close_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_close_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	20005440 	.word	0x20005440

0800c920 <_lseek_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d07      	ldr	r5, [pc, #28]	@ (800c940 <_lseek_r+0x20>)
 800c924:	4604      	mov	r4, r0
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	602a      	str	r2, [r5, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	f7f4 fd23 	bl	800137a <_lseek>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	d102      	bne.n	800c93e <_lseek_r+0x1e>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	b103      	cbz	r3, 800c93e <_lseek_r+0x1e>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	bd38      	pop	{r3, r4, r5, pc}
 800c940:	20005440 	.word	0x20005440

0800c944 <_read_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d07      	ldr	r5, [pc, #28]	@ (800c964 <_read_r+0x20>)
 800c948:	4604      	mov	r4, r0
 800c94a:	4608      	mov	r0, r1
 800c94c:	4611      	mov	r1, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	602a      	str	r2, [r5, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	f7f4 fcb1 	bl	80012ba <_read>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d102      	bne.n	800c962 <_read_r+0x1e>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	b103      	cbz	r3, 800c962 <_read_r+0x1e>
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	20005440 	.word	0x20005440

0800c968 <_sbrk_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d06      	ldr	r5, [pc, #24]	@ (800c984 <_sbrk_r+0x1c>)
 800c96c:	2300      	movs	r3, #0
 800c96e:	4604      	mov	r4, r0
 800c970:	4608      	mov	r0, r1
 800c972:	602b      	str	r3, [r5, #0]
 800c974:	f7f4 fd0e 	bl	8001394 <_sbrk>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_sbrk_r+0x1a>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_sbrk_r+0x1a>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	20005440 	.word	0x20005440

0800c988 <_write_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4d07      	ldr	r5, [pc, #28]	@ (800c9a8 <_write_r+0x20>)
 800c98c:	4604      	mov	r4, r0
 800c98e:	4608      	mov	r0, r1
 800c990:	4611      	mov	r1, r2
 800c992:	2200      	movs	r2, #0
 800c994:	602a      	str	r2, [r5, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f7f4 fcac 	bl	80012f4 <_write>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_write_r+0x1e>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_write_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20005440 	.word	0x20005440

0800c9ac <__errno>:
 800c9ac:	4b01      	ldr	r3, [pc, #4]	@ (800c9b4 <__errno+0x8>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	2000003c 	.word	0x2000003c

0800c9b8 <__libc_init_array>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4d0d      	ldr	r5, [pc, #52]	@ (800c9f0 <__libc_init_array+0x38>)
 800c9bc:	4c0d      	ldr	r4, [pc, #52]	@ (800c9f4 <__libc_init_array+0x3c>)
 800c9be:	1b64      	subs	r4, r4, r5
 800c9c0:	10a4      	asrs	r4, r4, #2
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	42a6      	cmp	r6, r4
 800c9c6:	d109      	bne.n	800c9dc <__libc_init_array+0x24>
 800c9c8:	4d0b      	ldr	r5, [pc, #44]	@ (800c9f8 <__libc_init_array+0x40>)
 800c9ca:	4c0c      	ldr	r4, [pc, #48]	@ (800c9fc <__libc_init_array+0x44>)
 800c9cc:	f000 fd82 	bl	800d4d4 <_init>
 800c9d0:	1b64      	subs	r4, r4, r5
 800c9d2:	10a4      	asrs	r4, r4, #2
 800c9d4:	2600      	movs	r6, #0
 800c9d6:	42a6      	cmp	r6, r4
 800c9d8:	d105      	bne.n	800c9e6 <__libc_init_array+0x2e>
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e0:	4798      	blx	r3
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7ee      	b.n	800c9c4 <__libc_init_array+0xc>
 800c9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ea:	4798      	blx	r3
 800c9ec:	3601      	adds	r6, #1
 800c9ee:	e7f2      	b.n	800c9d6 <__libc_init_array+0x1e>
 800c9f0:	0800d678 	.word	0x0800d678
 800c9f4:	0800d678 	.word	0x0800d678
 800c9f8:	0800d678 	.word	0x0800d678
 800c9fc:	0800d67c 	.word	0x0800d67c

0800ca00 <__retarget_lock_init_recursive>:
 800ca00:	4770      	bx	lr

0800ca02 <__retarget_lock_acquire_recursive>:
 800ca02:	4770      	bx	lr

0800ca04 <__retarget_lock_release_recursive>:
 800ca04:	4770      	bx	lr

0800ca06 <memcpy>:
 800ca06:	440a      	add	r2, r1
 800ca08:	4291      	cmp	r1, r2
 800ca0a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ca0e:	d100      	bne.n	800ca12 <memcpy+0xc>
 800ca10:	4770      	bx	lr
 800ca12:	b510      	push	{r4, lr}
 800ca14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca1c:	4291      	cmp	r1, r2
 800ca1e:	d1f9      	bne.n	800ca14 <memcpy+0xe>
 800ca20:	bd10      	pop	{r4, pc}
	...

0800ca24 <__assert_func>:
 800ca24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca26:	4614      	mov	r4, r2
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <__assert_func+0x2c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4605      	mov	r5, r0
 800ca30:	68d8      	ldr	r0, [r3, #12]
 800ca32:	b954      	cbnz	r4, 800ca4a <__assert_func+0x26>
 800ca34:	4b07      	ldr	r3, [pc, #28]	@ (800ca54 <__assert_func+0x30>)
 800ca36:	461c      	mov	r4, r3
 800ca38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca3c:	9100      	str	r1, [sp, #0]
 800ca3e:	462b      	mov	r3, r5
 800ca40:	4905      	ldr	r1, [pc, #20]	@ (800ca58 <__assert_func+0x34>)
 800ca42:	f000 f903 	bl	800cc4c <fiprintf>
 800ca46:	f000 f913 	bl	800cc70 <abort>
 800ca4a:	4b04      	ldr	r3, [pc, #16]	@ (800ca5c <__assert_func+0x38>)
 800ca4c:	e7f4      	b.n	800ca38 <__assert_func+0x14>
 800ca4e:	bf00      	nop
 800ca50:	2000003c 	.word	0x2000003c
 800ca54:	0800d63a 	.word	0x0800d63a
 800ca58:	0800d60c 	.word	0x0800d60c
 800ca5c:	0800d5ff 	.word	0x0800d5ff

0800ca60 <_free_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4605      	mov	r5, r0
 800ca64:	2900      	cmp	r1, #0
 800ca66:	d041      	beq.n	800caec <_free_r+0x8c>
 800ca68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca6c:	1f0c      	subs	r4, r1, #4
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	bfb8      	it	lt
 800ca72:	18e4      	addlt	r4, r4, r3
 800ca74:	f7ff fdbe 	bl	800c5f4 <__malloc_lock>
 800ca78:	4a1d      	ldr	r2, [pc, #116]	@ (800caf0 <_free_r+0x90>)
 800ca7a:	6813      	ldr	r3, [r2, #0]
 800ca7c:	b933      	cbnz	r3, 800ca8c <_free_r+0x2c>
 800ca7e:	6063      	str	r3, [r4, #4]
 800ca80:	6014      	str	r4, [r2, #0]
 800ca82:	4628      	mov	r0, r5
 800ca84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca88:	f7ff bdba 	b.w	800c600 <__malloc_unlock>
 800ca8c:	42a3      	cmp	r3, r4
 800ca8e:	d908      	bls.n	800caa2 <_free_r+0x42>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	1821      	adds	r1, r4, r0
 800ca94:	428b      	cmp	r3, r1
 800ca96:	bf01      	itttt	eq
 800ca98:	6819      	ldreq	r1, [r3, #0]
 800ca9a:	685b      	ldreq	r3, [r3, #4]
 800ca9c:	1809      	addeq	r1, r1, r0
 800ca9e:	6021      	streq	r1, [r4, #0]
 800caa0:	e7ed      	b.n	800ca7e <_free_r+0x1e>
 800caa2:	461a      	mov	r2, r3
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	b10b      	cbz	r3, 800caac <_free_r+0x4c>
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	d9fa      	bls.n	800caa2 <_free_r+0x42>
 800caac:	6811      	ldr	r1, [r2, #0]
 800caae:	1850      	adds	r0, r2, r1
 800cab0:	42a0      	cmp	r0, r4
 800cab2:	d10b      	bne.n	800cacc <_free_r+0x6c>
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	4401      	add	r1, r0
 800cab8:	1850      	adds	r0, r2, r1
 800caba:	4283      	cmp	r3, r0
 800cabc:	6011      	str	r1, [r2, #0]
 800cabe:	d1e0      	bne.n	800ca82 <_free_r+0x22>
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	6053      	str	r3, [r2, #4]
 800cac6:	4408      	add	r0, r1
 800cac8:	6010      	str	r0, [r2, #0]
 800caca:	e7da      	b.n	800ca82 <_free_r+0x22>
 800cacc:	d902      	bls.n	800cad4 <_free_r+0x74>
 800cace:	230c      	movs	r3, #12
 800cad0:	602b      	str	r3, [r5, #0]
 800cad2:	e7d6      	b.n	800ca82 <_free_r+0x22>
 800cad4:	6820      	ldr	r0, [r4, #0]
 800cad6:	1821      	adds	r1, r4, r0
 800cad8:	428b      	cmp	r3, r1
 800cada:	bf04      	itt	eq
 800cadc:	6819      	ldreq	r1, [r3, #0]
 800cade:	685b      	ldreq	r3, [r3, #4]
 800cae0:	6063      	str	r3, [r4, #4]
 800cae2:	bf04      	itt	eq
 800cae4:	1809      	addeq	r1, r1, r0
 800cae6:	6021      	streq	r1, [r4, #0]
 800cae8:	6054      	str	r4, [r2, #4]
 800caea:	e7ca      	b.n	800ca82 <_free_r+0x22>
 800caec:	bd38      	pop	{r3, r4, r5, pc}
 800caee:	bf00      	nop
 800caf0:	20005300 	.word	0x20005300

0800caf4 <__sflush_r>:
 800caf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafc:	0716      	lsls	r6, r2, #28
 800cafe:	4605      	mov	r5, r0
 800cb00:	460c      	mov	r4, r1
 800cb02:	d454      	bmi.n	800cbae <__sflush_r+0xba>
 800cb04:	684b      	ldr	r3, [r1, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	dc02      	bgt.n	800cb10 <__sflush_r+0x1c>
 800cb0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dd48      	ble.n	800cba2 <__sflush_r+0xae>
 800cb10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb12:	2e00      	cmp	r6, #0
 800cb14:	d045      	beq.n	800cba2 <__sflush_r+0xae>
 800cb16:	2300      	movs	r3, #0
 800cb18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb1c:	682f      	ldr	r7, [r5, #0]
 800cb1e:	6a21      	ldr	r1, [r4, #32]
 800cb20:	602b      	str	r3, [r5, #0]
 800cb22:	d030      	beq.n	800cb86 <__sflush_r+0x92>
 800cb24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	0759      	lsls	r1, r3, #29
 800cb2a:	d505      	bpl.n	800cb38 <__sflush_r+0x44>
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb32:	b10b      	cbz	r3, 800cb38 <__sflush_r+0x44>
 800cb34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	2300      	movs	r3, #0
 800cb3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb3c:	6a21      	ldr	r1, [r4, #32]
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b0      	blx	r6
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	89a3      	ldrh	r3, [r4, #12]
 800cb46:	d106      	bne.n	800cb56 <__sflush_r+0x62>
 800cb48:	6829      	ldr	r1, [r5, #0]
 800cb4a:	291d      	cmp	r1, #29
 800cb4c:	d82b      	bhi.n	800cba6 <__sflush_r+0xb2>
 800cb4e:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf8 <__sflush_r+0x104>)
 800cb50:	410a      	asrs	r2, r1
 800cb52:	07d6      	lsls	r6, r2, #31
 800cb54:	d427      	bmi.n	800cba6 <__sflush_r+0xb2>
 800cb56:	2200      	movs	r2, #0
 800cb58:	6062      	str	r2, [r4, #4]
 800cb5a:	04d9      	lsls	r1, r3, #19
 800cb5c:	6922      	ldr	r2, [r4, #16]
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	d504      	bpl.n	800cb6c <__sflush_r+0x78>
 800cb62:	1c42      	adds	r2, r0, #1
 800cb64:	d101      	bne.n	800cb6a <__sflush_r+0x76>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b903      	cbnz	r3, 800cb6c <__sflush_r+0x78>
 800cb6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6e:	602f      	str	r7, [r5, #0]
 800cb70:	b1b9      	cbz	r1, 800cba2 <__sflush_r+0xae>
 800cb72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb76:	4299      	cmp	r1, r3
 800cb78:	d002      	beq.n	800cb80 <__sflush_r+0x8c>
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f7ff ff70 	bl	800ca60 <_free_r>
 800cb80:	2300      	movs	r3, #0
 800cb82:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb84:	e00d      	b.n	800cba2 <__sflush_r+0xae>
 800cb86:	2301      	movs	r3, #1
 800cb88:	4628      	mov	r0, r5
 800cb8a:	47b0      	blx	r6
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	1c50      	adds	r0, r2, #1
 800cb90:	d1c9      	bne.n	800cb26 <__sflush_r+0x32>
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0c6      	beq.n	800cb26 <__sflush_r+0x32>
 800cb98:	2b1d      	cmp	r3, #29
 800cb9a:	d001      	beq.n	800cba0 <__sflush_r+0xac>
 800cb9c:	2b16      	cmp	r3, #22
 800cb9e:	d11e      	bne.n	800cbde <__sflush_r+0xea>
 800cba0:	602f      	str	r7, [r5, #0]
 800cba2:	2000      	movs	r0, #0
 800cba4:	e022      	b.n	800cbec <__sflush_r+0xf8>
 800cba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbaa:	b21b      	sxth	r3, r3
 800cbac:	e01b      	b.n	800cbe6 <__sflush_r+0xf2>
 800cbae:	690f      	ldr	r7, [r1, #16]
 800cbb0:	2f00      	cmp	r7, #0
 800cbb2:	d0f6      	beq.n	800cba2 <__sflush_r+0xae>
 800cbb4:	0793      	lsls	r3, r2, #30
 800cbb6:	680e      	ldr	r6, [r1, #0]
 800cbb8:	bf08      	it	eq
 800cbba:	694b      	ldreq	r3, [r1, #20]
 800cbbc:	600f      	str	r7, [r1, #0]
 800cbbe:	bf18      	it	ne
 800cbc0:	2300      	movne	r3, #0
 800cbc2:	eba6 0807 	sub.w	r8, r6, r7
 800cbc6:	608b      	str	r3, [r1, #8]
 800cbc8:	f1b8 0f00 	cmp.w	r8, #0
 800cbcc:	dde9      	ble.n	800cba2 <__sflush_r+0xae>
 800cbce:	6a21      	ldr	r1, [r4, #32]
 800cbd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbd2:	4643      	mov	r3, r8
 800cbd4:	463a      	mov	r2, r7
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47b0      	blx	r6
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	dc08      	bgt.n	800cbf0 <__sflush_r+0xfc>
 800cbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbe6:	81a3      	strh	r3, [r4, #12]
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf0:	4407      	add	r7, r0
 800cbf2:	eba8 0800 	sub.w	r8, r8, r0
 800cbf6:	e7e7      	b.n	800cbc8 <__sflush_r+0xd4>
 800cbf8:	dfbffffe 	.word	0xdfbffffe

0800cbfc <_fflush_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	690b      	ldr	r3, [r1, #16]
 800cc00:	4605      	mov	r5, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b913      	cbnz	r3, 800cc0c <_fflush_r+0x10>
 800cc06:	2500      	movs	r5, #0
 800cc08:	4628      	mov	r0, r5
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	b118      	cbz	r0, 800cc16 <_fflush_r+0x1a>
 800cc0e:	6a03      	ldr	r3, [r0, #32]
 800cc10:	b90b      	cbnz	r3, 800cc16 <_fflush_r+0x1a>
 800cc12:	f7ff fdf3 	bl	800c7fc <__sinit>
 800cc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0f3      	beq.n	800cc06 <_fflush_r+0xa>
 800cc1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc20:	07d0      	lsls	r0, r2, #31
 800cc22:	d404      	bmi.n	800cc2e <_fflush_r+0x32>
 800cc24:	0599      	lsls	r1, r3, #22
 800cc26:	d402      	bmi.n	800cc2e <_fflush_r+0x32>
 800cc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc2a:	f7ff feea 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800cc2e:	4628      	mov	r0, r5
 800cc30:	4621      	mov	r1, r4
 800cc32:	f7ff ff5f 	bl	800caf4 <__sflush_r>
 800cc36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc38:	07da      	lsls	r2, r3, #31
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	d4e4      	bmi.n	800cc08 <_fflush_r+0xc>
 800cc3e:	89a3      	ldrh	r3, [r4, #12]
 800cc40:	059b      	lsls	r3, r3, #22
 800cc42:	d4e1      	bmi.n	800cc08 <_fflush_r+0xc>
 800cc44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc46:	f7ff fedd 	bl	800ca04 <__retarget_lock_release_recursive>
 800cc4a:	e7dd      	b.n	800cc08 <_fflush_r+0xc>

0800cc4c <fiprintf>:
 800cc4c:	b40e      	push	{r1, r2, r3}
 800cc4e:	b503      	push	{r0, r1, lr}
 800cc50:	4601      	mov	r1, r0
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	4805      	ldr	r0, [pc, #20]	@ (800cc6c <fiprintf+0x20>)
 800cc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5a:	6800      	ldr	r0, [r0, #0]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	f000 f837 	bl	800ccd0 <_vfiprintf_r>
 800cc62:	b002      	add	sp, #8
 800cc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc68:	b003      	add	sp, #12
 800cc6a:	4770      	bx	lr
 800cc6c:	2000003c 	.word	0x2000003c

0800cc70 <abort>:
 800cc70:	b508      	push	{r3, lr}
 800cc72:	2006      	movs	r0, #6
 800cc74:	f000 fb8e 	bl	800d394 <raise>
 800cc78:	2001      	movs	r0, #1
 800cc7a:	f7f4 fb13 	bl	80012a4 <_exit>

0800cc7e <__sfputc_r>:
 800cc7e:	6893      	ldr	r3, [r2, #8]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	b410      	push	{r4}
 800cc86:	6093      	str	r3, [r2, #8]
 800cc88:	da08      	bge.n	800cc9c <__sfputc_r+0x1e>
 800cc8a:	6994      	ldr	r4, [r2, #24]
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	db01      	blt.n	800cc94 <__sfputc_r+0x16>
 800cc90:	290a      	cmp	r1, #10
 800cc92:	d103      	bne.n	800cc9c <__sfputc_r+0x1e>
 800cc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc98:	f000 bac0 	b.w	800d21c <__swbuf_r>
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	1c58      	adds	r0, r3, #1
 800cca0:	6010      	str	r0, [r2, #0]
 800cca2:	7019      	strb	r1, [r3, #0]
 800cca4:	4608      	mov	r0, r1
 800cca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <__sfputs_r>:
 800ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	4614      	mov	r4, r2
 800ccb4:	18d5      	adds	r5, r2, r3
 800ccb6:	42ac      	cmp	r4, r5
 800ccb8:	d101      	bne.n	800ccbe <__sfputs_r+0x12>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	e007      	b.n	800ccce <__sfputs_r+0x22>
 800ccbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc2:	463a      	mov	r2, r7
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f7ff ffda 	bl	800cc7e <__sfputc_r>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d1f3      	bne.n	800ccb6 <__sfputs_r+0xa>
 800ccce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccd0 <_vfiprintf_r>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	b09d      	sub	sp, #116	@ 0x74
 800ccd8:	4614      	mov	r4, r2
 800ccda:	4698      	mov	r8, r3
 800ccdc:	4606      	mov	r6, r0
 800ccde:	b118      	cbz	r0, 800cce8 <_vfiprintf_r+0x18>
 800cce0:	6a03      	ldr	r3, [r0, #32]
 800cce2:	b90b      	cbnz	r3, 800cce8 <_vfiprintf_r+0x18>
 800cce4:	f7ff fd8a 	bl	800c7fc <__sinit>
 800cce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccea:	07d9      	lsls	r1, r3, #31
 800ccec:	d405      	bmi.n	800ccfa <_vfiprintf_r+0x2a>
 800ccee:	89ab      	ldrh	r3, [r5, #12]
 800ccf0:	059a      	lsls	r2, r3, #22
 800ccf2:	d402      	bmi.n	800ccfa <_vfiprintf_r+0x2a>
 800ccf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccf6:	f7ff fe84 	bl	800ca02 <__retarget_lock_acquire_recursive>
 800ccfa:	89ab      	ldrh	r3, [r5, #12]
 800ccfc:	071b      	lsls	r3, r3, #28
 800ccfe:	d501      	bpl.n	800cd04 <_vfiprintf_r+0x34>
 800cd00:	692b      	ldr	r3, [r5, #16]
 800cd02:	b99b      	cbnz	r3, 800cd2c <_vfiprintf_r+0x5c>
 800cd04:	4629      	mov	r1, r5
 800cd06:	4630      	mov	r0, r6
 800cd08:	f000 fac6 	bl	800d298 <__swsetup_r>
 800cd0c:	b170      	cbz	r0, 800cd2c <_vfiprintf_r+0x5c>
 800cd0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd10:	07dc      	lsls	r4, r3, #31
 800cd12:	d504      	bpl.n	800cd1e <_vfiprintf_r+0x4e>
 800cd14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd18:	b01d      	add	sp, #116	@ 0x74
 800cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1e:	89ab      	ldrh	r3, [r5, #12]
 800cd20:	0598      	lsls	r0, r3, #22
 800cd22:	d4f7      	bmi.n	800cd14 <_vfiprintf_r+0x44>
 800cd24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd26:	f7ff fe6d 	bl	800ca04 <__retarget_lock_release_recursive>
 800cd2a:	e7f3      	b.n	800cd14 <_vfiprintf_r+0x44>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd30:	2320      	movs	r3, #32
 800cd32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd36:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3a:	2330      	movs	r3, #48	@ 0x30
 800cd3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ceec <_vfiprintf_r+0x21c>
 800cd40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd44:	f04f 0901 	mov.w	r9, #1
 800cd48:	4623      	mov	r3, r4
 800cd4a:	469a      	mov	sl, r3
 800cd4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd50:	b10a      	cbz	r2, 800cd56 <_vfiprintf_r+0x86>
 800cd52:	2a25      	cmp	r2, #37	@ 0x25
 800cd54:	d1f9      	bne.n	800cd4a <_vfiprintf_r+0x7a>
 800cd56:	ebba 0b04 	subs.w	fp, sl, r4
 800cd5a:	d00b      	beq.n	800cd74 <_vfiprintf_r+0xa4>
 800cd5c:	465b      	mov	r3, fp
 800cd5e:	4622      	mov	r2, r4
 800cd60:	4629      	mov	r1, r5
 800cd62:	4630      	mov	r0, r6
 800cd64:	f7ff ffa2 	bl	800ccac <__sfputs_r>
 800cd68:	3001      	adds	r0, #1
 800cd6a:	f000 80a7 	beq.w	800cebc <_vfiprintf_r+0x1ec>
 800cd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd70:	445a      	add	r2, fp
 800cd72:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd74:	f89a 3000 	ldrb.w	r3, [sl]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 809f 	beq.w	800cebc <_vfiprintf_r+0x1ec>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd88:	f10a 0a01 	add.w	sl, sl, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	9307      	str	r3, [sp, #28]
 800cd90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd96:	4654      	mov	r4, sl
 800cd98:	2205      	movs	r2, #5
 800cd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9e:	4853      	ldr	r0, [pc, #332]	@ (800ceec <_vfiprintf_r+0x21c>)
 800cda0:	f7f3 fa16 	bl	80001d0 <memchr>
 800cda4:	9a04      	ldr	r2, [sp, #16]
 800cda6:	b9d8      	cbnz	r0, 800cde0 <_vfiprintf_r+0x110>
 800cda8:	06d1      	lsls	r1, r2, #27
 800cdaa:	bf44      	itt	mi
 800cdac:	2320      	movmi	r3, #32
 800cdae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdb2:	0713      	lsls	r3, r2, #28
 800cdb4:	bf44      	itt	mi
 800cdb6:	232b      	movmi	r3, #43	@ 0x2b
 800cdb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc2:	d015      	beq.n	800cdf0 <_vfiprintf_r+0x120>
 800cdc4:	9a07      	ldr	r2, [sp, #28]
 800cdc6:	4654      	mov	r4, sl
 800cdc8:	2000      	movs	r0, #0
 800cdca:	f04f 0c0a 	mov.w	ip, #10
 800cdce:	4621      	mov	r1, r4
 800cdd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd4:	3b30      	subs	r3, #48	@ 0x30
 800cdd6:	2b09      	cmp	r3, #9
 800cdd8:	d94b      	bls.n	800ce72 <_vfiprintf_r+0x1a2>
 800cdda:	b1b0      	cbz	r0, 800ce0a <_vfiprintf_r+0x13a>
 800cddc:	9207      	str	r2, [sp, #28]
 800cdde:	e014      	b.n	800ce0a <_vfiprintf_r+0x13a>
 800cde0:	eba0 0308 	sub.w	r3, r0, r8
 800cde4:	fa09 f303 	lsl.w	r3, r9, r3
 800cde8:	4313      	orrs	r3, r2
 800cdea:	9304      	str	r3, [sp, #16]
 800cdec:	46a2      	mov	sl, r4
 800cdee:	e7d2      	b.n	800cd96 <_vfiprintf_r+0xc6>
 800cdf0:	9b03      	ldr	r3, [sp, #12]
 800cdf2:	1d19      	adds	r1, r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	9103      	str	r1, [sp, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	bfbb      	ittet	lt
 800cdfc:	425b      	neglt	r3, r3
 800cdfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ce02:	9307      	strge	r3, [sp, #28]
 800ce04:	9307      	strlt	r3, [sp, #28]
 800ce06:	bfb8      	it	lt
 800ce08:	9204      	strlt	r2, [sp, #16]
 800ce0a:	7823      	ldrb	r3, [r4, #0]
 800ce0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce0e:	d10a      	bne.n	800ce26 <_vfiprintf_r+0x156>
 800ce10:	7863      	ldrb	r3, [r4, #1]
 800ce12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce14:	d132      	bne.n	800ce7c <_vfiprintf_r+0x1ac>
 800ce16:	9b03      	ldr	r3, [sp, #12]
 800ce18:	1d1a      	adds	r2, r3, #4
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	9203      	str	r2, [sp, #12]
 800ce1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce22:	3402      	adds	r4, #2
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cefc <_vfiprintf_r+0x22c>
 800ce2a:	7821      	ldrb	r1, [r4, #0]
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	4650      	mov	r0, sl
 800ce30:	f7f3 f9ce 	bl	80001d0 <memchr>
 800ce34:	b138      	cbz	r0, 800ce46 <_vfiprintf_r+0x176>
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	eba0 000a 	sub.w	r0, r0, sl
 800ce3c:	2240      	movs	r2, #64	@ 0x40
 800ce3e:	4082      	lsls	r2, r0
 800ce40:	4313      	orrs	r3, r2
 800ce42:	3401      	adds	r4, #1
 800ce44:	9304      	str	r3, [sp, #16]
 800ce46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4a:	4829      	ldr	r0, [pc, #164]	@ (800cef0 <_vfiprintf_r+0x220>)
 800ce4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce50:	2206      	movs	r2, #6
 800ce52:	f7f3 f9bd 	bl	80001d0 <memchr>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d03f      	beq.n	800ceda <_vfiprintf_r+0x20a>
 800ce5a:	4b26      	ldr	r3, [pc, #152]	@ (800cef4 <_vfiprintf_r+0x224>)
 800ce5c:	bb1b      	cbnz	r3, 800cea6 <_vfiprintf_r+0x1d6>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	3307      	adds	r3, #7
 800ce62:	f023 0307 	bic.w	r3, r3, #7
 800ce66:	3308      	adds	r3, #8
 800ce68:	9303      	str	r3, [sp, #12]
 800ce6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce6c:	443b      	add	r3, r7
 800ce6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce70:	e76a      	b.n	800cd48 <_vfiprintf_r+0x78>
 800ce72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce76:	460c      	mov	r4, r1
 800ce78:	2001      	movs	r0, #1
 800ce7a:	e7a8      	b.n	800cdce <_vfiprintf_r+0xfe>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	3401      	adds	r4, #1
 800ce80:	9305      	str	r3, [sp, #20]
 800ce82:	4619      	mov	r1, r3
 800ce84:	f04f 0c0a 	mov.w	ip, #10
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce8e:	3a30      	subs	r2, #48	@ 0x30
 800ce90:	2a09      	cmp	r2, #9
 800ce92:	d903      	bls.n	800ce9c <_vfiprintf_r+0x1cc>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0c6      	beq.n	800ce26 <_vfiprintf_r+0x156>
 800ce98:	9105      	str	r1, [sp, #20]
 800ce9a:	e7c4      	b.n	800ce26 <_vfiprintf_r+0x156>
 800ce9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea0:	4604      	mov	r4, r0
 800cea2:	2301      	movs	r3, #1
 800cea4:	e7f0      	b.n	800ce88 <_vfiprintf_r+0x1b8>
 800cea6:	ab03      	add	r3, sp, #12
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	462a      	mov	r2, r5
 800ceac:	4b12      	ldr	r3, [pc, #72]	@ (800cef8 <_vfiprintf_r+0x228>)
 800ceae:	a904      	add	r1, sp, #16
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f3af 8000 	nop.w
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	1c78      	adds	r0, r7, #1
 800ceba:	d1d6      	bne.n	800ce6a <_vfiprintf_r+0x19a>
 800cebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cebe:	07d9      	lsls	r1, r3, #31
 800cec0:	d405      	bmi.n	800cece <_vfiprintf_r+0x1fe>
 800cec2:	89ab      	ldrh	r3, [r5, #12]
 800cec4:	059a      	lsls	r2, r3, #22
 800cec6:	d402      	bmi.n	800cece <_vfiprintf_r+0x1fe>
 800cec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ceca:	f7ff fd9b 	bl	800ca04 <__retarget_lock_release_recursive>
 800cece:	89ab      	ldrh	r3, [r5, #12]
 800ced0:	065b      	lsls	r3, r3, #25
 800ced2:	f53f af1f 	bmi.w	800cd14 <_vfiprintf_r+0x44>
 800ced6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ced8:	e71e      	b.n	800cd18 <_vfiprintf_r+0x48>
 800ceda:	ab03      	add	r3, sp, #12
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	462a      	mov	r2, r5
 800cee0:	4b05      	ldr	r3, [pc, #20]	@ (800cef8 <_vfiprintf_r+0x228>)
 800cee2:	a904      	add	r1, sp, #16
 800cee4:	4630      	mov	r0, r6
 800cee6:	f000 f879 	bl	800cfdc <_printf_i>
 800ceea:	e7e4      	b.n	800ceb6 <_vfiprintf_r+0x1e6>
 800ceec:	0800d63b 	.word	0x0800d63b
 800cef0:	0800d645 	.word	0x0800d645
 800cef4:	00000000 	.word	0x00000000
 800cef8:	0800ccad 	.word	0x0800ccad
 800cefc:	0800d641 	.word	0x0800d641

0800cf00 <_printf_common>:
 800cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf04:	4616      	mov	r6, r2
 800cf06:	4698      	mov	r8, r3
 800cf08:	688a      	ldr	r2, [r1, #8]
 800cf0a:	690b      	ldr	r3, [r1, #16]
 800cf0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf10:	4293      	cmp	r3, r2
 800cf12:	bfb8      	it	lt
 800cf14:	4613      	movlt	r3, r2
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b10a      	cbz	r2, 800cf26 <_printf_common+0x26>
 800cf22:	3301      	adds	r3, #1
 800cf24:	6033      	str	r3, [r6, #0]
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	0699      	lsls	r1, r3, #26
 800cf2a:	bf42      	ittt	mi
 800cf2c:	6833      	ldrmi	r3, [r6, #0]
 800cf2e:	3302      	addmi	r3, #2
 800cf30:	6033      	strmi	r3, [r6, #0]
 800cf32:	6825      	ldr	r5, [r4, #0]
 800cf34:	f015 0506 	ands.w	r5, r5, #6
 800cf38:	d106      	bne.n	800cf48 <_printf_common+0x48>
 800cf3a:	f104 0a19 	add.w	sl, r4, #25
 800cf3e:	68e3      	ldr	r3, [r4, #12]
 800cf40:	6832      	ldr	r2, [r6, #0]
 800cf42:	1a9b      	subs	r3, r3, r2
 800cf44:	42ab      	cmp	r3, r5
 800cf46:	dc26      	bgt.n	800cf96 <_printf_common+0x96>
 800cf48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf4c:	6822      	ldr	r2, [r4, #0]
 800cf4e:	3b00      	subs	r3, #0
 800cf50:	bf18      	it	ne
 800cf52:	2301      	movne	r3, #1
 800cf54:	0692      	lsls	r2, r2, #26
 800cf56:	d42b      	bmi.n	800cfb0 <_printf_common+0xb0>
 800cf58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf5c:	4641      	mov	r1, r8
 800cf5e:	4638      	mov	r0, r7
 800cf60:	47c8      	blx	r9
 800cf62:	3001      	adds	r0, #1
 800cf64:	d01e      	beq.n	800cfa4 <_printf_common+0xa4>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	6922      	ldr	r2, [r4, #16]
 800cf6a:	f003 0306 	and.w	r3, r3, #6
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	bf02      	ittt	eq
 800cf72:	68e5      	ldreq	r5, [r4, #12]
 800cf74:	6833      	ldreq	r3, [r6, #0]
 800cf76:	1aed      	subeq	r5, r5, r3
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	bf0c      	ite	eq
 800cf7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf80:	2500      	movne	r5, #0
 800cf82:	4293      	cmp	r3, r2
 800cf84:	bfc4      	itt	gt
 800cf86:	1a9b      	subgt	r3, r3, r2
 800cf88:	18ed      	addgt	r5, r5, r3
 800cf8a:	2600      	movs	r6, #0
 800cf8c:	341a      	adds	r4, #26
 800cf8e:	42b5      	cmp	r5, r6
 800cf90:	d11a      	bne.n	800cfc8 <_printf_common+0xc8>
 800cf92:	2000      	movs	r0, #0
 800cf94:	e008      	b.n	800cfa8 <_printf_common+0xa8>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4652      	mov	r2, sl
 800cf9a:	4641      	mov	r1, r8
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	47c8      	blx	r9
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d103      	bne.n	800cfac <_printf_common+0xac>
 800cfa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfac:	3501      	adds	r5, #1
 800cfae:	e7c6      	b.n	800cf3e <_printf_common+0x3e>
 800cfb0:	18e1      	adds	r1, r4, r3
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	2030      	movs	r0, #48	@ 0x30
 800cfb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cfba:	4422      	add	r2, r4
 800cfbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cfc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfc4:	3302      	adds	r3, #2
 800cfc6:	e7c7      	b.n	800cf58 <_printf_common+0x58>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4622      	mov	r2, r4
 800cfcc:	4641      	mov	r1, r8
 800cfce:	4638      	mov	r0, r7
 800cfd0:	47c8      	blx	r9
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d0e6      	beq.n	800cfa4 <_printf_common+0xa4>
 800cfd6:	3601      	adds	r6, #1
 800cfd8:	e7d9      	b.n	800cf8e <_printf_common+0x8e>
	...

0800cfdc <_printf_i>:
 800cfdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe0:	7e0f      	ldrb	r7, [r1, #24]
 800cfe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfe4:	2f78      	cmp	r7, #120	@ 0x78
 800cfe6:	4691      	mov	r9, r2
 800cfe8:	4680      	mov	r8, r0
 800cfea:	460c      	mov	r4, r1
 800cfec:	469a      	mov	sl, r3
 800cfee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cff2:	d807      	bhi.n	800d004 <_printf_i+0x28>
 800cff4:	2f62      	cmp	r7, #98	@ 0x62
 800cff6:	d80a      	bhi.n	800d00e <_printf_i+0x32>
 800cff8:	2f00      	cmp	r7, #0
 800cffa:	f000 80d2 	beq.w	800d1a2 <_printf_i+0x1c6>
 800cffe:	2f58      	cmp	r7, #88	@ 0x58
 800d000:	f000 80b9 	beq.w	800d176 <_printf_i+0x19a>
 800d004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d00c:	e03a      	b.n	800d084 <_printf_i+0xa8>
 800d00e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d012:	2b15      	cmp	r3, #21
 800d014:	d8f6      	bhi.n	800d004 <_printf_i+0x28>
 800d016:	a101      	add	r1, pc, #4	@ (adr r1, 800d01c <_printf_i+0x40>)
 800d018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d01c:	0800d075 	.word	0x0800d075
 800d020:	0800d089 	.word	0x0800d089
 800d024:	0800d005 	.word	0x0800d005
 800d028:	0800d005 	.word	0x0800d005
 800d02c:	0800d005 	.word	0x0800d005
 800d030:	0800d005 	.word	0x0800d005
 800d034:	0800d089 	.word	0x0800d089
 800d038:	0800d005 	.word	0x0800d005
 800d03c:	0800d005 	.word	0x0800d005
 800d040:	0800d005 	.word	0x0800d005
 800d044:	0800d005 	.word	0x0800d005
 800d048:	0800d189 	.word	0x0800d189
 800d04c:	0800d0b3 	.word	0x0800d0b3
 800d050:	0800d143 	.word	0x0800d143
 800d054:	0800d005 	.word	0x0800d005
 800d058:	0800d005 	.word	0x0800d005
 800d05c:	0800d1ab 	.word	0x0800d1ab
 800d060:	0800d005 	.word	0x0800d005
 800d064:	0800d0b3 	.word	0x0800d0b3
 800d068:	0800d005 	.word	0x0800d005
 800d06c:	0800d005 	.word	0x0800d005
 800d070:	0800d14b 	.word	0x0800d14b
 800d074:	6833      	ldr	r3, [r6, #0]
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6032      	str	r2, [r6, #0]
 800d07c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d084:	2301      	movs	r3, #1
 800d086:	e09d      	b.n	800d1c4 <_printf_i+0x1e8>
 800d088:	6833      	ldr	r3, [r6, #0]
 800d08a:	6820      	ldr	r0, [r4, #0]
 800d08c:	1d19      	adds	r1, r3, #4
 800d08e:	6031      	str	r1, [r6, #0]
 800d090:	0606      	lsls	r6, r0, #24
 800d092:	d501      	bpl.n	800d098 <_printf_i+0xbc>
 800d094:	681d      	ldr	r5, [r3, #0]
 800d096:	e003      	b.n	800d0a0 <_printf_i+0xc4>
 800d098:	0645      	lsls	r5, r0, #25
 800d09a:	d5fb      	bpl.n	800d094 <_printf_i+0xb8>
 800d09c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	da03      	bge.n	800d0ac <_printf_i+0xd0>
 800d0a4:	232d      	movs	r3, #45	@ 0x2d
 800d0a6:	426d      	negs	r5, r5
 800d0a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0ac:	4859      	ldr	r0, [pc, #356]	@ (800d214 <_printf_i+0x238>)
 800d0ae:	230a      	movs	r3, #10
 800d0b0:	e011      	b.n	800d0d6 <_printf_i+0xfa>
 800d0b2:	6821      	ldr	r1, [r4, #0]
 800d0b4:	6833      	ldr	r3, [r6, #0]
 800d0b6:	0608      	lsls	r0, r1, #24
 800d0b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0bc:	d402      	bmi.n	800d0c4 <_printf_i+0xe8>
 800d0be:	0649      	lsls	r1, r1, #25
 800d0c0:	bf48      	it	mi
 800d0c2:	b2ad      	uxthmi	r5, r5
 800d0c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0c6:	4853      	ldr	r0, [pc, #332]	@ (800d214 <_printf_i+0x238>)
 800d0c8:	6033      	str	r3, [r6, #0]
 800d0ca:	bf14      	ite	ne
 800d0cc:	230a      	movne	r3, #10
 800d0ce:	2308      	moveq	r3, #8
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0d6:	6866      	ldr	r6, [r4, #4]
 800d0d8:	60a6      	str	r6, [r4, #8]
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	bfa2      	ittt	ge
 800d0de:	6821      	ldrge	r1, [r4, #0]
 800d0e0:	f021 0104 	bicge.w	r1, r1, #4
 800d0e4:	6021      	strge	r1, [r4, #0]
 800d0e6:	b90d      	cbnz	r5, 800d0ec <_printf_i+0x110>
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	d04b      	beq.n	800d184 <_printf_i+0x1a8>
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d0f6:	5dc7      	ldrb	r7, [r0, r7]
 800d0f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0fc:	462f      	mov	r7, r5
 800d0fe:	42bb      	cmp	r3, r7
 800d100:	460d      	mov	r5, r1
 800d102:	d9f4      	bls.n	800d0ee <_printf_i+0x112>
 800d104:	2b08      	cmp	r3, #8
 800d106:	d10b      	bne.n	800d120 <_printf_i+0x144>
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	07df      	lsls	r7, r3, #31
 800d10c:	d508      	bpl.n	800d120 <_printf_i+0x144>
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	6861      	ldr	r1, [r4, #4]
 800d112:	4299      	cmp	r1, r3
 800d114:	bfde      	ittt	le
 800d116:	2330      	movle	r3, #48	@ 0x30
 800d118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d11c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d120:	1b92      	subs	r2, r2, r6
 800d122:	6122      	str	r2, [r4, #16]
 800d124:	f8cd a000 	str.w	sl, [sp]
 800d128:	464b      	mov	r3, r9
 800d12a:	aa03      	add	r2, sp, #12
 800d12c:	4621      	mov	r1, r4
 800d12e:	4640      	mov	r0, r8
 800d130:	f7ff fee6 	bl	800cf00 <_printf_common>
 800d134:	3001      	adds	r0, #1
 800d136:	d14a      	bne.n	800d1ce <_printf_i+0x1f2>
 800d138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d13c:	b004      	add	sp, #16
 800d13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	f043 0320 	orr.w	r3, r3, #32
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	4833      	ldr	r0, [pc, #204]	@ (800d218 <_printf_i+0x23c>)
 800d14c:	2778      	movs	r7, #120	@ 0x78
 800d14e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	6831      	ldr	r1, [r6, #0]
 800d156:	061f      	lsls	r7, r3, #24
 800d158:	f851 5b04 	ldr.w	r5, [r1], #4
 800d15c:	d402      	bmi.n	800d164 <_printf_i+0x188>
 800d15e:	065f      	lsls	r7, r3, #25
 800d160:	bf48      	it	mi
 800d162:	b2ad      	uxthmi	r5, r5
 800d164:	6031      	str	r1, [r6, #0]
 800d166:	07d9      	lsls	r1, r3, #31
 800d168:	bf44      	itt	mi
 800d16a:	f043 0320 	orrmi.w	r3, r3, #32
 800d16e:	6023      	strmi	r3, [r4, #0]
 800d170:	b11d      	cbz	r5, 800d17a <_printf_i+0x19e>
 800d172:	2310      	movs	r3, #16
 800d174:	e7ac      	b.n	800d0d0 <_printf_i+0xf4>
 800d176:	4827      	ldr	r0, [pc, #156]	@ (800d214 <_printf_i+0x238>)
 800d178:	e7e9      	b.n	800d14e <_printf_i+0x172>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	f023 0320 	bic.w	r3, r3, #32
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	e7f6      	b.n	800d172 <_printf_i+0x196>
 800d184:	4616      	mov	r6, r2
 800d186:	e7bd      	b.n	800d104 <_printf_i+0x128>
 800d188:	6833      	ldr	r3, [r6, #0]
 800d18a:	6825      	ldr	r5, [r4, #0]
 800d18c:	6961      	ldr	r1, [r4, #20]
 800d18e:	1d18      	adds	r0, r3, #4
 800d190:	6030      	str	r0, [r6, #0]
 800d192:	062e      	lsls	r6, r5, #24
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	d501      	bpl.n	800d19c <_printf_i+0x1c0>
 800d198:	6019      	str	r1, [r3, #0]
 800d19a:	e002      	b.n	800d1a2 <_printf_i+0x1c6>
 800d19c:	0668      	lsls	r0, r5, #25
 800d19e:	d5fb      	bpl.n	800d198 <_printf_i+0x1bc>
 800d1a0:	8019      	strh	r1, [r3, #0]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6123      	str	r3, [r4, #16]
 800d1a6:	4616      	mov	r6, r2
 800d1a8:	e7bc      	b.n	800d124 <_printf_i+0x148>
 800d1aa:	6833      	ldr	r3, [r6, #0]
 800d1ac:	1d1a      	adds	r2, r3, #4
 800d1ae:	6032      	str	r2, [r6, #0]
 800d1b0:	681e      	ldr	r6, [r3, #0]
 800d1b2:	6862      	ldr	r2, [r4, #4]
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7f3 f80a 	bl	80001d0 <memchr>
 800d1bc:	b108      	cbz	r0, 800d1c2 <_printf_i+0x1e6>
 800d1be:	1b80      	subs	r0, r0, r6
 800d1c0:	6060      	str	r0, [r4, #4]
 800d1c2:	6863      	ldr	r3, [r4, #4]
 800d1c4:	6123      	str	r3, [r4, #16]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1cc:	e7aa      	b.n	800d124 <_printf_i+0x148>
 800d1ce:	6923      	ldr	r3, [r4, #16]
 800d1d0:	4632      	mov	r2, r6
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	47d0      	blx	sl
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d0ad      	beq.n	800d138 <_printf_i+0x15c>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	079b      	lsls	r3, r3, #30
 800d1e0:	d413      	bmi.n	800d20a <_printf_i+0x22e>
 800d1e2:	68e0      	ldr	r0, [r4, #12]
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	4298      	cmp	r0, r3
 800d1e8:	bfb8      	it	lt
 800d1ea:	4618      	movlt	r0, r3
 800d1ec:	e7a6      	b.n	800d13c <_printf_i+0x160>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	4640      	mov	r0, r8
 800d1f6:	47d0      	blx	sl
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d09d      	beq.n	800d138 <_printf_i+0x15c>
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	68e3      	ldr	r3, [r4, #12]
 800d200:	9903      	ldr	r1, [sp, #12]
 800d202:	1a5b      	subs	r3, r3, r1
 800d204:	42ab      	cmp	r3, r5
 800d206:	dcf2      	bgt.n	800d1ee <_printf_i+0x212>
 800d208:	e7eb      	b.n	800d1e2 <_printf_i+0x206>
 800d20a:	2500      	movs	r5, #0
 800d20c:	f104 0619 	add.w	r6, r4, #25
 800d210:	e7f5      	b.n	800d1fe <_printf_i+0x222>
 800d212:	bf00      	nop
 800d214:	0800d64c 	.word	0x0800d64c
 800d218:	0800d65d 	.word	0x0800d65d

0800d21c <__swbuf_r>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	460e      	mov	r6, r1
 800d220:	4614      	mov	r4, r2
 800d222:	4605      	mov	r5, r0
 800d224:	b118      	cbz	r0, 800d22e <__swbuf_r+0x12>
 800d226:	6a03      	ldr	r3, [r0, #32]
 800d228:	b90b      	cbnz	r3, 800d22e <__swbuf_r+0x12>
 800d22a:	f7ff fae7 	bl	800c7fc <__sinit>
 800d22e:	69a3      	ldr	r3, [r4, #24]
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	071a      	lsls	r2, r3, #28
 800d236:	d501      	bpl.n	800d23c <__swbuf_r+0x20>
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b943      	cbnz	r3, 800d24e <__swbuf_r+0x32>
 800d23c:	4621      	mov	r1, r4
 800d23e:	4628      	mov	r0, r5
 800d240:	f000 f82a 	bl	800d298 <__swsetup_r>
 800d244:	b118      	cbz	r0, 800d24e <__swbuf_r+0x32>
 800d246:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d24a:	4638      	mov	r0, r7
 800d24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	6922      	ldr	r2, [r4, #16]
 800d252:	1a98      	subs	r0, r3, r2
 800d254:	6963      	ldr	r3, [r4, #20]
 800d256:	b2f6      	uxtb	r6, r6
 800d258:	4283      	cmp	r3, r0
 800d25a:	4637      	mov	r7, r6
 800d25c:	dc05      	bgt.n	800d26a <__swbuf_r+0x4e>
 800d25e:	4621      	mov	r1, r4
 800d260:	4628      	mov	r0, r5
 800d262:	f7ff fccb 	bl	800cbfc <_fflush_r>
 800d266:	2800      	cmp	r0, #0
 800d268:	d1ed      	bne.n	800d246 <__swbuf_r+0x2a>
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	6022      	str	r2, [r4, #0]
 800d276:	701e      	strb	r6, [r3, #0]
 800d278:	6962      	ldr	r2, [r4, #20]
 800d27a:	1c43      	adds	r3, r0, #1
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d004      	beq.n	800d28a <__swbuf_r+0x6e>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	07db      	lsls	r3, r3, #31
 800d284:	d5e1      	bpl.n	800d24a <__swbuf_r+0x2e>
 800d286:	2e0a      	cmp	r6, #10
 800d288:	d1df      	bne.n	800d24a <__swbuf_r+0x2e>
 800d28a:	4621      	mov	r1, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f7ff fcb5 	bl	800cbfc <_fflush_r>
 800d292:	2800      	cmp	r0, #0
 800d294:	d0d9      	beq.n	800d24a <__swbuf_r+0x2e>
 800d296:	e7d6      	b.n	800d246 <__swbuf_r+0x2a>

0800d298 <__swsetup_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4b29      	ldr	r3, [pc, #164]	@ (800d340 <__swsetup_r+0xa8>)
 800d29c:	4605      	mov	r5, r0
 800d29e:	6818      	ldr	r0, [r3, #0]
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	b118      	cbz	r0, 800d2ac <__swsetup_r+0x14>
 800d2a4:	6a03      	ldr	r3, [r0, #32]
 800d2a6:	b90b      	cbnz	r3, 800d2ac <__swsetup_r+0x14>
 800d2a8:	f7ff faa8 	bl	800c7fc <__sinit>
 800d2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b0:	0719      	lsls	r1, r3, #28
 800d2b2:	d422      	bmi.n	800d2fa <__swsetup_r+0x62>
 800d2b4:	06da      	lsls	r2, r3, #27
 800d2b6:	d407      	bmi.n	800d2c8 <__swsetup_r+0x30>
 800d2b8:	2209      	movs	r2, #9
 800d2ba:	602a      	str	r2, [r5, #0]
 800d2bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2c6:	e033      	b.n	800d330 <__swsetup_r+0x98>
 800d2c8:	0758      	lsls	r0, r3, #29
 800d2ca:	d512      	bpl.n	800d2f2 <__swsetup_r+0x5a>
 800d2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2ce:	b141      	cbz	r1, 800d2e2 <__swsetup_r+0x4a>
 800d2d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2d4:	4299      	cmp	r1, r3
 800d2d6:	d002      	beq.n	800d2de <__swsetup_r+0x46>
 800d2d8:	4628      	mov	r0, r5
 800d2da:	f7ff fbc1 	bl	800ca60 <_free_r>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2e8:	81a3      	strh	r3, [r4, #12]
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	6923      	ldr	r3, [r4, #16]
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f043 0308 	orr.w	r3, r3, #8
 800d2f8:	81a3      	strh	r3, [r4, #12]
 800d2fa:	6923      	ldr	r3, [r4, #16]
 800d2fc:	b94b      	cbnz	r3, 800d312 <__swsetup_r+0x7a>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d308:	d003      	beq.n	800d312 <__swsetup_r+0x7a>
 800d30a:	4621      	mov	r1, r4
 800d30c:	4628      	mov	r0, r5
 800d30e:	f000 f883 	bl	800d418 <__smakebuf_r>
 800d312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d316:	f013 0201 	ands.w	r2, r3, #1
 800d31a:	d00a      	beq.n	800d332 <__swsetup_r+0x9a>
 800d31c:	2200      	movs	r2, #0
 800d31e:	60a2      	str	r2, [r4, #8]
 800d320:	6962      	ldr	r2, [r4, #20]
 800d322:	4252      	negs	r2, r2
 800d324:	61a2      	str	r2, [r4, #24]
 800d326:	6922      	ldr	r2, [r4, #16]
 800d328:	b942      	cbnz	r2, 800d33c <__swsetup_r+0xa4>
 800d32a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d32e:	d1c5      	bne.n	800d2bc <__swsetup_r+0x24>
 800d330:	bd38      	pop	{r3, r4, r5, pc}
 800d332:	0799      	lsls	r1, r3, #30
 800d334:	bf58      	it	pl
 800d336:	6962      	ldrpl	r2, [r4, #20]
 800d338:	60a2      	str	r2, [r4, #8]
 800d33a:	e7f4      	b.n	800d326 <__swsetup_r+0x8e>
 800d33c:	2000      	movs	r0, #0
 800d33e:	e7f7      	b.n	800d330 <__swsetup_r+0x98>
 800d340:	2000003c 	.word	0x2000003c

0800d344 <_raise_r>:
 800d344:	291f      	cmp	r1, #31
 800d346:	b538      	push	{r3, r4, r5, lr}
 800d348:	4605      	mov	r5, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	d904      	bls.n	800d358 <_raise_r+0x14>
 800d34e:	2316      	movs	r3, #22
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d35a:	b112      	cbz	r2, 800d362 <_raise_r+0x1e>
 800d35c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d360:	b94b      	cbnz	r3, 800d376 <_raise_r+0x32>
 800d362:	4628      	mov	r0, r5
 800d364:	f000 f830 	bl	800d3c8 <_getpid_r>
 800d368:	4622      	mov	r2, r4
 800d36a:	4601      	mov	r1, r0
 800d36c:	4628      	mov	r0, r5
 800d36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d372:	f000 b817 	b.w	800d3a4 <_kill_r>
 800d376:	2b01      	cmp	r3, #1
 800d378:	d00a      	beq.n	800d390 <_raise_r+0x4c>
 800d37a:	1c59      	adds	r1, r3, #1
 800d37c:	d103      	bne.n	800d386 <_raise_r+0x42>
 800d37e:	2316      	movs	r3, #22
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	2001      	movs	r0, #1
 800d384:	e7e7      	b.n	800d356 <_raise_r+0x12>
 800d386:	2100      	movs	r1, #0
 800d388:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d38c:	4620      	mov	r0, r4
 800d38e:	4798      	blx	r3
 800d390:	2000      	movs	r0, #0
 800d392:	e7e0      	b.n	800d356 <_raise_r+0x12>

0800d394 <raise>:
 800d394:	4b02      	ldr	r3, [pc, #8]	@ (800d3a0 <raise+0xc>)
 800d396:	4601      	mov	r1, r0
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	f7ff bfd3 	b.w	800d344 <_raise_r>
 800d39e:	bf00      	nop
 800d3a0:	2000003c 	.word	0x2000003c

0800d3a4 <_kill_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4d07      	ldr	r5, [pc, #28]	@ (800d3c4 <_kill_r+0x20>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	602b      	str	r3, [r5, #0]
 800d3b2:	f7f3 ff67 	bl	8001284 <_kill>
 800d3b6:	1c43      	adds	r3, r0, #1
 800d3b8:	d102      	bne.n	800d3c0 <_kill_r+0x1c>
 800d3ba:	682b      	ldr	r3, [r5, #0]
 800d3bc:	b103      	cbz	r3, 800d3c0 <_kill_r+0x1c>
 800d3be:	6023      	str	r3, [r4, #0]
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20005440 	.word	0x20005440

0800d3c8 <_getpid_r>:
 800d3c8:	f7f3 bf54 	b.w	8001274 <_getpid>

0800d3cc <__swhatbuf_r>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d4:	2900      	cmp	r1, #0
 800d3d6:	b096      	sub	sp, #88	@ 0x58
 800d3d8:	4615      	mov	r5, r2
 800d3da:	461e      	mov	r6, r3
 800d3dc:	da0d      	bge.n	800d3fa <__swhatbuf_r+0x2e>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3e4:	f04f 0100 	mov.w	r1, #0
 800d3e8:	bf14      	ite	ne
 800d3ea:	2340      	movne	r3, #64	@ 0x40
 800d3ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	6031      	str	r1, [r6, #0]
 800d3f4:	602b      	str	r3, [r5, #0]
 800d3f6:	b016      	add	sp, #88	@ 0x58
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
 800d3fa:	466a      	mov	r2, sp
 800d3fc:	f000 f848 	bl	800d490 <_fstat_r>
 800d400:	2800      	cmp	r0, #0
 800d402:	dbec      	blt.n	800d3de <__swhatbuf_r+0x12>
 800d404:	9901      	ldr	r1, [sp, #4]
 800d406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d40a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d40e:	4259      	negs	r1, r3
 800d410:	4159      	adcs	r1, r3
 800d412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d416:	e7eb      	b.n	800d3f0 <__swhatbuf_r+0x24>

0800d418 <__smakebuf_r>:
 800d418:	898b      	ldrh	r3, [r1, #12]
 800d41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d41c:	079d      	lsls	r5, r3, #30
 800d41e:	4606      	mov	r6, r0
 800d420:	460c      	mov	r4, r1
 800d422:	d507      	bpl.n	800d434 <__smakebuf_r+0x1c>
 800d424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	6123      	str	r3, [r4, #16]
 800d42c:	2301      	movs	r3, #1
 800d42e:	6163      	str	r3, [r4, #20]
 800d430:	b003      	add	sp, #12
 800d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d434:	ab01      	add	r3, sp, #4
 800d436:	466a      	mov	r2, sp
 800d438:	f7ff ffc8 	bl	800d3cc <__swhatbuf_r>
 800d43c:	9f00      	ldr	r7, [sp, #0]
 800d43e:	4605      	mov	r5, r0
 800d440:	4639      	mov	r1, r7
 800d442:	4630      	mov	r0, r6
 800d444:	f7ff f856 	bl	800c4f4 <_malloc_r>
 800d448:	b948      	cbnz	r0, 800d45e <__smakebuf_r+0x46>
 800d44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44e:	059a      	lsls	r2, r3, #22
 800d450:	d4ee      	bmi.n	800d430 <__smakebuf_r+0x18>
 800d452:	f023 0303 	bic.w	r3, r3, #3
 800d456:	f043 0302 	orr.w	r3, r3, #2
 800d45a:	81a3      	strh	r3, [r4, #12]
 800d45c:	e7e2      	b.n	800d424 <__smakebuf_r+0xc>
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	6020      	str	r0, [r4, #0]
 800d462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d46e:	b15b      	cbz	r3, 800d488 <__smakebuf_r+0x70>
 800d470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d474:	4630      	mov	r0, r6
 800d476:	f000 f81d 	bl	800d4b4 <_isatty_r>
 800d47a:	b128      	cbz	r0, 800d488 <__smakebuf_r+0x70>
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	f023 0303 	bic.w	r3, r3, #3
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	431d      	orrs	r5, r3
 800d48c:	81a5      	strh	r5, [r4, #12]
 800d48e:	e7cf      	b.n	800d430 <__smakebuf_r+0x18>

0800d490 <_fstat_r>:
 800d490:	b538      	push	{r3, r4, r5, lr}
 800d492:	4d07      	ldr	r5, [pc, #28]	@ (800d4b0 <_fstat_r+0x20>)
 800d494:	2300      	movs	r3, #0
 800d496:	4604      	mov	r4, r0
 800d498:	4608      	mov	r0, r1
 800d49a:	4611      	mov	r1, r2
 800d49c:	602b      	str	r3, [r5, #0]
 800d49e:	f7f3 ff51 	bl	8001344 <_fstat>
 800d4a2:	1c43      	adds	r3, r0, #1
 800d4a4:	d102      	bne.n	800d4ac <_fstat_r+0x1c>
 800d4a6:	682b      	ldr	r3, [r5, #0]
 800d4a8:	b103      	cbz	r3, 800d4ac <_fstat_r+0x1c>
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20005440 	.word	0x20005440

0800d4b4 <_isatty_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4d06      	ldr	r5, [pc, #24]	@ (800d4d0 <_isatty_r+0x1c>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f3 ff50 	bl	8001364 <_isatty>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_isatty_r+0x1a>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_isatty_r+0x1a>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20005440 	.word	0x20005440

0800d4d4 <_init>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr

0800d4e0 <_fini>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	bf00      	nop
 800d4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4e6:	bc08      	pop	{r3}
 800d4e8:	469e      	mov	lr, r3
 800d4ea:	4770      	bx	lr
