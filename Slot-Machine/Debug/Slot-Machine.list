
Slot-Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007ab4  08007ab4  00008ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007afc  08007afc  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007afc  08007afc  00008afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b04  08007b04  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b04  08007b04  00008b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007b0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00004e44  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004e54  20004e54  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001afe9  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b6  00000000  00000000  00024029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  000281e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e6  00000000  00000000  00029928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043d3  00000000  00000000  0002ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b903  00000000  00000000  0002eee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4da5  00000000  00000000  0004a7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f589  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062a4  00000000  00000000  0011f5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00125870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a9c 	.word	0x08007a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007a9c 	.word	0x08007a9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbef 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f81d 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f919 	bl	8000704 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f883 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8af 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8dd 	bl	8000698 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004de:	f004 fcf5 	bl	8004ecc <osKernelInitialize>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task, "Test Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY +1, NULL);
 80004e2:	2300      	movs	r3, #0
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	4904      	ldr	r1, [pc, #16]	@ (8000500 <main+0x40>)
 80004f0:	4804      	ldr	r0, [pc, #16]	@ (8000504 <main+0x44>)
 80004f2:	f005 fbb1 	bl	8005c58 <xTaskCreate>
    vTaskStartScheduler();
 80004f6:	f005 fd2b 	bl	8005f50 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fa:	bf00      	nop
 80004fc:	e7fd      	b.n	80004fa <main+0x3a>
 80004fe:	bf00      	nop
 8000500:	08007ac0 	.word	0x08007ac0
 8000504:	080008fd 	.word	0x080008fd

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f007 fa86 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa54 	bl	8003a3c <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9d5 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fcb5 	bl	8003f2c <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9be 	bl	8000948 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fc2b 	bl	8002e74 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f990 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000002c 	.word	0x2000002c
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2S3_Init+0x54>)
 8000678:	f002 fd40 	bl	80030fc <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f961 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000080 	.word	0x20000080
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f003 ff6d 	bl	80045c8 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f928 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	40013000 	.word	0x40013000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b71      	ldr	r3, [pc, #452]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a70      	ldr	r2, [pc, #448]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b6e      	ldr	r3, [pc, #440]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b6a      	ldr	r3, [pc, #424]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a69      	ldr	r2, [pc, #420]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b67      	ldr	r3, [pc, #412]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b63      	ldr	r3, [pc, #396]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a62      	ldr	r2, [pc, #392]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b60      	ldr	r3, [pc, #384]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b5c      	ldr	r3, [pc, #368]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a5b      	ldr	r2, [pc, #364]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b59      	ldr	r3, [pc, #356]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b55      	ldr	r3, [pc, #340]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a54      	ldr	r2, [pc, #336]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b52      	ldr	r3, [pc, #328]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b4e      	ldr	r3, [pc, #312]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a4d      	ldr	r2, [pc, #308]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b4b      	ldr	r3, [pc, #300]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4848      	ldr	r0, [pc, #288]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80007c8:	f000 fd7a 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	4846      	ldr	r0, [pc, #280]	@ (80008ec <MX_GPIO_Init+0x1e8>)
 80007d2:	f000 fd75 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d6:	2200      	movs	r2, #0
 80007d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007dc:	4844      	ldr	r0, [pc, #272]	@ (80008f0 <MX_GPIO_Init+0x1ec>)
 80007de:	f000 fd6f 	bl	80012c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e2:	2308      	movs	r3, #8
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	483b      	ldr	r0, [pc, #236]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80007fa:	f000 fbad 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4835      	ldr	r0, [pc, #212]	@ (80008ec <MX_GPIO_Init+0x1e8>)
 8000816:	f000 fb9f 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082a:	2305      	movs	r3, #5
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	482d      	ldr	r0, [pc, #180]	@ (80008ec <MX_GPIO_Init+0x1e8>)
 8000836:	f000 fb8f 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4829      	ldr	r0, [pc, #164]	@ (80008f4 <MX_GPIO_Init+0x1f0>)
 800084e:	f000 fb83 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000852:	2304      	movs	r3, #4
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4824      	ldr	r0, [pc, #144]	@ (80008f8 <MX_GPIO_Init+0x1f4>)
 8000866:	f000 fb77 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800086a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	481c      	ldr	r0, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0x1f4>)
 8000888:	f000 fb66 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000890:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_GPIO_Init+0x1ec>)
 80008a6:	f000 fb57 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008aa:	2320      	movs	r3, #32
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fb4b 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80008d8:	f000 fb3e 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	@ 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <task>:

/* USER CODE BEGIN 4 */

void task(void *args) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	for(;;) {
		HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000904:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <task+0x44>)
 800090a:	f000 fcf2 	bl	80012f2 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 800090e:	2101      	movs	r1, #1
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <task+0x48>)
 8000912:	f000 fcbd 	bl	8001290 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d106      	bne.n	800092a <task+0x2e>
			HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <task+0x44>)
 8000924:	f000 fccc 	bl	80012c0 <HAL_GPIO_WritePin>
 8000928:	e005      	b.n	8000936 <task+0x3a>
		}
		else {
			HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <task+0x44>)
 8000932:	f000 fcc5 	bl	80012c0 <HAL_GPIO_WritePin>
		}
		vTaskDelay(250);
 8000936:	20fa      	movs	r0, #250	@ 0xfa
 8000938:	f005 fad4 	bl	8005ee4 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 800093c:	e7e2      	b.n	8000904 <task+0x8>
 800093e:	bf00      	nop
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020000 	.word	0x40020000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fab4 	bl	8000f06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <HAL_I2C_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12c      	bne.n	8000a28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <HAL_I2C_MspInit+0x8c>)
 8000a08:	f000 faa6 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	@ 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <HAL_I2S_MspInit+0xf0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d15a      	bne.n	8000b22 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a70:	23c0      	movs	r3, #192	@ 0xc0
 8000a72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fc61 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a88:	f7ff ff5e 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a26      	ldr	r2, [pc, #152]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af0:	2306      	movs	r3, #6
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <HAL_I2S_MspInit+0xf8>)
 8000afc:	f000 fa2c 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b12:	2306      	movs	r3, #6
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <HAL_I2S_MspInit+0xfc>)
 8000b1e:	f000 fa1b 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	@ 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40003c00 	.word	0x40003c00
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020800 	.word	0x40020800

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_SPI_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b96:	23e0      	movs	r3, #224	@ 0xe0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_SPI_MspInit+0x8c>)
 8000bb2:	f000 f9d1 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c06:	f000 f8a1 	bl	8000d4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c0a:	f005 fdef 	bl	80067ec <xTaskGetSchedulerState>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d001      	beq.n	8000c18 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c14:	f006 fbe8 	bl	80073e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f000 fb80 	bl	8001326 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20004a74 	.word	0x20004a74

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f006 fed9 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc1b 	bl	80004c0 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c98:	08007b0c 	.word	0x08007b0c
  ldr r2, =_sbss
 8000c9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca0:	20004e54 	.word	0x20004e54

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f90d 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe3a 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f917 	bl	8000f3e <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d28:	f000 f8ed 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000120 	.word	0x20000120

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000120 	.word	0x20000120

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e16b      	b.n	800124c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 815a 	bne.w	8001246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b4 	beq.w	8001246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b60      	ldr	r3, [pc, #384]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001268 <HAL_GPIO_Init+0x310>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	@ (8001270 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	@ (8001274 <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	@ (8001278 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4e      	ldr	r2, [pc, #312]	@ (800127c <HAL_GPIO_Init+0x324>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4d      	ldr	r2, [pc, #308]	@ (8001280 <HAL_GPIO_Init+0x328>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4c      	ldr	r2, [pc, #304]	@ (8001284 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4b      	ldr	r2, [pc, #300]	@ (8001288 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x20a>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	@ (8001268 <HAL_GPIO_Init+0x310>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_GPIO_Init+0x334>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae90 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	041a      	lsls	r2, r3, #16
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43d9      	mvns	r1, r3
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	400b      	ands	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fada 	bl	80048f6 <USB_GetMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	f040 80fb 	bne.w	8001540 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fa9d 	bl	800488e <USB_ReadInterrupts>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80f1 	beq.w	800153e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fa94 	bl	800488e <USB_ReadInterrupts>
 8001366:	4603      	mov	r3, r0
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001370:	d104      	bne.n	800137c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800137a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa84 	bl	800488e <USB_ReadInterrupts>
 8001386:	4603      	mov	r3, r0
 8001388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001390:	d104      	bne.n	800139c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800139a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fa74 	bl	800488e <USB_ReadInterrupts>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80013b0:	d104      	bne.n	80013bc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fa64 	bl	800488e <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d103      	bne.n	80013d8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2202      	movs	r2, #2
 80013d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fa56 	bl	800488e <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ec:	d120      	bne.n	8001430 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013f6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d113      	bne.n	8001430 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001408:	2110      	movs	r1, #16
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f003 f987 	bl	800471e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001410:	6938      	ldr	r0, [r7, #16]
 8001412:	f003 f9b6 	bl	8004782 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a5b      	ldrb	r3, [r3, #9]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d105      	bne.n	800142a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fa74 	bl	8004912 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f006 fa78 	bl	8007920 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fa2a 	bl	800488e <USB_ReadInterrupts>
 800143a:	4603      	mov	r3, r0
 800143c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001444:	d102      	bne.n	800144c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f001 fca1 	bl	8002d8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fa1c 	bl	800488e <USB_ReadInterrupts>
 8001456:	4603      	mov	r3, r0
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b08      	cmp	r3, #8
 800145e:	d106      	bne.n	800146e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f006 fa41 	bl	80078e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2208      	movs	r2, #8
 800146c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa0b 	bl	800488e <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001482:	d139      	bne.n	80014f8 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fa7f 	bl	800498c <USB_HC_ReadInterrupt>
 800148e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e025      	b.n	80014e2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d018      	beq.n	80014dc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014c0:	d106      	bne.n	80014d0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f859 	bl	8001580 <HCD_HC_IN_IRQHandler>
 80014ce:	e005      	b.n	80014dc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 febb 	bl	8002252 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	461a      	mov	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d3d3      	bcc.n	8001496 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f9c6 	bl	800488e <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b10      	cmp	r3, #16
 800150a:	d101      	bne.n	8001510 <HAL_HCD_IRQHandler+0x1ea>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_HCD_IRQHandler+0x1ec>
 8001510:	2300      	movs	r3, #0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d014      	beq.n	8001540 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699a      	ldr	r2, [r3, #24]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0210 	bic.w	r2, r2, #16
 8001524:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fb52 	bl	8002bd0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0210 	orr.w	r2, r2, #16
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e000      	b.n	8001540 <HAL_HCD_IRQHandler+0x21a>
      return;
 800153e:	bf00      	nop
    }
  }
}
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_HCD_Stop+0x16>
 8001558:	2302      	movs	r3, #2
 800155a:	e00d      	b.n	8001578 <HAL_HCD_Stop+0x32>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fb40 	bl	8004bee <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 f988 	bl	80048b4 <USB_ReadChInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d11a      	bne.n	80015e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ba:	461a      	mov	r2, r3
 80015bc:	2304      	movs	r3, #4
 80015be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	334d      	adds	r3, #77	@ 0x4d
 80015d0:	2207      	movs	r2, #7
 80015d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 f9e6 	bl	80049ae <USB_HC_Halt>
 80015e2:	e09e      	b.n	8001722 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 f961 	bl	80048b4 <USB_ReadChInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015fc:	d11b      	bne.n	8001636 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4413      	add	r3, r2
 8001606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800160a:	461a      	mov	r2, r3
 800160c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001610:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	334d      	adds	r3, #77	@ 0x4d
 8001622:	2208      	movs	r2, #8
 8001624:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f9bd 	bl	80049ae <USB_HC_Halt>
 8001634:	e075      	b.n	8001722 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f003 f938 	bl	80048b4 <USB_ReadChInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11a      	bne.n	8001684 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4413      	add	r3, r2
 8001656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800165a:	461a      	mov	r2, r3
 800165c:	2308      	movs	r3, #8
 800165e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	334d      	adds	r3, #77	@ 0x4d
 8001670:	2206      	movs	r2, #6
 8001672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f996 	bl	80049ae <USB_HC_Halt>
 8001682:	e04e      	b.n	8001722 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f911 	bl	80048b4 <USB_ReadChInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800169c:	d11b      	bne.n	80016d6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016aa:	461a      	mov	r2, r3
 80016ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	334d      	adds	r3, #77	@ 0x4d
 80016c2:	2209      	movs	r2, #9
 80016c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f96d 	bl	80049ae <USB_HC_Halt>
 80016d4:	e025      	b.n	8001722 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f8e8 	bl	80048b4 <USB_ReadChInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ea:	2b80      	cmp	r3, #128	@ 0x80
 80016ec:	d119      	bne.n	8001722 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016fa:	461a      	mov	r2, r3
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	334d      	adds	r3, #77	@ 0x4d
 8001710:	2207      	movs	r2, #7
 8001712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f003 f946 	bl	80049ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f003 f8c2 	bl	80048b4 <USB_ReadChInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800173a:	d112      	bne.n	8001762 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f003 f932 	bl	80049ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4413      	add	r3, r2
 8001752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001756:	461a      	mov	r2, r3
 8001758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175c:	6093      	str	r3, [r2, #8]
 800175e:	f000 bd75 	b.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f8a2 	bl	80048b4 <USB_ReadChInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 8128 	bne.w	80019cc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001788:	461a      	mov	r2, r3
 800178a:	2320      	movs	r3, #32
 800178c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	331b      	adds	r3, #27
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d119      	bne.n	80017d8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	331b      	adds	r3, #27
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	0151      	lsls	r1, r2, #5
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	440a      	add	r2, r1
 80017ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	799b      	ldrb	r3, [r3, #6]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01b      	beq.n	8001818 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3330      	adds	r3, #48	@ 0x30
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	1ac9      	subs	r1, r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4403      	add	r3, r0
 8001814:	3338      	adds	r3, #56	@ 0x38
 8001816:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	334d      	adds	r3, #77	@ 0x4d
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3344      	adds	r3, #68	@ 0x44
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4413      	add	r3, r2
 8001848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800184c:	461a      	mov	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	3326      	adds	r3, #38	@ 0x26
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00a      	beq.n	800187e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3326      	adds	r3, #38	@ 0x26
 8001878:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800187a:	2b02      	cmp	r3, #2
 800187c:	d110      	bne.n	80018a0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f891 	bl	80049ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001898:	461a      	mov	r2, r3
 800189a:	2310      	movs	r3, #16
 800189c:	6093      	str	r3, [r2, #8]
 800189e:	e03d      	b.n	800191c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3326      	adds	r3, #38	@ 0x26
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d00a      	beq.n	80018cc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3326      	adds	r3, #38	@ 0x26
 80018c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d127      	bne.n	800191c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	0151      	lsls	r1, r2, #5
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	440a      	add	r2, r1
 80018e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80018e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	334c      	adds	r3, #76	@ 0x4c
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	334c      	adds	r3, #76	@ 0x4c
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f006 f810 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	799b      	ldrb	r3, [r3, #6]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d13b      	bne.n	800199c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3338      	adds	r3, #56	@ 0x38
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	3328      	adds	r3, #40	@ 0x28
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	440b      	add	r3, r1
 800194a:	1e59      	subs	r1, r3, #1
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4403      	add	r3, r0
 800195a:	3328      	adds	r3, #40	@ 0x28
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8470 	beq.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	333c      	adds	r3, #60	@ 0x3c
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2d8      	uxtb	r0, r3
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	333c      	adds	r3, #60	@ 0x3c
 8001994:	4602      	mov	r2, r0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	f000 bc58 	b.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	333c      	adds	r3, #60	@ 0x3c
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2d8      	uxtb	r0, r3
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	333c      	adds	r3, #60	@ 0x3c
 80019c4:	4602      	mov	r2, r0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	f000 bc40 	b.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 ff6d 	bl	80048b4 <USB_ReadChInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d131      	bne.n	8001a48 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019f0:	461a      	mov	r2, r3
 80019f2:	2320      	movs	r3, #32
 80019f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	331a      	adds	r3, #26
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	f040 841f 	bne.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	331b      	adds	r3, #27
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	334d      	adds	r3, #77	@ 0x4d
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ffb5 	bl	80049ae <USB_HC_Halt>
 8001a44:	f000 bc02 	b.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 ff2f 	bl	80048b4 <USB_ReadChInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f040 8305 	bne.w	800206c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2302      	movs	r3, #2
 8001a72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	334d      	adds	r3, #77	@ 0x4d
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d114      	bne.n	8001ab4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	334d      	adds	r3, #77	@ 0x4d
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	334c      	adds	r3, #76	@ 0x4c
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e2cc      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	334d      	adds	r3, #77	@ 0x4d
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d114      	bne.n	8001af4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	334d      	adds	r3, #77	@ 0x4d
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	334c      	adds	r3, #76	@ 0x4c
 8001aee:	2205      	movs	r2, #5
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e2ac      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	334d      	adds	r3, #77	@ 0x4d
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	d00b      	beq.n	8001b22 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	334d      	adds	r3, #77	@ 0x4d
 8001b1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	f040 80a6 	bne.w	8001c6e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	334d      	adds	r3, #77	@ 0x4d
 8001b32:	2202      	movs	r2, #2
 8001b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3344      	adds	r3, #68	@ 0x44
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1c59      	adds	r1, r3, #1
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4403      	add	r3, r0
 8001b56:	3344      	adds	r3, #68	@ 0x44
 8001b58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3344      	adds	r3, #68	@ 0x44
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d943      	bls.n	8001bf8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3344      	adds	r3, #68	@ 0x44
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	331a      	adds	r3, #26
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d123      	bne.n	8001be2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	331b      	adds	r3, #27
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	331c      	adds	r3, #28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	0151      	lsls	r1, r2, #5
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	440a      	add	r2, r1
 8001bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	334c      	adds	r3, #76	@ 0x4c
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001bf6:	e229      	b.n	800204c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	334c      	adds	r3, #76	@ 0x4c
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3326      	adds	r3, #38	@ 0x26
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3326      	adds	r3, #38	@ 0x26
 8001c32:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 8209 	bne.w	800204c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c50:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c58:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c6c:	e1ee      	b.n	800204c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	334d      	adds	r3, #77	@ 0x4d
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	f040 80c8 	bne.w	8001e16 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	334d      	adds	r3, #77	@ 0x4d
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	331b      	adds	r3, #27
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 81ce 	bne.w	800204e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3326      	adds	r3, #38	@ 0x26
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d16b      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3348      	adds	r3, #72	@ 0x48
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4403      	add	r3, r0
 8001ce8:	3348      	adds	r3, #72	@ 0x48
 8001cea:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3348      	adds	r3, #72	@ 0x48
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d943      	bls.n	8001d8a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3348      	adds	r3, #72	@ 0x48
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	331b      	adds	r3, #27
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3344      	adds	r3, #68	@ 0x44
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d809      	bhi.n	8001d54 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	331c      	adds	r3, #28
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	0151      	lsls	r1, r2, #5
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	440a      	add	r2, r1
 8001d6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d72:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	334c      	adds	r3, #76	@ 0x4c
 8001d84:	2204      	movs	r2, #4
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e014      	b.n	8001db4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	334c      	adds	r3, #76	@ 0x4c
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e009      	b.n	8001db4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	334c      	adds	r3, #76	@ 0x4c
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3326      	adds	r3, #38	@ 0x26
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3326      	adds	r3, #38	@ 0x26
 8001dda:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f040 8136 	bne.w	800204e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001df8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e00:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e11b      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	334d      	adds	r3, #77	@ 0x4d
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	f040 8081 	bne.w	8001f30 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	334d      	adds	r3, #77	@ 0x4d
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	331b      	adds	r3, #27
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 80fa 	bne.w	800204e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	334c      	adds	r3, #76	@ 0x4c
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	0151      	lsls	r1, r2, #5
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	440a      	add	r2, r1
 8001e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eac:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	0151      	lsls	r1, r2, #5
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ec8:	f023 0320 	bic.w	r3, r3, #32
 8001ecc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3326      	adds	r3, #38	@ 0x26
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3326      	adds	r3, #38	@ 0x26
 8001ef4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	f040 80a9 	bne.w	800204e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e08e      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	334d      	adds	r3, #77	@ 0x4d
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d143      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	334d      	adds	r3, #77	@ 0x4d
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	334c      	adds	r3, #76	@ 0x4c
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3326      	adds	r3, #38	@ 0x26
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3326      	adds	r3, #38	@ 0x26
 8001f94:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d159      	bne.n	800204e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001fb0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e03f      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	334d      	adds	r3, #77	@ 0x4d
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d126      	bne.n	8002032 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	334d      	adds	r3, #77	@ 0x4d
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3344      	adds	r3, #68	@ 0x44
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4403      	add	r3, r0
 8002018:	3344      	adds	r3, #68	@ 0x44
 800201a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	334c      	adds	r3, #76	@ 0x4c
 800202c:	2204      	movs	r2, #4
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e00d      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334d      	adds	r3, #77	@ 0x4d
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b02      	cmp	r3, #2
 8002046:	f000 8100 	beq.w	800224a <HCD_HC_IN_IRQHandler+0xcca>
 800204a:	e000      	b.n	800204e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800204c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	334c      	adds	r3, #76	@ 0x4c
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f005 fc69 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
 800206a:	e0ef      	b.n	800224c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fc1d 	bl	80048b4 <USB_ReadChInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002080:	2b40      	cmp	r3, #64	@ 0x40
 8002082:	d12f      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	2340      	movs	r3, #64	@ 0x40
 8002094:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	334d      	adds	r3, #77	@ 0x4d
 80020a6:	2205      	movs	r2, #5
 80020a8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	331a      	adds	r3, #26
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3344      	adds	r3, #68	@ 0x44
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fc66 	bl	80049ae <USB_HC_Halt>
 80020e2:	e0b3      	b.n	800224c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fbe1 	bl	80048b4 <USB_ReadChInterrupts>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	f040 80a7 	bne.w	800224c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3326      	adds	r3, #38	@ 0x26
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d11b      	bne.n	800214c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3344      	adds	r3, #68	@ 0x44
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	334d      	adds	r3, #77	@ 0x4d
 8002138:	2204      	movs	r2, #4
 800213a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fc32 	bl	80049ae <USB_HC_Halt>
 800214a:	e03f      	b.n	80021cc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3326      	adds	r3, #38	@ 0x26
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3326      	adds	r3, #38	@ 0x26
 8002172:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002174:	2b02      	cmp	r3, #2
 8002176:	d129      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3344      	adds	r3, #68	@ 0x44
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	799b      	ldrb	r3, [r3, #6]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HCD_HC_IN_IRQHandler+0xc2a>
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	331b      	adds	r3, #27
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d110      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	334d      	adds	r3, #77	@ 0x4d
 80021ba:	2204      	movs	r2, #4
 80021bc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fbf1 	bl	80049ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	331b      	adds	r3, #27
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d129      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	331b      	adds	r3, #27
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	440a      	add	r2, r1
 800222c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	2310      	movs	r3, #16
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e000      	b.n	800224c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800224a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fb1f 	bl	80048b4 <USB_ReadChInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	2304      	movs	r3, #4
 8002290:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	334d      	adds	r3, #77	@ 0x4d
 80022a2:	2207      	movs	r2, #7
 80022a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fb7d 	bl	80049ae <USB_HC_Halt>
 80022b4:	f000 bc89 	b.w	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 faf7 	bl	80048b4 <USB_ReadChInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	f040 8082 	bne.w	80023d6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2320      	movs	r3, #32
 80022e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3319      	adds	r3, #25
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d124      	bne.n	8002344 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3319      	adds	r3, #25
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334c      	adds	r3, #76	@ 0x4c
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334d      	adds	r3, #77	@ 0x4d
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fb35 	bl	80049ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	331a      	adds	r3, #26
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	f040 8437 	bne.w	8002bca <HCD_HC_OUT_IRQHandler+0x978>
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	331b      	adds	r3, #27
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 842b 	bne.w	8002bca <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3326      	adds	r3, #38	@ 0x26
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d009      	beq.n	800239e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	331b      	adds	r3, #27
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334d      	adds	r3, #77	@ 0x4d
 80023ae:	2203      	movs	r2, #3
 80023b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 faf7 	bl	80049ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3344      	adds	r3, #68	@ 0x44
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e3f9      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fa68 	bl	80048b4 <USB_ReadChInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ee:	d111      	bne.n	8002414 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002402:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f002 face 	bl	80049ae <USB_HC_Halt>
 8002412:	e3da      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fa49 	bl	80048b4 <USB_ReadChInterrupts>
 8002422:	4603      	mov	r3, r0
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d168      	bne.n	80024fe <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3344      	adds	r3, #68	@ 0x44
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fa33 	bl	80048b4 <USB_ReadChInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d112      	bne.n	800247e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3319      	adds	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2340      	movs	r3, #64	@ 0x40
 800247c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	331b      	adds	r3, #27
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d019      	beq.n	80024c8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	331b      	adds	r3, #27
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	0151      	lsls	r1, r2, #5
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	440a      	add	r2, r1
 80024be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334d      	adds	r3, #77	@ 0x4d
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fa59 	bl	80049ae <USB_HC_Halt>
 80024fc:	e365      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f9d4 	bl	80048b4 <USB_ReadChInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	2b40      	cmp	r3, #64	@ 0x40
 8002514:	d139      	bne.n	800258a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	334d      	adds	r3, #77	@ 0x4d
 8002526:	2205      	movs	r2, #5
 8002528:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	331a      	adds	r3, #26
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3319      	adds	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3344      	adds	r3, #68	@ 0x44
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f002 fa1c 	bl	80049ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	2340      	movs	r3, #64	@ 0x40
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	e31f      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f002 f98e 	bl	80048b4 <USB_ReadChInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11a      	bne.n	80025d8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2308      	movs	r3, #8
 80025b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334d      	adds	r3, #77	@ 0x4d
 80025c4:	2206      	movs	r2, #6
 80025c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 f9ec 	bl	80049ae <USB_HC_Halt>
 80025d6:	e2f8      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 f967 	bl	80048b4 <USB_ReadChInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d144      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3344      	adds	r3, #68	@ 0x44
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	334d      	adds	r3, #77	@ 0x4d
 8002614:	2204      	movs	r2, #4
 8002616:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3319      	adds	r3, #25
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3318      	adds	r3, #24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3319      	adds	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f002 f9a4 	bl	80049ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2310      	movs	r3, #16
 8002676:	6093      	str	r3, [r2, #8]
 8002678:	e2a7      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f002 f916 	bl	80048b4 <USB_ReadChInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b80      	cmp	r3, #128	@ 0x80
 8002690:	f040 8083 	bne.w	800279a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	799b      	ldrb	r3, [r3, #6]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334d      	adds	r3, #77	@ 0x4d
 80026ac:	2207      	movs	r2, #7
 80026ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 f978 	bl	80049ae <USB_HC_Halt>
 80026be:	e062      	b.n	8002786 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3344      	adds	r3, #68	@ 0x44
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	1c59      	adds	r1, r3, #1
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4403      	add	r3, r0
 80026e0:	3344      	adds	r3, #68	@ 0x44
 80026e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3344      	adds	r3, #68	@ 0x44
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d922      	bls.n	8002740 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3344      	adds	r3, #68	@ 0x44
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334c      	adds	r3, #76	@ 0x4c
 800271e:	2204      	movs	r2, #4
 8002720:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	334c      	adds	r3, #76	@ 0x4c
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f005 f8ff 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
 800273e:	e022      	b.n	8002786 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334c      	adds	r3, #76	@ 0x4c
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800276a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002772:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	e217      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 f886 	bl	80048b4 <USB_ReadChInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	d11b      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	334d      	adds	r3, #77	@ 0x4d
 80027c4:	2209      	movs	r2, #9
 80027c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 f8ec 	bl	80049ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e1ee      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 f85d 	bl	80048b4 <USB_ReadChInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 81df 	bne.w	8002bc4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2302      	movs	r3, #2
 8002816:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	@ 0x4d
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 8093 	bne.w	8002956 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334d      	adds	r3, #77	@ 0x4d
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334c      	adds	r3, #76	@ 0x4c
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d00b      	beq.n	8002886 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3326      	adds	r3, #38	@ 0x26
 800287e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002880:	2b03      	cmp	r3, #3
 8002882:	f040 8190 	bne.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	799b      	ldrb	r3, [r3, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	333d      	adds	r3, #61	@ 0x3d
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	333d      	adds	r3, #61	@ 0x3d
 80028b6:	4602      	mov	r2, r0
 80028b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	799b      	ldrb	r3, [r3, #6]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 8171 	bne.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3334      	adds	r3, #52	@ 0x34
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8165 	beq.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3334      	adds	r3, #52	@ 0x34
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4403      	add	r3, r0
 80028fc:	3328      	adds	r3, #40	@ 0x28
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	440b      	add	r3, r1
 8002902:	1e59      	subs	r1, r3, #1
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	3328      	adds	r3, #40	@ 0x28
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	fbb1 f3f3 	udiv	r3, r1, r3
 800291a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 813f 	beq.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	333d      	adds	r3, #61	@ 0x3d
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2d8      	uxtb	r0, r3
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	333d      	adds	r3, #61	@ 0x3d
 8002950:	4602      	mov	r2, r0
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e127      	b.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334d      	adds	r3, #77	@ 0x4d
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d120      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331b      	adds	r3, #27
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f040 8107 	bne.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	334c      	adds	r3, #76	@ 0x4c
 80029a8:	2202      	movs	r2, #2
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e0fb      	b.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	334d      	adds	r3, #77	@ 0x4d
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d13a      	bne.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	334c      	adds	r3, #76	@ 0x4c
 80029e8:	2202      	movs	r2, #2
 80029ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	331b      	adds	r3, #27
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	f040 80d1 	bne.w	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	331b      	adds	r3, #27
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	e0b5      	b.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	334d      	adds	r3, #77	@ 0x4d
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d114      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	@ 0x4d
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	@ 0x4c
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e095      	b.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	@ 0x4d
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d114      	bne.n	8002aba <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334c      	adds	r3, #76	@ 0x4c
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e075      	b.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	334d      	adds	r3, #77	@ 0x4d
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b07      	cmp	r3, #7
 8002ace:	d00a      	beq.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	334d      	adds	r3, #77	@ 0x4d
 8002ae0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d170      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	334d      	adds	r3, #77	@ 0x4d
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3344      	adds	r3, #68	@ 0x44
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c59      	adds	r1, r3, #1
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	3344      	adds	r3, #68	@ 0x44
 8002b1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3344      	adds	r3, #68	@ 0x44
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d914      	bls.n	8002b5e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3344      	adds	r3, #68	@ 0x44
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334c      	adds	r3, #76	@ 0x4c
 8002b58:	2204      	movs	r2, #4
 8002b5a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b5c:	e022      	b.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334c      	adds	r3, #76	@ 0x4c
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b88:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b90:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ba4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	334c      	adds	r3, #76	@ 0x4c
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f004 febd 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bc2:	e002      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002bc8:	bf00      	nop
  }
}
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	0c5b      	lsrs	r3, r3, #17
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c04:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d004      	beq.n	8002c16 <HCD_RXQLVL_IRQHandler+0x46>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	f000 80b6 	beq.w	8002d80 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c14:	e0b7      	b.n	8002d86 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80b3 	beq.w	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	332c      	adds	r3, #44	@ 0x2c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a7 	beq.w	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3338      	adds	r3, #56	@ 0x38
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	18d1      	adds	r1, r2, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4403      	add	r3, r0
 8002c5a:	3334      	adds	r3, #52	@ 0x34
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4299      	cmp	r1, r3
 8002c60:	f200 8083 	bhi.w	8002d6a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	332c      	adds	r3, #44	@ 0x2c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f001 fdad 	bl	80047de <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	332c      	adds	r3, #44	@ 0x2c
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	18d1      	adds	r1, r2, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4403      	add	r3, r0
 8002ca8:	332c      	adds	r3, #44	@ 0x2c
 8002caa:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3338      	adds	r3, #56	@ 0x38
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	18d1      	adds	r1, r2, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4403      	add	r3, r0
 8002cd0:	3338      	adds	r3, #56	@ 0x38
 8002cd2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	0cdb      	lsrs	r3, r3, #19
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3328      	adds	r3, #40	@ 0x28
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d13f      	bne.n	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03c      	beq.n	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d20:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d28:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	333c      	adds	r3, #60	@ 0x3c
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2d8      	uxtb	r0, r3
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	333c      	adds	r3, #60	@ 0x3c
 8002d64:	4602      	mov	r2, r0
 8002d66:	701a      	strb	r2, [r3, #0]
      break;
 8002d68:	e00c      	b.n	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334c      	adds	r3, #76	@ 0x4c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	e001      	b.n	8002d84 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002d80:	bf00      	nop
 8002d82:	e000      	b.n	8002d86 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002d84:	bf00      	nop
  }
}
 8002d86:	bf00      	nop
 8002d88:	3728      	adds	r7, #40	@ 0x28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002dba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d10b      	bne.n	8002dde <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f004 fd97 	bl	8007904 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d132      	bne.n	8002e4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d126      	bne.n	8002e48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7a5b      	ldrb	r3, [r3, #9]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d113      	bne.n	8002e2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e0c:	d106      	bne.n	8002e1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fd7c 	bl	8004912 <USB_InitFSLSPClkSel>
 8002e1a:	e011      	b.n	8002e40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fd75 	bl	8004912 <USB_InitFSLSPClkSel>
 8002e28:	e00a      	b.n	8002e40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	79db      	ldrb	r3, [r3, #7]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002e3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f004 fd8d 	bl	8007960 <HAL_HCD_PortEnabled_Callback>
 8002e46:	e002      	b.n	8002e4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f004 fd97 	bl	800797c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d103      	bne.n	8002e60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e12b      	b.n	80030de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fd86 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f001 fa20 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a81      	ldr	r2, [pc, #516]	@ (80030e8 <HAL_I2C_Init+0x274>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d807      	bhi.n	8002ef8 <HAL_I2C_Init+0x84>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a80      	ldr	r2, [pc, #512]	@ (80030ec <HAL_I2C_Init+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e006      	b.n	8002f06 <HAL_I2C_Init+0x92>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a7d      	ldr	r2, [pc, #500]	@ (80030f0 <HAL_I2C_Init+0x27c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0e7      	b.n	80030de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a78      	ldr	r2, [pc, #480]	@ (80030f4 <HAL_I2C_Init+0x280>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80030e8 <HAL_I2C_Init+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d802      	bhi.n	8002f48 <HAL_I2C_Init+0xd4>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	e009      	b.n	8002f5c <HAL_I2C_Init+0xe8>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	4a69      	ldr	r2, [pc, #420]	@ (80030f8 <HAL_I2C_Init+0x284>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	495c      	ldr	r1, [pc, #368]	@ (80030e8 <HAL_I2C_Init+0x274>)
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d819      	bhi.n	8002fb0 <HAL_I2C_Init+0x13c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e59      	subs	r1, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f90:	400b      	ands	r3, r1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_I2C_Init+0x138>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e59      	subs	r1, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	e051      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e04f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <HAL_I2C_Init+0x168>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	440b      	add	r3, r1
 8002fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e012      	b.n	8003002 <HAL_I2C_Init+0x18e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Init+0x196>
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_I2C_Init+0x1bc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e58      	subs	r0, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	440b      	add	r3, r1
 8003020:	fbb0 f3f3 	udiv	r3, r0, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6809      	ldr	r1, [r1, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800307e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6911      	ldr	r1, [r2, #16]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	000186a0 	.word	0x000186a0
 80030ec:	001e847f 	.word	0x001e847f
 80030f0:	003d08ff 	.word	0x003d08ff
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e128      	b.n	8003360 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a90      	ldr	r2, [pc, #576]	@ (8003368 <HAL_I2S_Init+0x26c>)
 8003126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fc87 	bl	8000a3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2202      	movs	r2, #2
 8003150:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d060      	beq.n	800321c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003162:	2310      	movs	r3, #16
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e001      	b.n	800316c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b20      	cmp	r3, #32
 8003172:	d802      	bhi.n	800317a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800317a:	2001      	movs	r0, #1
 800317c:	f001 f9c4 	bl	8004508 <HAL_RCCEx_GetPeriphCLKFreq>
 8003180:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318a:	d125      	bne.n	80031d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fbb2 f2f3 	udiv	r2, r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	3305      	adds	r3, #5
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e01f      	b.n	80031f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	3305      	adds	r3, #5
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e00e      	b.n	80031f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	3305      	adds	r3, #5
 80031f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4a5c      	ldr	r2, [pc, #368]	@ (800336c <HAL_I2S_Init+0x270>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e003      	b.n	8003224 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800321c:	2302      	movs	r3, #2
 800321e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d902      	bls.n	8003230 <HAL_I2S_Init+0x134>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2bff      	cmp	r3, #255	@ 0xff
 800322e:	d907      	bls.n	8003240 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e08f      	b.n	8003360 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	ea42 0103 	orr.w	r1, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	430a      	orrs	r2, r1
 8003252:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800325e:	f023 030f 	bic.w	r3, r3, #15
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6851      	ldr	r1, [r2, #4]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6892      	ldr	r2, [r2, #8]
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68d2      	ldr	r2, [r2, #12]
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6992      	ldr	r2, [r2, #24]
 8003276:	430a      	orrs	r2, r1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d161      	bne.n	8003350 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a38      	ldr	r2, [pc, #224]	@ (8003370 <HAL_I2S_Init+0x274>)
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a37      	ldr	r2, [pc, #220]	@ (8003374 <HAL_I2S_Init+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x1a4>
 800329c:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x1a8>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	4932      	ldr	r1, [pc, #200]	@ (8003374 <HAL_I2S_Init+0x278>)
 80032ac:	428a      	cmp	r2, r1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2S_Init+0x1b8>
 80032b0:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_I2S_Init+0x27c>)
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x1bc>
 80032b4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80032b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003374 <HAL_I2S_Init+0x278>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_I2S_Init+0x1d4>
 80032cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003378 <HAL_I2S_Init+0x27c>)
 80032ce:	e001      	b.n	80032d4 <HAL_I2S_Init+0x1d8>
 80032d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032d4:	2202      	movs	r2, #2
 80032d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <HAL_I2S_Init+0x278>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_I2S_Init+0x1ea>
 80032e2:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_I2S_Init+0x27c>)
 80032e4:	e001      	b.n	80032ea <HAL_I2S_Init+0x1ee>
 80032e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f6:	d003      	beq.n	8003300 <HAL_I2S_Init+0x204>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003316:	4313      	orrs	r3, r2
 8003318:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003320:	4313      	orrs	r3, r2
 8003322:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800332a:	4313      	orrs	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	4313      	orrs	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003338:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <HAL_I2S_Init+0x278>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_I2S_Init+0x24c>
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_I2S_Init+0x27c>)
 8003346:	e001      	b.n	800334c <HAL_I2S_Init+0x250>
 8003348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800334c:	897a      	ldrh	r2, [r7, #10]
 800334e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08003473 	.word	0x08003473
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	08003589 	.word	0x08003589
 8003374:	40003800 	.word	0x40003800
 8003378:	40003400 	.word	0x40003400

0800337c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffb8 	bl	800337c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10e      	bne.n	800346a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800345a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff93 	bl	8003390 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b04      	cmp	r3, #4
 800348c:	d13a      	bne.n	8003504 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d109      	bne.n	80034ac <I2S_IRQHandler+0x3a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b40      	cmp	r3, #64	@ 0x40
 80034a4:	d102      	bne.n	80034ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffb4 	bl	8003414 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b2:	2b40      	cmp	r3, #64	@ 0x40
 80034b4:	d126      	bne.n	8003504 <I2S_IRQHandler+0x92>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d11f      	bne.n	8003504 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff50 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d136      	bne.n	800357e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d109      	bne.n	800352e <I2S_IRQHandler+0xbc>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003524:	2b80      	cmp	r3, #128	@ 0x80
 8003526:	d102      	bne.n	800352e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff45 	bl	80033b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d122      	bne.n	800357e <I2S_IRQHandler+0x10c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d11b      	bne.n	800357e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003554:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff13 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a92      	ldr	r2, [pc, #584]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035a2:	4b92      	ldr	r3, [pc, #584]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a4:	e001      	b.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a8b      	ldr	r2, [pc, #556]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035c0:	4b8a      	ldr	r3, [pc, #552]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d4:	d004      	beq.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8099 	bne.w	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d107      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f925 	bl	8003844 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9c8 	bl	80039a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d13a      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d035      	beq.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6e      	ldr	r2, [pc, #440]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003632:	4b6e      	ldr	r3, [pc, #440]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4969      	ldr	r1, [pc, #420]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	428b      	cmp	r3, r1
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003646:	4b69      	ldr	r3, [pc, #420]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800364e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003652:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003662:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0202 	orr.w	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fe88 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b08      	cmp	r3, #8
 800369c:	f040 80c3 	bne.w	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80bd 	beq.w	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a49      	ldr	r2, [pc, #292]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036c6:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4944      	ldr	r1, [pc, #272]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d6:	428b      	cmp	r3, r1
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036da:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe4a 	bl	80033a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003710:	e089      	b.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8be 	bl	80038a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8fd 	bl	8003940 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d12f      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02a      	beq.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003768:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003776:	e001      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4919      	ldr	r1, [pc, #100]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d101      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003788:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800378a:	e001      	b.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800378c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003790:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fdfa 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d136      	bne.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d031      	beq.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a07      	ldr	r2, [pc, #28]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037ce:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4902      	ldr	r1, [pc, #8]	@ (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037de:	428b      	cmp	r3, r1
 80037e0:	d106      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037e2:	4b02      	ldr	r3, [pc, #8]	@ (80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e4:	e006      	b.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037e6:	bf00      	nop
 80037e8:	40003800 	.word	0x40003800
 80037ec:	40003400 	.word	0x40003400
 80037f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003808:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f043 0204 	orr.w	r2, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fdc0 	bl	80033a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	e000      	b.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003826:	bf00      	nop
}
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	1c99      	adds	r1, r3, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6251      	str	r1, [r2, #36]	@ 0x24
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003884:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffc9 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	1c99      	adds	r1, r3, #2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80038ba:	8819      	ldrh	r1, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <I2SEx_TxISR_I2SExt+0x22>
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <I2SEx_TxISR_I2SExt+0x94>)
 80038c8:	e001      	b.n	80038ce <I2SEx_TxISR_I2SExt+0x26>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ce:	460a      	mov	r2, r1
 80038d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d121      	bne.n	800392e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <I2SEx_TxISR_I2SExt+0x50>
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <I2SEx_TxISR_I2SExt+0x94>)
 80038f6:	e001      	b.n	80038fc <I2SEx_TxISR_I2SExt+0x54>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	490d      	ldr	r1, [pc, #52]	@ (8003938 <I2SEx_TxISR_I2SExt+0x90>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d101      	bne.n	800390c <I2SEx_TxISR_I2SExt+0x64>
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <I2SEx_TxISR_I2SExt+0x94>)
 800390a:	e001      	b.n	8003910 <I2SEx_TxISR_I2SExt+0x68>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003910:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003914:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff81 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40003800 	.word	0x40003800
 800393c:	40003400 	.word	0x40003400

08003940 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68d8      	ldr	r0, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	1c99      	adds	r1, r3, #2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003958:	b282      	uxth	r2, r0
 800395a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003982:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff4a 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <I2SEx_RxISR_I2SExt+0x16>
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 80039b8:	e001      	b.n	80039be <I2SEx_RxISR_I2SExt+0x1a>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039be:	68d8      	ldr	r0, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	1c99      	adds	r1, r3, #2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80039ca:	b282      	uxth	r2, r0
 80039cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d121      	bne.n	8003a2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <I2SEx_RxISR_I2SExt+0x50>
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 80039f2:	e001      	b.n	80039f8 <I2SEx_RxISR_I2SExt+0x54>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	490d      	ldr	r1, [pc, #52]	@ (8003a34 <I2SEx_RxISR_I2SExt+0x90>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d101      	bne.n	8003a08 <I2SEx_RxISR_I2SExt+0x64>
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <I2SEx_RxISR_I2SExt+0x94>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_RxISR_I2SExt+0x68>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff03 	bl	8003830 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40003800 	.word	0x40003800
 8003a38:	40003400 	.word	0x40003400

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e267      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d075      	beq.n	8003b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4b85      	ldr	r3, [pc, #532]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d157      	bne.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e242      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x74>
 8003aa2:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x98>
 8003aba:	4b70      	ldr	r3, [pc, #448]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6f      	ldr	r2, [pc, #444]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6c      	ldr	r2, [pc, #432]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ad4:	4b69      	ldr	r3, [pc, #420]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a68      	ldr	r2, [pc, #416]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd f93e 	bl	8000d74 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fd f93a 	bl	8000d74 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e207      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd f92a 	bl	8000d74 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fd f926 	bl	8000d74 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1f3      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b51      	ldr	r3, [pc, #324]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1c7      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4937      	ldr	r1, [pc, #220]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x244>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd f8df 	bl	8000d74 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd f8db 	bl	8000d74 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1a8      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4925      	ldr	r1, [pc, #148]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <HAL_RCC_OscConfig+0x244>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f8be 	bl	8000d74 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fd f8ba 	bl	8000d74 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e187      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_RCC_OscConfig+0x248>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f89e 	bl	8000d74 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fd f89a 	bl	8000d74 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e167      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x200>
 8003c5a:	e01b      	b.n	8003c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x248>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fd f887 	bl	8000d74 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e00e      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fd f883 	bl	8000d74 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d907      	bls.n	8003c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e150      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	42470000 	.word	0x42470000
 8003c84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	4b88      	ldr	r3, [pc, #544]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ea      	bne.n	8003c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8097 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b81      	ldr	r3, [pc, #516]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a7c      	ldr	r2, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	4b77      	ldr	r3, [pc, #476]	@ (8003eb0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d118      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cde:	4b74      	ldr	r3, [pc, #464]	@ (8003eb0 <HAL_RCC_OscConfig+0x474>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a73      	ldr	r2, [pc, #460]	@ (8003eb0 <HAL_RCC_OscConfig+0x474>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7fd f843 	bl	8000d74 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf2:	f7fd f83f 	bl	8000d74 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e10c      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb0 <HAL_RCC_OscConfig+0x474>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2ea>
 8003d18:	4b64      	ldr	r3, [pc, #400]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a63      	ldr	r2, [pc, #396]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	e01c      	b.n	8003d60 <HAL_RCC_OscConfig+0x324>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x30c>
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a5e      	ldr	r2, [pc, #376]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0x324>
 8003d48:	4b58      	ldr	r3, [pc, #352]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a57      	ldr	r2, [pc, #348]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	4b55      	ldr	r3, [pc, #340]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	4a54      	ldr	r2, [pc, #336]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 0304 	bic.w	r3, r3, #4
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd f804 	bl	8000d74 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd f800 	bl	8000d74 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0cb      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	4b49      	ldr	r3, [pc, #292]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ee      	beq.n	8003d70 <HAL_RCC_OscConfig+0x334>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d94:	f7fc ffee 	bl	8000d74 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fc ffea 	bl	8000d74 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0b5      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ee      	bne.n	8003d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b39      	ldr	r3, [pc, #228]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	4a38      	ldr	r2, [pc, #224]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a1 	beq.w	8003f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dda:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d05c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d141      	bne.n	8003e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fc ffbe 	bl	8000d74 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fc ffba 	bl	8000d74 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e087      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	491b      	ldr	r1, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e44:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fc ff93 	bl	8000d74 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fc ff8f 	bl	8000d74 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e05c      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x416>
 8003e70:	e054      	b.n	8003f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fc ff7c 	bl	8000d74 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fc ff78 	bl	8000d74 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e045      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_RCC_OscConfig+0x470>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x444>
 8003e9e:	e03d      	b.n	8003f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e038      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f28 <HAL_RCC_OscConfig+0x4ec>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d121      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d11a      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	3b01      	subs	r3, #1
 8003f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cc      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b68      	ldr	r3, [pc, #416]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d90c      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b65      	ldr	r3, [pc, #404]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b63      	ldr	r3, [pc, #396]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f80:	4b59      	ldr	r3, [pc, #356]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a58      	ldr	r2, [pc, #352]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b50      	ldr	r3, [pc, #320]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	494d      	ldr	r1, [pc, #308]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d044      	beq.n	800404c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d119      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b3f      	ldr	r3, [pc, #252]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e067      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400a:	4b37      	ldr	r3, [pc, #220]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0203 	bic.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4934      	ldr	r1, [pc, #208]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800401c:	f7fc feaa 	bl	8000d74 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fc fea6 	bl	8000d74 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e04f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 020c 	and.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	429a      	cmp	r2, r3
 800404a:	d1eb      	bne.n	8004024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b25      	ldr	r3, [pc, #148]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d20c      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b22      	ldr	r3, [pc, #136]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4916      	ldr	r1, [pc, #88]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409e:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	490e      	ldr	r1, [pc, #56]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 f821 	bl	80040f8 <HAL_RCC_GetSysClockFreq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	490a      	ldr	r1, [pc, #40]	@ (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a09      	ldr	r2, [pc, #36]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc fe0a 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023c00 	.word	0x40023c00
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08007ae4 	.word	0x08007ae4
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000004 	.word	0x20000004

080040f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b094      	sub	sp, #80	@ 0x50
 80040fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004110:	4b79      	ldr	r3, [pc, #484]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d00d      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x40>
 800411c:	2b08      	cmp	r3, #8
 800411e:	f200 80e1 	bhi.w	80042e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x34>
 8004126:	2b04      	cmp	r3, #4
 8004128:	d003      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x3a>
 800412a:	e0db      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800412c:	4b73      	ldr	r3, [pc, #460]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x204>)
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004130:	e0db      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004132:	4b73      	ldr	r3, [pc, #460]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x208>)
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004136:	e0d8      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004138:	4b6f      	ldr	r3, [pc, #444]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004142:	4b6d      	ldr	r3, [pc, #436]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d063      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414e:	4b6a      	ldr	r3, [pc, #424]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	2200      	movs	r2, #0
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004158:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800415a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004160:	633b      	str	r3, [r7, #48]	@ 0x30
 8004162:	2300      	movs	r3, #0
 8004164:	637b      	str	r3, [r7, #52]	@ 0x34
 8004166:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	f04f 0000 	mov.w	r0, #0
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	0159      	lsls	r1, r3, #5
 8004178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800417c:	0150      	lsls	r0, r2, #5
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4621      	mov	r1, r4
 8004184:	1a51      	subs	r1, r2, r1
 8004186:	6139      	str	r1, [r7, #16]
 8004188:	4629      	mov	r1, r5
 800418a:	eb63 0301 	sbc.w	r3, r3, r1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800419c:	4659      	mov	r1, fp
 800419e:	018b      	lsls	r3, r1, #6
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041a6:	4651      	mov	r1, sl
 80041a8:	018a      	lsls	r2, r1, #6
 80041aa:	4651      	mov	r1, sl
 80041ac:	ebb2 0801 	subs.w	r8, r2, r1
 80041b0:	4659      	mov	r1, fp
 80041b2:	eb63 0901 	sbc.w	r9, r3, r1
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ca:	4690      	mov	r8, r2
 80041cc:	4699      	mov	r9, r3
 80041ce:	4623      	mov	r3, r4
 80041d0:	eb18 0303 	adds.w	r3, r8, r3
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	462b      	mov	r3, r5
 80041d8:	eb49 0303 	adc.w	r3, r9, r3
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041ea:	4629      	mov	r1, r5
 80041ec:	024b      	lsls	r3, r1, #9
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041f4:	4621      	mov	r1, r4
 80041f6:	024a      	lsls	r2, r1, #9
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041fe:	2200      	movs	r2, #0
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004208:	f7fb ffe2 	bl	80001d0 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004214:	e058      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b38      	ldr	r3, [pc, #224]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	2200      	movs	r2, #0
 800421e:	4618      	mov	r0, r3
 8004220:	4611      	mov	r1, r2
 8004222:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
 800422c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	f04f 0000 	mov.w	r0, #0
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	0159      	lsls	r1, r3, #5
 800423e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004242:	0150      	lsls	r0, r2, #5
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4641      	mov	r1, r8
 800424a:	ebb2 0a01 	subs.w	sl, r2, r1
 800424e:	4649      	mov	r1, r9
 8004250:	eb63 0b01 	sbc.w	fp, r3, r1
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004260:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004264:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004268:	ebb2 040a 	subs.w	r4, r2, sl
 800426c:	eb63 050b 	sbc.w	r5, r3, fp
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	00eb      	lsls	r3, r5, #3
 800427a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800427e:	00e2      	lsls	r2, r4, #3
 8004280:	4614      	mov	r4, r2
 8004282:	461d      	mov	r5, r3
 8004284:	4643      	mov	r3, r8
 8004286:	18e3      	adds	r3, r4, r3
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	464b      	mov	r3, r9
 800428c:	eb45 0303 	adc.w	r3, r5, r3
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800429e:	4629      	mov	r1, r5
 80042a0:	028b      	lsls	r3, r1, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a8:	4621      	mov	r1, r4
 80042aa:	028a      	lsls	r2, r1, #10
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	61fa      	str	r2, [r7, #28]
 80042b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042bc:	f7fb ff88 	bl	80001d0 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x204>)
 80042e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3750      	adds	r7, #80	@ 0x50
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	007a1200 	.word	0x007a1200

08004304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004308:	4b03      	ldr	r3, [pc, #12]	@ (8004318 <HAL_RCC_GetHCLKFreq+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000000 	.word	0x20000000

0800431c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004320:	f7ff fff0 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0a9b      	lsrs	r3, r3, #10
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	08007af4 	.word	0x08007af4

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004368:	2b00      	cmp	r3, #0
 800436a:	d035      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800436c:	4b62      	ldr	r3, [pc, #392]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004372:	f7fc fcff 	bl	8000d74 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437a:	f7fc fcfb 	bl	8000d74 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0b0      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438c:	4b5b      	ldr	r3, [pc, #364]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	019a      	lsls	r2, r3, #6
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	071b      	lsls	r3, r3, #28
 80043a4:	4955      	ldr	r1, [pc, #340]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043ac:	4b52      	ldr	r3, [pc, #328]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b2:	f7fc fcdf 	bl	8000d74 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ba:	f7fc fcdb 	bl	8000d74 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e090      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043cc:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8083 	beq.w	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b44      	ldr	r3, [pc, #272]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	4a43      	ldr	r2, [pc, #268]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004402:	4b3f      	ldr	r3, [pc, #252]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3e      	ldr	r2, [pc, #248]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800440e:	f7fc fcb1 	bl	8000d74 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7fc fcad 	bl	8000d74 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e062      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004428:	4b35      	ldr	r3, [pc, #212]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004434:	4b31      	ldr	r3, [pc, #196]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	429a      	cmp	r2, r3
 8004450:	d028      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004452:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800445c:	4b29      	ldr	r3, [pc, #164]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004462:	4b28      	ldr	r3, [pc, #160]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004468:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800446e:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d114      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800447a:	f7fc fc7b 	bl	8000d74 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fc fc77 	bl	8000d74 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e02a      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	4b18      	ldr	r3, [pc, #96]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ee      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b0:	d10d      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80044c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c6:	490d      	ldr	r1, [pc, #52]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
 80044cc:	e005      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4a0a      	ldr	r2, [pc, #40]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044d8:	6093      	str	r3, [r2, #8]
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e6:	4905      	ldr	r1, [pc, #20]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	42470068 	.word	0x42470068
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	42470e40 	.word	0x42470e40

08004508 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d13f      	bne.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800453c:	d12f      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800453e:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004540:	617b      	str	r3, [r7, #20]
          break;
 8004542:	e02f      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004544:	4b1c      	ldr	r3, [pc, #112]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004550:	d108      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004552:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800455a:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e007      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004564:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800456c:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004574:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004588:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800458a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458e:	0f1b      	lsrs	r3, r3, #28
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	617b      	str	r3, [r7, #20]
          break;
 800459c:	e002      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
          break;
 80045a2:	bf00      	nop
        }
      }
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80045a6:	bf00      	nop
    }
  }
  return frequency;
 80045a8:	697b      	ldr	r3, [r7, #20]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00bb8000 	.word	0x00bb8000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	00f42400 	.word	0x00f42400

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fa8e 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 0201 	bic.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004738:	d901      	bls.n	800473e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e01b      	b.n	8004776 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	daf2      	bge.n	800472c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004762:	d901      	bls.n	8004768 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e006      	b.n	8004776 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b20      	cmp	r3, #32
 8004772:	d0f0      	beq.n	8004756 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800479a:	d901      	bls.n	80047a0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e018      	b.n	80047d2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	daf2      	bge.n	800478e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2210      	movs	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3301      	adds	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047be:	d901      	bls.n	80047c4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d0f0      	beq.n	80047b2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047de:	b480      	push	{r7}
 80047e0:	b08b      	sub	sp, #44	@ 0x2c
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	e014      	b.n	8004834 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	601a      	str	r2, [r3, #0]
    pDest++;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	3301      	adds	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	3301      	adds	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	3301      	adds	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	3301      	adds	r3, #1
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3e6      	bcc.n	800480a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01e      	beq.n	8004880 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484c:	461a      	mov	r2, r3
 800484e:	f107 0310 	add.w	r3, r7, #16
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	b2da      	uxtb	r2, r3
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	701a      	strb	r2, [r3, #0]
      i++;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	3301      	adds	r3, #1
 800486c:	623b      	str	r3, [r7, #32]
      pDest++;
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	3301      	adds	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004874:	8bfb      	ldrh	r3, [r7, #30]
 8004876:	3b01      	subs	r3, #1
 8004878:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800487a:	8bfb      	ldrh	r3, [r7, #30]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ea      	bne.n	8004856 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004882:	4618      	mov	r0, r3
 8004884:	372c      	adds	r7, #44	@ 0x2c
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048a6:	68fb      	ldr	r3, [r7, #12]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048e8:	68bb      	ldr	r3, [r7, #8]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0301 	and.w	r3, r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800495a:	461a      	mov	r2, r3
 800495c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004960:	6053      	str	r3, [r2, #4]
 8004962:	e00c      	b.n	800497e <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d107      	bne.n	800497a <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004970:	461a      	mov	r2, r3
 8004972:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004976:	6053      	str	r3, [r2, #4]
 8004978:	e001      	b.n	800497e <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	b29b      	uxth	r3, r3
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b089      	sub	sp, #36	@ 0x24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0c9b      	lsrs	r3, r3, #18
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0fdb      	lsrs	r3, r3, #31
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0fdb      	lsrs	r3, r3, #31
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d10d      	bne.n	8004a30 <USB_HC_Halt+0x82>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <USB_HC_Halt+0x82>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <USB_HC_Halt+0x7e>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d101      	bne.n	8004a30 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e0d8      	b.n	8004be2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <USB_HC_Halt+0x8e>
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d173      	bne.n	8004b24 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d14a      	bne.n	8004afe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d133      	bne.n	8004adc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a92:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ab2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ac0:	d82e      	bhi.n	8004b20 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad8:	d0ec      	beq.n	8004ab4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ada:	e081      	b.n	8004be0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004afa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004afc:	e070      	b.n	8004be0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b1e:	e05f      	b.n	8004be0 <USB_HC_Halt+0x232>
            break;
 8004b20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b22:	e05d      	b.n	8004be0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d133      	bne.n	8004bbc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b92:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba0:	d81d      	bhi.n	8004bde <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb8:	d0ec      	beq.n	8004b94 <USB_HC_Halt+0x1e6>
 8004bba:	e011      	b.n	8004be0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	e000      	b.n	8004be0 <USB_HC_Halt+0x232>
          break;
 8004bde:	bf00      	nop
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3724      	adds	r7, #36	@ 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fd7a 	bl	80046fc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c08:	2110      	movs	r1, #16
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fd87 	bl	800471e <USB_FlushTxFifo>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fdb1 	bl	8004782 <USB_FlushRxFifo>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e01f      	b.n	8004c70 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c46:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c4e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c56:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b0f      	cmp	r3, #15
 8004c74:	d9dc      	bls.n	8004c30 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e034      	b.n	8004ce6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c92:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c9a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ca2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cc2:	d80c      	bhi.n	8004cde <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cda:	d0ec      	beq.n	8004cb6 <USB_StopHost+0xc8>
 8004cdc:	e000      	b.n	8004ce0 <USB_StopHost+0xf2>
        break;
 8004cde:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b0f      	cmp	r3, #15
 8004cea:	d9c7      	bls.n	8004c7c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cf8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d00:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fce9 	bl	80046da <USB_EnableGlobalInt>

  return ret;
 8004d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f804 	bl	8004d36 <USBH_HandleSof>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b0b      	cmp	r3, #11
 8004d46:	d10a      	bne.n	8004d5e <USBH_HandleSof+0x28>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f000 f8c1 	bl	8004f14 <osMessageQueuePut>
#endif
#endif

  return;
 8004d92:	bf00      	nop
}
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8004daa:	bf00      	nop
}
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004dea:	2300      	movs	r3, #0
 8004dec:	2200      	movs	r2, #0
 8004dee:	f000 f891 	bl	8004f14 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f002 fdbb 	bl	8007998 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f830 	bl	8004e8e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	795b      	ldrb	r3, [r3, #5]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f82a 	bl	8004e8e <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2200      	movs	r2, #0
 8004e52:	f000 f85f 	bl	8004f14 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f000 f848 	bl	8004f14 <osMessageQueuePut>
#endif

  return USBH_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	d80d      	bhi.n	8004ebc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	33e0      	adds	r3, #224	@ 0xe0
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	33e0      	adds	r3, #224	@ 0xe0
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed2:	f3ef 8305 	mrs	r3, IPSR
 8004ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ede:	f06f 0305 	mvn.w	r3, #5
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	e00c      	b.n	8004f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <osKernelInitialize+0x44>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <osKernelInitialize+0x44>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	e002      	b.n	8004f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000124 	.word	0x20000124

08004f14 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	617b      	str	r3, [r7, #20]
  return(result);
 8004f32:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d028      	beq.n	8004f8a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <osMessageQueuePut+0x36>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <osMessageQueuePut+0x36>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004f4a:	f06f 0303 	mvn.w	r3, #3
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e038      	b.n	8004fc4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f56:	f107 0210 	add.w	r2, r7, #16
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	69b8      	ldr	r0, [r7, #24]
 8004f60:	f000 fb2c 	bl	80055bc <xQueueGenericSendFromISR>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d003      	beq.n	8004f72 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004f6a:	f06f 0302 	mvn.w	r3, #2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e028      	b.n	8004fc4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d025      	beq.n	8004fc4 <osMessageQueuePut+0xb0>
 8004f78:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <osMessageQueuePut+0xbc>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	e01c      	b.n	8004fc4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <osMessageQueuePut+0x82>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004f96:	f06f 0303 	mvn.w	r3, #3
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	e012      	b.n	8004fc4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	69b8      	ldr	r0, [r7, #24]
 8004fa6:	f000 fa07 	bl	80053b8 <xQueueGenericSend>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d009      	beq.n	8004fc4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004fb6:	f06f 0301 	mvn.w	r3, #1
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	e002      	b.n	8004fc4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004fbe:	f06f 0302 	mvn.w	r3, #2
 8004fc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4a06      	ldr	r2, [pc, #24]	@ (8005004 <vApplicationGetIdleTaskMemory+0x30>)
 8004fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	601a      	str	r2, [r3, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000128 	.word	0x20000128
 8005004:	20000184 	.word	0x20000184

08005008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a07      	ldr	r2, [pc, #28]	@ (8005034 <vApplicationGetTimerTaskMemory+0x2c>)
 8005018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <vApplicationGetTimerTaskMemory+0x30>)
 800501e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	20000384 	.word	0x20000384
 8005038:	200003e0 	.word	0x200003e0

0800503c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f103 0208 	add.w	r2, r3, #8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f103 0208 	add.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f4:	d103      	bne.n	80050fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e00c      	b.n	8005118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3308      	adds	r3, #8
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <vListInsert+0x2e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d2f6      	bcs.n	8005106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6852      	ldr	r2, [r2, #4]
 8005170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d103      	bne.n	8005184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051d0:	f002 f87a 	bl	80072c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	441a      	add	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005200:	3b01      	subs	r3, #1
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	22ff      	movs	r2, #255	@ 0xff
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	22ff      	movs	r2, #255	@ 0xff
 800521c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d114      	bne.n	8005250 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01a      	beq.n	8005264 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3310      	adds	r3, #16
 8005232:	4618      	mov	r0, r3
 8005234:	f001 f91a 	bl	800646c <xTaskRemoveFromEventList>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d012      	beq.n	8005264 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <xQueueGenericReset+0xd0>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	e009      	b.n	8005264 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3310      	adds	r3, #16
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fef1 	bl	800503c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3324      	adds	r3, #36	@ 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff feec 	bl	800503c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005264:	f002 f862 	bl	800732c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005268:	2301      	movs	r3, #1
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	@ 0x38
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <xQueueGenericCreateStatic+0x56>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <xQueueGenericCreateStatic+0x5a>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueGenericCreateStatic+0x5c>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	623b      	str	r3, [r7, #32]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <xQueueGenericCreateStatic+0x84>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <xQueueGenericCreateStatic+0x88>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <xQueueGenericCreateStatic+0x8a>
 8005300:	2300      	movs	r3, #0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	61fb      	str	r3, [r7, #28]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800531e:	2350      	movs	r3, #80	@ 0x50
 8005320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b50      	cmp	r3, #80	@ 0x50
 8005326:	d00b      	beq.n	8005340 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	61bb      	str	r3, [r7, #24]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005354:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f805 	bl	8005372 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	@ 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e002      	b.n	8005394 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053a0:	2101      	movs	r1, #1
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f7ff fefe 	bl	80051a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <xQueueGenericSend+0x34>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <xQueueGenericSend+0x42>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <xQueueGenericSend+0x46>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <xQueueGenericSend+0x48>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xQueueGenericSend+0x64>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <xQueueGenericSend+0x72>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <xQueueGenericSend+0x76>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericSend+0x78>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10b      	bne.n	800544c <xQueueGenericSend+0x94>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800544c:	f001 f9ce 	bl	80067ec <xTaskGetSchedulerState>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <xQueueGenericSend+0xa4>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <xQueueGenericSend+0xa8>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <xQueueGenericSend+0xaa>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xQueueGenericSend+0xc6>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800547e:	f001 ff23 	bl	80072c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <xQueueGenericSend+0xdc>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d129      	bne.n	80054e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800549a:	f000 fa0f 	bl	80058bc <prvCopyDataToQueue>
 800549e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	3324      	adds	r3, #36	@ 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ffdd 	bl	800646c <xTaskRemoveFromEventList>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054b8:	4b3f      	ldr	r3, [pc, #252]	@ (80055b8 <xQueueGenericSend+0x200>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	e00a      	b.n	80054e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054d0:	4b39      	ldr	r3, [pc, #228]	@ (80055b8 <xQueueGenericSend+0x200>)
 80054d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054e0:	f001 ff24 	bl	800732c <vPortExitCritical>
				return pdPASS;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e063      	b.n	80055b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ee:	f001 ff1d 	bl	800732c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e05c      	b.n	80055b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	4618      	mov	r0, r3
 8005502:	f001 f817 	bl	8006534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005506:	2301      	movs	r3, #1
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800550a:	f001 ff0f 	bl	800732c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800550e:	f000 fd87 	bl	8006020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005512:	f001 fed9 	bl	80072c8 <vPortEnterCritical>
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800551c:	b25b      	sxtb	r3, r3
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005522:	d103      	bne.n	800552c <xQueueGenericSend+0x174>
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005532:	b25b      	sxtb	r3, r3
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005538:	d103      	bne.n	8005542 <xQueueGenericSend+0x18a>
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005542:	f001 fef3 	bl	800732c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005546:	1d3a      	adds	r2, r7, #4
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f001 f806 	bl	8006560 <xTaskCheckForTimeOut>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d124      	bne.n	80055a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800555a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800555c:	f000 faa6 	bl	8005aac <prvIsQueueFull>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	3310      	adds	r3, #16
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ff2a 	bl	80063c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005576:	f000 fa31 	bl	80059dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800557a:	f000 fd5f 	bl	800603c <xTaskResumeAll>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f af7c 	bne.w	800547e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005586:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <xQueueGenericSend+0x200>)
 8005588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	e772      	b.n	800547e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800559a:	f000 fa1f 	bl	80059dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800559e:	f000 fd4d 	bl	800603c <xTaskResumeAll>
 80055a2:	e76c      	b.n	800547e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a6:	f000 fa19 	bl	80059dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055aa:	f000 fd47 	bl	800603c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3738      	adds	r7, #56	@ 0x38
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b090      	sub	sp, #64	@ 0x40
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <xQueueGenericSendFromISR+0x3e>
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <xQueueGenericSendFromISR+0x42>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xQueueGenericSendFromISR+0x44>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d103      	bne.n	800562a <xQueueGenericSendFromISR+0x6e>
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <xQueueGenericSendFromISR+0x72>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericSendFromISR+0x74>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	623b      	str	r3, [r7, #32]
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800564c:	f001 ff1c 	bl	8007488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005650:	f3ef 8211 	mrs	r2, BASEPRI
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	61fa      	str	r2, [r7, #28]
 8005666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	429a      	cmp	r2, r3
 8005676:	d302      	bcc.n	800567e <xQueueGenericSendFromISR+0xc2>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d12f      	bne.n	80056de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800567e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005694:	f000 f912 	bl	80058bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056a0:	d112      	bne.n	80056c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d016      	beq.n	80056d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	3324      	adds	r3, #36	@ 0x24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fedc 	bl	800646c <xTaskRemoveFromEventList>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00e      	beq.n	80056d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e007      	b.n	80056d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056cc:	3301      	adds	r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	b25a      	sxtb	r2, r3
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056d8:	2301      	movs	r3, #1
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80056dc:	e001      	b.n	80056e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3740      	adds	r7, #64	@ 0x40
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <xQueueReceive+0x32>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	623b      	str	r3, [r7, #32]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <xQueueReceive+0x40>
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <xQueueReceive+0x44>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <xQueueReceive+0x46>
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <xQueueReceive+0x62>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	61fb      	str	r3, [r7, #28]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575a:	f001 f847 	bl	80067ec <xTaskGetSchedulerState>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <xQueueReceive+0x72>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueReceive+0x76>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueReceive+0x78>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <xQueueReceive+0x94>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61bb      	str	r3, [r7, #24]
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800578c:	f001 fd9c 	bl	80072c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a0:	f000 f8f6 	bl	8005990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	3310      	adds	r3, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fe57 	bl	800646c <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057c4:	4b3c      	ldr	r3, [pc, #240]	@ (80058b8 <xQueueReceive+0x1c0>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d4:	f001 fdaa 	bl	800732c <vPortExitCritical>
				return pdPASS;
 80057d8:	2301      	movs	r3, #1
 80057da:	e069      	b.n	80058b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e2:	f001 fda3 	bl	800732c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e062      	b.n	80058b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f0:	f107 0310 	add.w	r3, r7, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fe9d 	bl	8006534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fe:	f001 fd95 	bl	800732c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005802:	f000 fc0d 	bl	8006020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005806:	f001 fd5f 	bl	80072c8 <vPortEnterCritical>
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005810:	b25b      	sxtb	r3, r3
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005816:	d103      	bne.n	8005820 <xQueueReceive+0x128>
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005826:	b25b      	sxtb	r3, r3
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582c:	d103      	bne.n	8005836 <xQueueReceive+0x13e>
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005836:	f001 fd79 	bl	800732c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583a:	1d3a      	adds	r2, r7, #4
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fe8c 	bl	8006560 <xTaskCheckForTimeOut>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d123      	bne.n	8005896 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800584e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005850:	f000 f916 	bl	8005a80 <prvIsQueueEmpty>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	3324      	adds	r3, #36	@ 0x24
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fdb0 	bl	80063c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800586a:	f000 f8b7 	bl	80059dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800586e:	f000 fbe5 	bl	800603c <xTaskResumeAll>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d189      	bne.n	800578c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005878:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <xQueueReceive+0x1c0>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	e780      	b.n	800578c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800588a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800588c:	f000 f8a6 	bl	80059dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005890:	f000 fbd4 	bl	800603c <xTaskResumeAll>
 8005894:	e77a      	b.n	800578c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005898:	f000 f8a0 	bl	80059dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589c:	f000 fbce 	bl	800603c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a2:	f000 f8ed 	bl	8005a80 <prvIsQueueEmpty>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f43f af6f 	beq.w	800578c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	@ 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10d      	bne.n	80058f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d14d      	bne.n	800597e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 ff9e 	bl	8006828 <xTaskPriorityDisinherit>
 80058ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	e043      	b.n	800597e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d119      	bne.n	8005930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6858      	ldr	r0, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	461a      	mov	r2, r3
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	f002 f8ba 	bl	8007a80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d32b      	bcc.n	800597e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	e026      	b.n	800597e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68d8      	ldr	r0, [r3, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	461a      	mov	r2, r3
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	f002 f8a0 	bl	8007a80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	425b      	negs	r3, r3
 800594a:	441a      	add	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d207      	bcs.n	800596c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	425b      	negs	r3, r3
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d105      	bne.n	800597e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3b01      	subs	r3, #1
 800597c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005986:	697b      	ldr	r3, [r7, #20]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d303      	bcc.n	80059c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68d9      	ldr	r1, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	461a      	mov	r2, r3
 80059ce:	6838      	ldr	r0, [r7, #0]
 80059d0:	f002 f856 	bl	8007a80 <memcpy>
	}
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059e4:	f001 fc70 	bl	80072c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059f0:	e011      	b.n	8005a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d012      	beq.n	8005a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3324      	adds	r3, #36	@ 0x24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fd34 	bl	800646c <xTaskRemoveFromEventList>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a0a:	f000 fe0d 	bl	8006628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dce9      	bgt.n	80059f2 <prvUnlockQueue+0x16>
 8005a1e:	e000      	b.n	8005a22 <prvUnlockQueue+0x46>
					break;
 8005a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	22ff      	movs	r2, #255	@ 0xff
 8005a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a2a:	f001 fc7f 	bl	800732c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a2e:	f001 fc4b 	bl	80072c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a3a:	e011      	b.n	8005a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d012      	beq.n	8005a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3310      	adds	r3, #16
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fd0f 	bl	800646c <xTaskRemoveFromEventList>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a54:	f000 fde8 	bl	8006628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dce9      	bgt.n	8005a3c <prvUnlockQueue+0x60>
 8005a68:	e000      	b.n	8005a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	22ff      	movs	r2, #255	@ 0xff
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005a74:	f001 fc5a 	bl	800732c <vPortExitCritical>
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a88:	f001 fc1e 	bl	80072c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e001      	b.n	8005a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a9e:	f001 fc45 	bl	800732c <vPortExitCritical>

	return xReturn;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ab4:	f001 fc08 	bl	80072c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d102      	bne.n	8005aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e001      	b.n	8005ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ace:	f001 fc2d 	bl	800732c <vPortExitCritical>

	return xReturn;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e014      	b.n	8005b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005aec:	4a0f      	ldr	r2, [pc, #60]	@ (8005b2c <vQueueAddToRegistry+0x50>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005af8:	490c      	ldr	r1, [pc, #48]	@ (8005b2c <vQueueAddToRegistry+0x50>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b02:	4a0a      	ldr	r2, [pc, #40]	@ (8005b2c <vQueueAddToRegistry+0x50>)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b0e:	e006      	b.n	8005b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	d9e7      	bls.n	8005aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	200007e0 	.word	0x200007e0

08005b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b40:	f001 fbc2 	bl	80072c8 <vPortEnterCritical>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b50:	d103      	bne.n	8005b5a <vQueueWaitForMessageRestricted+0x2a>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b66:	d103      	bne.n	8005b70 <vQueueWaitForMessageRestricted+0x40>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b70:	f001 fbdc 	bl	800732c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	3324      	adds	r3, #36	@ 0x24
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fc45 	bl	8006414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b8a:	6978      	ldr	r0, [r7, #20]
 8005b8c:	f7ff ff26 	bl	80059dc <prvUnlockQueue>
	}
 8005b90:	bf00      	nop
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08e      	sub	sp, #56	@ 0x38
 8005b9c:	af04      	add	r7, sp, #16
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	623b      	str	r3, [r7, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	61fb      	str	r3, [r7, #28]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005be2:	235c      	movs	r3, #92	@ 0x5c
 8005be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bea:	d00b      	beq.n	8005c04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	61bb      	str	r3, [r7, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <xTaskCreateStatic+0xb2>
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01b      	beq.n	8005c4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c24:	2300      	movs	r3, #0
 8005c26:	9303      	str	r3, [sp, #12]
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	9302      	str	r3, [sp, #8]
 8005c2c:	f107 0314 	add.w	r3, r7, #20
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f850 	bl	8005ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c44:	f000 f8de 	bl	8005e04 <prvAddNewTaskToReadyList>
 8005c48:	e001      	b.n	8005c4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c4e:	697b      	ldr	r3, [r7, #20]
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	@ 0x30
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fc4d 	bl	800750c <pvPortMalloc>
 8005c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c7a:	205c      	movs	r0, #92	@ 0x5c
 8005c7c:	f001 fc46 	bl	800750c <pvPortMalloc>
 8005c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c8e:	e005      	b.n	8005c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c90:	6978      	ldr	r0, [r7, #20]
 8005c92:	f001 fd09 	bl	80076a8 <vPortFree>
 8005c96:	e001      	b.n	8005c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	2300      	movs	r3, #0
 8005cae:	9303      	str	r3, [sp, #12]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f80e 	bl	8005ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cc6:	69f8      	ldr	r0, [r7, #28]
 8005cc8:	f000 f89c 	bl	8005e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e002      	b.n	8005cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b088      	sub	sp, #32
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	21a5      	movs	r1, #165	@ 0xa5
 8005cfc:	f001 fe94 	bl	8007a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f023 0307 	bic.w	r3, r3, #7
 8005d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	617b      	str	r3, [r7, #20]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01f      	beq.n	8005d82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	e012      	b.n	8005d6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	7819      	ldrb	r1, [r3, #0]
 8005d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	3334      	adds	r3, #52	@ 0x34
 8005d58:	460a      	mov	r2, r1
 8005d5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d006      	beq.n	8005d76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d9e9      	bls.n	8005d48 <prvInitialiseNewTask+0x66>
 8005d74:	e000      	b.n	8005d78 <prvInitialiseNewTask+0x96>
			{
				break;
 8005d76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d80:	e003      	b.n	8005d8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	2b37      	cmp	r3, #55	@ 0x37
 8005d8e:	d901      	bls.n	8005d94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d90:	2337      	movs	r3, #55	@ 0x37
 8005d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	2200      	movs	r2, #0
 8005da4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff f966 	bl	800507c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	3318      	adds	r3, #24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff f961 	bl	800507c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	69b8      	ldr	r0, [r7, #24]
 8005de4:	f001 f93e 	bl	8007064 <pxPortInitialiseStack>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e0c:	f001 fa5c 	bl	80072c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e10:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec8 <prvAddNewTaskToReadyList+0xc4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec8 <prvAddNewTaskToReadyList+0xc4>)
 8005e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e22:	4a2a      	ldr	r2, [pc, #168]	@ (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e28:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <prvAddNewTaskToReadyList+0xc4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d110      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e30:	f000 fc1e 	bl	8006670 <prvInitialiseTaskLists>
 8005e34:	e00d      	b.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e36:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <prvAddNewTaskToReadyList+0xcc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e3e:	4b23      	ldr	r3, [pc, #140]	@ (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d802      	bhi.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e52:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <prvAddNewTaskToReadyList+0xd0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed4 <prvAddNewTaskToReadyList+0xd0>)
 8005e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <prvAddNewTaskToReadyList+0xd0>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <prvAddNewTaskToReadyList+0xd4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <prvAddNewTaskToReadyList+0x74>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <prvAddNewTaskToReadyList+0xd4>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <prvAddNewTaskToReadyList+0xd8>)
 8005e86:	441a      	add	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7ff f901 	bl	8005096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e94:	f001 fa4a 	bl	800732c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <prvAddNewTaskToReadyList+0xcc>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d207      	bcs.n	8005ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <prvAddNewTaskToReadyList+0xdc>)
 8005eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000cf4 	.word	0x20000cf4
 8005ecc:	20000820 	.word	0x20000820
 8005ed0:	20000d00 	.word	0x20000d00
 8005ed4:	20000d10 	.word	0x20000d10
 8005ed8:	20000cfc 	.word	0x20000cfc
 8005edc:	20000824 	.word	0x20000824
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d018      	beq.n	8005f28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ef6:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <vTaskDelay+0x64>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <vTaskDelay+0x32>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60bb      	str	r3, [r7, #8]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f16:	f000 f883 	bl	8006020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fcf3 	bl	8006908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f22:	f000 f88b 	bl	800603c <xTaskResumeAll>
 8005f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f2e:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <vTaskDelay+0x68>)
 8005f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000d1c 	.word	0x20000d1c
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f5e:	463a      	mov	r2, r7
 8005f60:	1d39      	adds	r1, r7, #4
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff f834 	bl	8004fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	9202      	str	r2, [sp, #8]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	4922      	ldr	r1, [pc, #136]	@ (8006008 <vTaskStartScheduler+0xb8>)
 8005f80:	4822      	ldr	r0, [pc, #136]	@ (800600c <vTaskStartScheduler+0xbc>)
 8005f82:	f7ff fe09 	bl	8005b98 <xTaskCreateStatic>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4a21      	ldr	r2, [pc, #132]	@ (8006010 <vTaskStartScheduler+0xc0>)
 8005f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f8c:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <vTaskStartScheduler+0xc0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e001      	b.n	8005f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d102      	bne.n	8005faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fa4:	f000 fd04 	bl	80069b0 <xTimerCreateTimerTask>
 8005fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d116      	bne.n	8005fde <vTaskStartScheduler+0x8e>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	613b      	str	r3, [r7, #16]
}
 8005fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc4:	4b13      	ldr	r3, [pc, #76]	@ (8006014 <vTaskStartScheduler+0xc4>)
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fcc:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <vTaskStartScheduler+0xc8>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fd2:	4b12      	ldr	r3, [pc, #72]	@ (800601c <vTaskStartScheduler+0xcc>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fd8:	f001 f8d2 	bl	8007180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fdc:	e00f      	b.n	8005ffe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fe4:	d10b      	bne.n	8005ffe <vTaskStartScheduler+0xae>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60fb      	str	r3, [r7, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <vTaskStartScheduler+0xaa>
}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	08007acc 	.word	0x08007acc
 800600c:	08006641 	.word	0x08006641
 8006010:	20000d18 	.word	0x20000d18
 8006014:	20000d14 	.word	0x20000d14
 8006018:	20000d00 	.word	0x20000d00
 800601c:	20000cf8 	.word	0x20000cf8

08006020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006024:	4b04      	ldr	r3, [pc, #16]	@ (8006038 <vTaskSuspendAll+0x18>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	4a03      	ldr	r2, [pc, #12]	@ (8006038 <vTaskSuspendAll+0x18>)
 800602c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800602e:	bf00      	nop
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20000d1c 	.word	0x20000d1c

0800603c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800604a:	4b42      	ldr	r3, [pc, #264]	@ (8006154 <xTaskResumeAll+0x118>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <xTaskResumeAll+0x2e>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	603b      	str	r3, [r7, #0]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800606a:	f001 f92d 	bl	80072c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800606e:	4b39      	ldr	r3, [pc, #228]	@ (8006154 <xTaskResumeAll+0x118>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	4a37      	ldr	r2, [pc, #220]	@ (8006154 <xTaskResumeAll+0x118>)
 8006076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006078:	4b36      	ldr	r3, [pc, #216]	@ (8006154 <xTaskResumeAll+0x118>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d162      	bne.n	8006146 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006080:	4b35      	ldr	r3, [pc, #212]	@ (8006158 <xTaskResumeAll+0x11c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05e      	beq.n	8006146 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006088:	e02f      	b.n	80060ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608a:	4b34      	ldr	r3, [pc, #208]	@ (800615c <xTaskResumeAll+0x120>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3318      	adds	r3, #24
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff f85a 	bl	8005150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3304      	adds	r3, #4
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff f855 	bl	8005150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <xTaskResumeAll+0x124>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d903      	bls.n	80060ba <xTaskResumeAll+0x7e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006160 <xTaskResumeAll+0x124>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a27      	ldr	r2, [pc, #156]	@ (8006164 <xTaskResumeAll+0x128>)
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fe ffe0 	bl	8005096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b23      	ldr	r3, [pc, #140]	@ (8006168 <xTaskResumeAll+0x12c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d302      	bcc.n	80060ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80060e4:	4b21      	ldr	r3, [pc, #132]	@ (800616c <xTaskResumeAll+0x130>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ea:	4b1c      	ldr	r3, [pc, #112]	@ (800615c <xTaskResumeAll+0x120>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1cb      	bne.n	800608a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060f8:	f000 fb58 	bl	80067ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <xTaskResumeAll+0x134>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d010      	beq.n	800612a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006108:	f000 f846 	bl	8006198 <xTaskIncrementTick>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006112:	4b16      	ldr	r3, [pc, #88]	@ (800616c <xTaskResumeAll+0x130>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3b01      	subs	r3, #1
 800611c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f1      	bne.n	8006108 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006124:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <xTaskResumeAll+0x134>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800612a:	4b10      	ldr	r3, [pc, #64]	@ (800616c <xTaskResumeAll+0x130>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006132:	2301      	movs	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006136:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <xTaskResumeAll+0x138>)
 8006138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006146:	f001 f8f1 	bl	800732c <vPortExitCritical>

	return xAlreadyYielded;
 800614a:	68bb      	ldr	r3, [r7, #8]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000d1c 	.word	0x20000d1c
 8006158:	20000cf4 	.word	0x20000cf4
 800615c:	20000cb4 	.word	0x20000cb4
 8006160:	20000cfc 	.word	0x20000cfc
 8006164:	20000824 	.word	0x20000824
 8006168:	20000820 	.word	0x20000820
 800616c:	20000d08 	.word	0x20000d08
 8006170:	20000d04 	.word	0x20000d04
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800617e:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <xTaskGetTickCount+0x1c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006184:	687b      	ldr	r3, [r7, #4]
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000cf8 	.word	0x20000cf8

08006198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a2:	4b4f      	ldr	r3, [pc, #316]	@ (80062e0 <xTaskIncrementTick+0x148>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 8090 	bne.w	80062cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061ac:	4b4d      	ldr	r3, [pc, #308]	@ (80062e4 <xTaskIncrementTick+0x14c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061b4:	4a4b      	ldr	r2, [pc, #300]	@ (80062e4 <xTaskIncrementTick+0x14c>)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d121      	bne.n	8006204 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061c0:	4b49      	ldr	r3, [pc, #292]	@ (80062e8 <xTaskIncrementTick+0x150>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xTaskIncrementTick+0x46>
 80061e2:	4b41      	ldr	r3, [pc, #260]	@ (80062e8 <xTaskIncrementTick+0x150>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	4b40      	ldr	r3, [pc, #256]	@ (80062ec <xTaskIncrementTick+0x154>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3e      	ldr	r2, [pc, #248]	@ (80062e8 <xTaskIncrementTick+0x150>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	4a3e      	ldr	r2, [pc, #248]	@ (80062ec <xTaskIncrementTick+0x154>)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	4b3e      	ldr	r3, [pc, #248]	@ (80062f0 <xTaskIncrementTick+0x158>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	4a3c      	ldr	r2, [pc, #240]	@ (80062f0 <xTaskIncrementTick+0x158>)
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f000 fad4 	bl	80067ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006204:	4b3b      	ldr	r3, [pc, #236]	@ (80062f4 <xTaskIncrementTick+0x15c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	d349      	bcc.n	80062a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800620e:	4b36      	ldr	r3, [pc, #216]	@ (80062e8 <xTaskIncrementTick+0x150>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006218:	4b36      	ldr	r3, [pc, #216]	@ (80062f4 <xTaskIncrementTick+0x15c>)
 800621a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800621e:	601a      	str	r2, [r3, #0]
					break;
 8006220:	e03f      	b.n	80062a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006222:	4b31      	ldr	r3, [pc, #196]	@ (80062e8 <xTaskIncrementTick+0x150>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d203      	bcs.n	8006242 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800623a:	4a2e      	ldr	r2, [pc, #184]	@ (80062f4 <xTaskIncrementTick+0x15c>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006240:	e02f      	b.n	80062a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	3304      	adds	r3, #4
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe ff82 	bl	8005150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	2b00      	cmp	r3, #0
 8006252:	d004      	beq.n	800625e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3318      	adds	r3, #24
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe ff79 	bl	8005150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006262:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <xTaskIncrementTick+0x160>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d903      	bls.n	8006272 <xTaskIncrementTick+0xda>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626e:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <xTaskIncrementTick+0x160>)
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <xTaskIncrementTick+0x164>)
 8006280:	441a      	add	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f7fe ff04 	bl	8005096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006292:	4b1b      	ldr	r3, [pc, #108]	@ (8006300 <xTaskIncrementTick+0x168>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	429a      	cmp	r2, r3
 800629a:	d3b8      	bcc.n	800620e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a0:	e7b5      	b.n	800620e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062a2:	4b17      	ldr	r3, [pc, #92]	@ (8006300 <xTaskIncrementTick+0x168>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a8:	4914      	ldr	r1, [pc, #80]	@ (80062fc <xTaskIncrementTick+0x164>)
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d901      	bls.n	80062be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062be:	4b11      	ldr	r3, [pc, #68]	@ (8006304 <xTaskIncrementTick+0x16c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80062c6:	2301      	movs	r3, #1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e004      	b.n	80062d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <xTaskIncrementTick+0x170>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006308 <xTaskIncrementTick+0x170>)
 80062d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062d6:	697b      	ldr	r3, [r7, #20]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000d1c 	.word	0x20000d1c
 80062e4:	20000cf8 	.word	0x20000cf8
 80062e8:	20000cac 	.word	0x20000cac
 80062ec:	20000cb0 	.word	0x20000cb0
 80062f0:	20000d0c 	.word	0x20000d0c
 80062f4:	20000d14 	.word	0x20000d14
 80062f8:	20000cfc 	.word	0x20000cfc
 80062fc:	20000824 	.word	0x20000824
 8006300:	20000820 	.word	0x20000820
 8006304:	20000d08 	.word	0x20000d08
 8006308:	20000d04 	.word	0x20000d04

0800630c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006312:	4b28      	ldr	r3, [pc, #160]	@ (80063b4 <vTaskSwitchContext+0xa8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800631a:	4b27      	ldr	r3, [pc, #156]	@ (80063b8 <vTaskSwitchContext+0xac>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006320:	e042      	b.n	80063a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006322:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <vTaskSwitchContext+0xac>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <vTaskSwitchContext+0xb0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e011      	b.n	8006354 <vTaskSwitchContext+0x48>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <vTaskSwitchContext+0x42>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	607b      	str	r3, [r7, #4]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <vTaskSwitchContext+0x3e>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3b01      	subs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	491a      	ldr	r1, [pc, #104]	@ (80063c0 <vTaskSwitchContext+0xb4>)
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0e3      	beq.n	8006330 <vTaskSwitchContext+0x24>
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <vTaskSwitchContext+0xb4>)
 8006374:	4413      	add	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	3308      	adds	r3, #8
 800638a:	429a      	cmp	r2, r3
 800638c:	d104      	bne.n	8006398 <vTaskSwitchContext+0x8c>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <vTaskSwitchContext+0xb8>)
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	4a06      	ldr	r2, [pc, #24]	@ (80063bc <vTaskSwitchContext+0xb0>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	20000d1c 	.word	0x20000d1c
 80063b8:	20000d08 	.word	0x20000d08
 80063bc:	20000cfc 	.word	0x20000cfc
 80063c0:	20000824 	.word	0x20000824
 80063c4:	20000820 	.word	0x20000820

080063c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <vTaskPlaceOnEventList+0x48>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3318      	adds	r3, #24
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fe fe70 	bl	80050de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063fe:	2101      	movs	r1, #1
 8006400:	6838      	ldr	r0, [r7, #0]
 8006402:	f000 fa81 	bl	8006908 <prvAddCurrentTaskToDelayedList>
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000820 	.word	0x20000820

08006414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	617b      	str	r3, [r7, #20]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800643e:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <vTaskPlaceOnEventListRestricted+0x54>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3318      	adds	r3, #24
 8006444:	4619      	mov	r1, r3
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7fe fe25 	bl	8005096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006456:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	68b8      	ldr	r0, [r7, #8]
 800645c:	f000 fa54 	bl	8006908 <prvAddCurrentTaskToDelayedList>
	}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000820 	.word	0x20000820

0800646c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60fb      	str	r3, [r7, #12]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fe56 	bl	8005150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a4:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <xTaskRemoveFromEventList+0xb0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11d      	bne.n	80064e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe fe4d 	bl	8005150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <xTaskRemoveFromEventList+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d903      	bls.n	80064ca <xTaskRemoveFromEventList+0x5e>
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a16      	ldr	r2, [pc, #88]	@ (8006520 <xTaskRemoveFromEventList+0xb4>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a13      	ldr	r2, [pc, #76]	@ (8006524 <xTaskRemoveFromEventList+0xb8>)
 80064d8:	441a      	add	r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3304      	adds	r3, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fe fdd8 	bl	8005096 <vListInsertEnd>
 80064e6:	e005      	b.n	80064f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3318      	adds	r3, #24
 80064ec:	4619      	mov	r1, r3
 80064ee:	480e      	ldr	r0, [pc, #56]	@ (8006528 <xTaskRemoveFromEventList+0xbc>)
 80064f0:	f7fe fdd1 	bl	8005096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f8:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <xTaskRemoveFromEventList+0xc0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d905      	bls.n	800650e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006506:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <xTaskRemoveFromEventList+0xc4>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e001      	b.n	8006512 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006512:	697b      	ldr	r3, [r7, #20]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000d1c 	.word	0x20000d1c
 8006520:	20000cfc 	.word	0x20000cfc
 8006524:	20000824 	.word	0x20000824
 8006528:	20000cb4 	.word	0x20000cb4
 800652c:	20000820 	.word	0x20000820
 8006530:	20000d08 	.word	0x20000d08

08006534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <vTaskInternalSetTimeOutState+0x24>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <vTaskInternalSetTimeOutState+0x28>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000d0c 	.word	0x20000d0c
 800655c:	20000cf8 	.word	0x20000cf8

08006560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065a6:	f000 fe8f 	bl	80072c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006620 <xTaskCheckForTimeOut+0xc0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c2:	d102      	bne.n	80065ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	e023      	b.n	8006612 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <xTaskCheckForTimeOut+0xc4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d007      	beq.n	80065e6 <xTaskCheckForTimeOut+0x86>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	e015      	b.n	8006612 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d20b      	bcs.n	8006608 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff99 	bl	8006534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e004      	b.n	8006612 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800660e:	2301      	movs	r3, #1
 8006610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006612:	f000 fe8b 	bl	800732c <vPortExitCritical>

	return xReturn;
 8006616:	69fb      	ldr	r3, [r7, #28]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20000cf8 	.word	0x20000cf8
 8006624:	20000d0c 	.word	0x20000d0c

08006628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800662c:	4b03      	ldr	r3, [pc, #12]	@ (800663c <vTaskMissedYield+0x14>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	bf00      	nop
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000d08 	.word	0x20000d08

08006640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006648:	f000 f852 	bl	80066f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <prvIdleTask+0x28>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d9f9      	bls.n	8006648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006654:	4b05      	ldr	r3, [pc, #20]	@ (800666c <prvIdleTask+0x2c>)
 8006656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006664:	e7f0      	b.n	8006648 <prvIdleTask+0x8>
 8006666:	bf00      	nop
 8006668:	20000824 	.word	0x20000824
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	e00c      	b.n	8006696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a12      	ldr	r2, [pc, #72]	@ (80066d0 <prvInitialiseTaskLists+0x60>)
 8006688:	4413      	add	r3, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fcd6 	bl	800503c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3301      	adds	r3, #1
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b37      	cmp	r3, #55	@ 0x37
 800669a:	d9ef      	bls.n	800667c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800669c:	480d      	ldr	r0, [pc, #52]	@ (80066d4 <prvInitialiseTaskLists+0x64>)
 800669e:	f7fe fccd 	bl	800503c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066a2:	480d      	ldr	r0, [pc, #52]	@ (80066d8 <prvInitialiseTaskLists+0x68>)
 80066a4:	f7fe fcca 	bl	800503c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066a8:	480c      	ldr	r0, [pc, #48]	@ (80066dc <prvInitialiseTaskLists+0x6c>)
 80066aa:	f7fe fcc7 	bl	800503c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ae:	480c      	ldr	r0, [pc, #48]	@ (80066e0 <prvInitialiseTaskLists+0x70>)
 80066b0:	f7fe fcc4 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066b4:	480b      	ldr	r0, [pc, #44]	@ (80066e4 <prvInitialiseTaskLists+0x74>)
 80066b6:	f7fe fcc1 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066ba:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <prvInitialiseTaskLists+0x78>)
 80066bc:	4a05      	ldr	r2, [pc, #20]	@ (80066d4 <prvInitialiseTaskLists+0x64>)
 80066be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066c0:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <prvInitialiseTaskLists+0x7c>)
 80066c2:	4a05      	ldr	r2, [pc, #20]	@ (80066d8 <prvInitialiseTaskLists+0x68>)
 80066c4:	601a      	str	r2, [r3, #0]
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000824 	.word	0x20000824
 80066d4:	20000c84 	.word	0x20000c84
 80066d8:	20000c98 	.word	0x20000c98
 80066dc:	20000cb4 	.word	0x20000cb4
 80066e0:	20000cc8 	.word	0x20000cc8
 80066e4:	20000ce0 	.word	0x20000ce0
 80066e8:	20000cac 	.word	0x20000cac
 80066ec:	20000cb0 	.word	0x20000cb0

080066f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f6:	e019      	b.n	800672c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066f8:	f000 fde6 	bl	80072c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fc:	4b10      	ldr	r3, [pc, #64]	@ (8006740 <prvCheckTasksWaitingTermination+0x50>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fd21 	bl	8005150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <prvCheckTasksWaitingTermination+0x54>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	4a0b      	ldr	r2, [pc, #44]	@ (8006744 <prvCheckTasksWaitingTermination+0x54>)
 8006716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006718:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <prvCheckTasksWaitingTermination+0x58>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a0a      	ldr	r2, [pc, #40]	@ (8006748 <prvCheckTasksWaitingTermination+0x58>)
 8006720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006722:	f000 fe03 	bl	800732c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f810 	bl	800674c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800672c:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <prvCheckTasksWaitingTermination+0x58>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e1      	bne.n	80066f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000cc8 	.word	0x20000cc8
 8006744:	20000cf4 	.word	0x20000cf4
 8006748:	20000cdc 	.word	0x20000cdc

0800674c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800675a:	2b00      	cmp	r3, #0
 800675c:	d108      	bne.n	8006770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	4618      	mov	r0, r3
 8006764:	f000 ffa0 	bl	80076a8 <vPortFree>
				vPortFree( pxTCB );
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 ff9d 	bl	80076a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800676e:	e019      	b.n	80067a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006776:	2b01      	cmp	r3, #1
 8006778:	d103      	bne.n	8006782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 ff94 	bl	80076a8 <vPortFree>
	}
 8006780:	e010      	b.n	80067a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006788:	2b02      	cmp	r3, #2
 800678a:	d00b      	beq.n	80067a4 <prvDeleteTCB+0x58>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <prvDeleteTCB+0x54>
	}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <prvResetNextTaskUnblockTime+0x38>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <prvResetNextTaskUnblockTime+0x3c>)
 80067be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067c4:	e008      	b.n	80067d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c6:	4b07      	ldr	r3, [pc, #28]	@ (80067e4 <prvResetNextTaskUnblockTime+0x38>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <prvResetNextTaskUnblockTime+0x3c>)
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000cac 	.word	0x20000cac
 80067e8:	20000d14 	.word	0x20000d14

080067ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006820 <xTaskGetSchedulerState+0x34>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067fa:	2301      	movs	r3, #1
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	e008      	b.n	8006812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006800:	4b08      	ldr	r3, [pc, #32]	@ (8006824 <xTaskGetSchedulerState+0x38>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006808:	2302      	movs	r3, #2
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	e001      	b.n	8006812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006812:	687b      	ldr	r3, [r7, #4]
	}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20000d00 	.word	0x20000d00
 8006824:	20000d1c 	.word	0x20000d1c

08006828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d058      	beq.n	80068f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800683e:	4b2f      	ldr	r3, [pc, #188]	@ (80068fc <xTaskPriorityDisinherit+0xd4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d00b      	beq.n	8006860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60fb      	str	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	60bb      	str	r3, [r7, #8]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006884:	1e5a      	subs	r2, r3, #1
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006892:	429a      	cmp	r2, r3
 8006894:	d02c      	beq.n	80068f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689a:	2b00      	cmp	r3, #0
 800689c:	d128      	bne.n	80068f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fc54 	bl	8005150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <xTaskPriorityDisinherit+0xd8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d903      	bls.n	80068d0 <xTaskPriorityDisinherit+0xa8>
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006900 <xTaskPriorityDisinherit+0xd8>)
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4a09      	ldr	r2, [pc, #36]	@ (8006904 <xTaskPriorityDisinherit+0xdc>)
 80068de:	441a      	add	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7fe fbd5 	bl	8005096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068f0:	697b      	ldr	r3, [r7, #20]
	}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000820 	.word	0x20000820
 8006900:	20000cfc 	.word	0x20000cfc
 8006904:	20000824 	.word	0x20000824

08006908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006912:	4b21      	ldr	r3, [pc, #132]	@ (8006998 <prvAddCurrentTaskToDelayedList+0x90>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006918:	4b20      	ldr	r3, [pc, #128]	@ (800699c <prvAddCurrentTaskToDelayedList+0x94>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3304      	adds	r3, #4
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fc16 	bl	8005150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800692a:	d10a      	bne.n	8006942 <prvAddCurrentTaskToDelayedList+0x3a>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006932:	4b1a      	ldr	r3, [pc, #104]	@ (800699c <prvAddCurrentTaskToDelayedList+0x94>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4819      	ldr	r0, [pc, #100]	@ (80069a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800693c:	f7fe fbab 	bl	8005096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006940:	e026      	b.n	8006990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800694a:	4b14      	ldr	r3, [pc, #80]	@ (800699c <prvAddCurrentTaskToDelayedList+0x94>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	429a      	cmp	r2, r3
 8006958:	d209      	bcs.n	800696e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800695a:	4b12      	ldr	r3, [pc, #72]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <prvAddCurrentTaskToDelayedList+0x94>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3304      	adds	r3, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7fe fbb9 	bl	80050de <vListInsert>
}
 800696c:	e010      	b.n	8006990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696e:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <prvAddCurrentTaskToDelayedList+0x94>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7fe fbaf 	bl	80050de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006980:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	d202      	bcs.n	8006990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800698a:	4a08      	ldr	r2, [pc, #32]	@ (80069ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6013      	str	r3, [r2, #0]
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000cf8 	.word	0x20000cf8
 800699c:	20000820 	.word	0x20000820
 80069a0:	20000ce0 	.word	0x20000ce0
 80069a4:	20000cb0 	.word	0x20000cb0
 80069a8:	20000cac 	.word	0x20000cac
 80069ac:	20000d14 	.word	0x20000d14

080069b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	@ 0x28
 80069b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069ba:	f000 fb13 	bl	8006fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069be:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <xTimerCreateTimerTask+0x84>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d021      	beq.n	8006a0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069ce:	1d3a      	adds	r2, r7, #4
 80069d0:	f107 0108 	add.w	r1, r7, #8
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fb15 	bl	8005008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	2302      	movs	r3, #2
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2300      	movs	r3, #0
 80069ee:	460a      	mov	r2, r1
 80069f0:	4911      	ldr	r1, [pc, #68]	@ (8006a38 <xTimerCreateTimerTask+0x88>)
 80069f2:	4812      	ldr	r0, [pc, #72]	@ (8006a3c <xTimerCreateTimerTask+0x8c>)
 80069f4:	f7ff f8d0 	bl	8005b98 <xTaskCreateStatic>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4a11      	ldr	r2, [pc, #68]	@ (8006a40 <xTimerCreateTimerTask+0x90>)
 80069fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069fe:	4b10      	ldr	r3, [pc, #64]	@ (8006a40 <xTimerCreateTimerTask+0x90>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a06:	2301      	movs	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	613b      	str	r3, [r7, #16]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a28:	697b      	ldr	r3, [r7, #20]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000d50 	.word	0x20000d50
 8006a38:	08007ad4 	.word	0x08007ad4
 8006a3c:	08006b7d 	.word	0x08006b7d
 8006a40:	20000d54 	.word	0x20000d54

08006a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	@ 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a74:	4b19      	ldr	r3, [pc, #100]	@ (8006adc <xTimerGenericCommand+0x98>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02a      	beq.n	8006ad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	dc18      	bgt.n	8006ac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a8e:	f7ff fead 	bl	80067ec <xTaskGetSchedulerState>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d109      	bne.n	8006aac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a98:	4b10      	ldr	r3, [pc, #64]	@ (8006adc <xTimerGenericCommand+0x98>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	f107 0110 	add.w	r1, r7, #16
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa4:	f7fe fc88 	bl	80053b8 <xQueueGenericSend>
 8006aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aaa:	e012      	b.n	8006ad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006aac:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <xTimerGenericCommand+0x98>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	f107 0110 	add.w	r1, r7, #16
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f7fe fc7e 	bl	80053b8 <xQueueGenericSend>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006abe:	e008      	b.n	8006ad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ac0:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <xTimerGenericCommand+0x98>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f107 0110 	add.w	r1, r7, #16
 8006ac8:	2300      	movs	r3, #0
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	f7fe fd76 	bl	80055bc <xQueueGenericSendFromISR>
 8006ad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3728      	adds	r7, #40	@ 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000d50 	.word	0x20000d50

08006ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aea:	4b23      	ldr	r3, [pc, #140]	@ (8006b78 <prvProcessExpiredTimer+0x98>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fb29 	bl	8005150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d023      	beq.n	8006b54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	18d1      	adds	r1, r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	6978      	ldr	r0, [r7, #20]
 8006b1a:	f000 f8d5 	bl	8006cc8 <prvInsertTimerInActiveList>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b24:	2300      	movs	r3, #0
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff ff88 	bl	8006a44 <xTimerGenericCommand>
 8006b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d114      	bne.n	8006b66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60fb      	str	r3, [r7, #12]
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	6978      	ldr	r0, [r7, #20]
 8006b6c:	4798      	blx	r3
}
 8006b6e:	bf00      	nop
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000d48 	.word	0x20000d48

08006b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f859 	bl	8006c40 <prvGetNextExpireTime>
 8006b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f805 	bl	8006ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b9a:	f000 f8d7 	bl	8006d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b9e:	bf00      	nop
 8006ba0:	e7f0      	b.n	8006b84 <prvTimerTask+0x8>
	...

08006ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bae:	f7ff fa37 	bl	8006020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f866 	bl	8006c88 <prvSampleTimeNow>
 8006bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d130      	bne.n	8006c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <prvProcessTimerOrBlockTask+0x3c>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d806      	bhi.n	8006be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bd2:	f7ff fa33 	bl	800603c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ff81 	bl	8006ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bde:	e024      	b.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006be6:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <prvProcessTimerOrBlockTask+0x90>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <prvProcessTimerOrBlockTask+0x50>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <prvProcessTimerOrBlockTask+0x52>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c38 <prvProcessTimerOrBlockTask+0x94>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7fe ff93 	bl	8005b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c0a:	f7ff fa17 	bl	800603c <xTaskResumeAll>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c14:	4b09      	ldr	r3, [pc, #36]	@ (8006c3c <prvProcessTimerOrBlockTask+0x98>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
}
 8006c24:	e001      	b.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c26:	f7ff fa09 	bl	800603c <xTaskResumeAll>
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000d4c 	.word	0x20000d4c
 8006c38:	20000d50 	.word	0x20000d50
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c48:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <prvGetNextExpireTime+0x44>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <prvGetNextExpireTime+0x16>
 8006c52:	2201      	movs	r2, #1
 8006c54:	e000      	b.n	8006c58 <prvGetNextExpireTime+0x18>
 8006c56:	2200      	movs	r2, #0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c64:	4b07      	ldr	r3, [pc, #28]	@ (8006c84 <prvGetNextExpireTime+0x44>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e001      	b.n	8006c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c74:	68fb      	ldr	r3, [r7, #12]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000d48 	.word	0x20000d48

08006c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c90:	f7ff fa72 	bl	8006178 <xTaskGetTickCount>
 8006c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c96:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <prvSampleTimeNow+0x3c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d205      	bcs.n	8006cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ca0:	f000 f93a 	bl	8006f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cb2:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <prvSampleTimeNow+0x3c>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000d58 	.word	0x20000d58

08006cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d812      	bhi.n	8006d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	1ad2      	subs	r2, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e01b      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d02:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <prvInsertTimerInActiveList+0x7c>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f7fe f9e6 	bl	80050de <vListInsert>
 8006d12:	e012      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d206      	bcs.n	8006d2a <prvInsertTimerInActiveList+0x62>
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e007      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d2a:	4b07      	ldr	r3, [pc, #28]	@ (8006d48 <prvInsertTimerInActiveList+0x80>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f7fe f9d2 	bl	80050de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000d4c 	.word	0x20000d4c
 8006d48:	20000d48 	.word	0x20000d48

08006d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	@ 0x38
 8006d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d52:	e0ce      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da19      	bge.n	8006d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61fb      	str	r3, [r7, #28]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	6850      	ldr	r0, [r2, #4]
 8006d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d88:	6892      	ldr	r2, [r2, #8]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f2c0 80ae 	blt.w	8006ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	3304      	adds	r3, #4
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe f9d2 	bl	8005150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dac:	463b      	mov	r3, r7
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff ff6a 	bl	8006c88 <prvSampleTimeNow>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b09      	cmp	r3, #9
 8006dba:	f200 8097 	bhi.w	8006eec <prvProcessReceivedCommands+0x1a0>
 8006dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <prvProcessReceivedCommands+0x78>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006ded 	.word	0x08006ded
 8006dd0:	08006e63 	.word	0x08006e63
 8006dd4:	08006e77 	.word	0x08006e77
 8006dd8:	08006ec3 	.word	0x08006ec3
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006ded 	.word	0x08006ded
 8006de4:	08006e63 	.word	0x08006e63
 8006de8:	08006e77 	.word	0x08006e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	18d1      	adds	r1, r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e0c:	f7ff ff5c 	bl	8006cc8 <prvInsertTimerInActiveList>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d06c      	beq.n	8006ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d061      	beq.n	8006ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	441a      	add	r2, r3
 8006e34:	2300      	movs	r3, #0
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e3e:	f7ff fe01 	bl	8006a44 <xTimerGenericCommand>
 8006e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d152      	bne.n	8006ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	61bb      	str	r3, [r7, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e74:	e03d      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	617b      	str	r3, [r7, #20]
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	e7fd      	b.n	8006eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	18d1      	adds	r1, r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ebc:	f7ff ff04 	bl	8006cc8 <prvInsertTimerInActiveList>
					break;
 8006ec0:	e017      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed2:	f000 fbe9 	bl	80076a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ed6:	e00c      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006eea:	e002      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8006ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ef2:	4b08      	ldr	r3, [pc, #32]	@ (8006f14 <prvProcessReceivedCommands+0x1c8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	1d39      	adds	r1, r7, #4
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fbfc 	bl	80056f8 <xQueueReceive>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af26 	bne.w	8006d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3730      	adds	r7, #48	@ 0x30
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000d50 	.word	0x20000d50

08006f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f1e:	e049      	b.n	8006fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f20:	4b2e      	ldr	r3, [pc, #184]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe f909 	bl	8005150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02f      	beq.n	8006fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90e      	bls.n	8006f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f72:	4b1a      	ldr	r3, [pc, #104]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fe f8ae 	bl	80050de <vListInsert>
 8006f82:	e017      	b.n	8006fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f84:	2300      	movs	r3, #0
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff fd58 	bl	8006a44 <xTimerGenericCommand>
 8006f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	603b      	str	r3, [r7, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb4:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1b0      	bne.n	8006f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fbe:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <prvSwitchTimerLists+0xc8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a04      	ldr	r2, [pc, #16]	@ (8006fdc <prvSwitchTimerLists+0xc4>)
 8006fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fcc:	4a04      	ldr	r2, [pc, #16]	@ (8006fe0 <prvSwitchTimerLists+0xc8>)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6013      	str	r3, [r2, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000d48 	.word	0x20000d48
 8006fe0:	20000d4c 	.word	0x20000d4c

08006fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fea:	f000 f96d 	bl	80072c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fee:	4b15      	ldr	r3, [pc, #84]	@ (8007044 <prvCheckForValidListAndQueue+0x60>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d120      	bne.n	8007038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ff6:	4814      	ldr	r0, [pc, #80]	@ (8007048 <prvCheckForValidListAndQueue+0x64>)
 8006ff8:	f7fe f820 	bl	800503c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ffc:	4813      	ldr	r0, [pc, #76]	@ (800704c <prvCheckForValidListAndQueue+0x68>)
 8006ffe:	f7fe f81d 	bl	800503c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007002:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <prvCheckForValidListAndQueue+0x6c>)
 8007004:	4a10      	ldr	r2, [pc, #64]	@ (8007048 <prvCheckForValidListAndQueue+0x64>)
 8007006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007008:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <prvCheckForValidListAndQueue+0x70>)
 800700a:	4a10      	ldr	r2, [pc, #64]	@ (800704c <prvCheckForValidListAndQueue+0x68>)
 800700c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800700e:	2300      	movs	r3, #0
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4b11      	ldr	r3, [pc, #68]	@ (8007058 <prvCheckForValidListAndQueue+0x74>)
 8007014:	4a11      	ldr	r2, [pc, #68]	@ (800705c <prvCheckForValidListAndQueue+0x78>)
 8007016:	2110      	movs	r1, #16
 8007018:	200a      	movs	r0, #10
 800701a:	f7fe f92d 	bl	8005278 <xQueueGenericCreateStatic>
 800701e:	4603      	mov	r3, r0
 8007020:	4a08      	ldr	r2, [pc, #32]	@ (8007044 <prvCheckForValidListAndQueue+0x60>)
 8007022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007024:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <prvCheckForValidListAndQueue+0x60>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800702c:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <prvCheckForValidListAndQueue+0x60>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	490b      	ldr	r1, [pc, #44]	@ (8007060 <prvCheckForValidListAndQueue+0x7c>)
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fd52 	bl	8005adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007038:	f000 f978 	bl	800732c <vPortExitCritical>
}
 800703c:	bf00      	nop
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000d50 	.word	0x20000d50
 8007048:	20000d20 	.word	0x20000d20
 800704c:	20000d34 	.word	0x20000d34
 8007050:	20000d48 	.word	0x20000d48
 8007054:	20000d4c 	.word	0x20000d4c
 8007058:	20000dfc 	.word	0x20000dfc
 800705c:	20000d5c 	.word	0x20000d5c
 8007060:	08007adc 	.word	0x08007adc

08007064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3b04      	subs	r3, #4
 8007074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3b04      	subs	r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 0201 	bic.w	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b04      	subs	r3, #4
 8007092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007094:	4a0c      	ldr	r2, [pc, #48]	@ (80070c8 <pxPortInitialiseStack+0x64>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b14      	subs	r3, #20
 800709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b04      	subs	r3, #4
 80070aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f06f 0202 	mvn.w	r2, #2
 80070b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3b20      	subs	r3, #32
 80070b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	080070cd 	.word	0x080070cd

080070cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070d6:	4b13      	ldr	r3, [pc, #76]	@ (8007124 <prvTaskExitError+0x58>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070de:	d00b      	beq.n	80070f8 <prvTaskExitError+0x2c>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <prvTaskExitError+0x28>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60bb      	str	r3, [r7, #8]
}
 800710a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800710c:	bf00      	nop
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0fc      	beq.n	800710e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
	...

08007130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007130:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <pxCurrentTCBConst2>)
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	6808      	ldr	r0, [r1, #0]
 8007136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713a:	f380 8809 	msr	PSP, r0
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f380 8811 	msr	BASEPRI, r0
 800714a:	4770      	bx	lr
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst2>:
 8007150:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007158:	4808      	ldr	r0, [pc, #32]	@ (800717c <prvPortStartFirstTask+0x24>)
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	6800      	ldr	r0, [r0, #0]
 800715e:	f380 8808 	msr	MSP, r0
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f380 8814 	msr	CONTROL, r0
 800716a:	b662      	cpsie	i
 800716c:	b661      	cpsie	f
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	df00      	svc	0
 8007178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800717a:	bf00      	nop
 800717c:	e000ed08 	.word	0xe000ed08

08007180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007186:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <xPortStartScheduler+0x124>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a47      	ldr	r2, [pc, #284]	@ (80072a8 <xPortStartScheduler+0x128>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d10b      	bne.n	80071a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	613b      	str	r3, [r7, #16]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071a8:	4b3e      	ldr	r3, [pc, #248]	@ (80072a4 <xPortStartScheduler+0x124>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a3f      	ldr	r2, [pc, #252]	@ (80072ac <xPortStartScheduler+0x12c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10b      	bne.n	80071ca <xPortStartScheduler+0x4a>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60fb      	str	r3, [r7, #12]
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071ca:	4b39      	ldr	r3, [pc, #228]	@ (80072b0 <xPortStartScheduler+0x130>)
 80071cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	22ff      	movs	r2, #255	@ 0xff
 80071da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <xPortStartScheduler+0x134>)
 80071f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071f2:	4b31      	ldr	r3, [pc, #196]	@ (80072b8 <xPortStartScheduler+0x138>)
 80071f4:	2207      	movs	r2, #7
 80071f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071f8:	e009      	b.n	800720e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80071fa:	4b2f      	ldr	r3, [pc, #188]	@ (80072b8 <xPortStartScheduler+0x138>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a2d      	ldr	r2, [pc, #180]	@ (80072b8 <xPortStartScheduler+0x138>)
 8007202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007216:	2b80      	cmp	r3, #128	@ 0x80
 8007218:	d0ef      	beq.n	80071fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800721a:	4b27      	ldr	r3, [pc, #156]	@ (80072b8 <xPortStartScheduler+0x138>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1c3 0307 	rsb	r3, r3, #7
 8007222:	2b04      	cmp	r3, #4
 8007224:	d00b      	beq.n	800723e <xPortStartScheduler+0xbe>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	e7fd      	b.n	800723a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800723e:	4b1e      	ldr	r3, [pc, #120]	@ (80072b8 <xPortStartScheduler+0x138>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	4a1c      	ldr	r2, [pc, #112]	@ (80072b8 <xPortStartScheduler+0x138>)
 8007246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007248:	4b1b      	ldr	r3, [pc, #108]	@ (80072b8 <xPortStartScheduler+0x138>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007250:	4a19      	ldr	r2, [pc, #100]	@ (80072b8 <xPortStartScheduler+0x138>)
 8007252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800725c:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <xPortStartScheduler+0x13c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a16      	ldr	r2, [pc, #88]	@ (80072bc <xPortStartScheduler+0x13c>)
 8007262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007268:	4b14      	ldr	r3, [pc, #80]	@ (80072bc <xPortStartScheduler+0x13c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a13      	ldr	r2, [pc, #76]	@ (80072bc <xPortStartScheduler+0x13c>)
 800726e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007274:	f000 f8da 	bl	800742c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007278:	4b11      	ldr	r3, [pc, #68]	@ (80072c0 <xPortStartScheduler+0x140>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800727e:	f000 f8f9 	bl	8007474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007282:	4b10      	ldr	r3, [pc, #64]	@ (80072c4 <xPortStartScheduler+0x144>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a0f      	ldr	r2, [pc, #60]	@ (80072c4 <xPortStartScheduler+0x144>)
 8007288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800728c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800728e:	f7ff ff63 	bl	8007158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007292:	f7ff f83b 	bl	800630c <vTaskSwitchContext>
	prvTaskExitError();
 8007296:	f7ff ff19 	bl	80070cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed00 	.word	0xe000ed00
 80072a8:	410fc271 	.word	0x410fc271
 80072ac:	410fc270 	.word	0x410fc270
 80072b0:	e000e400 	.word	0xe000e400
 80072b4:	20000e4c 	.word	0x20000e4c
 80072b8:	20000e50 	.word	0x20000e50
 80072bc:	e000ed20 	.word	0xe000ed20
 80072c0:	2000000c 	.word	0x2000000c
 80072c4:	e000ef34 	.word	0xe000ef34

080072c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	607b      	str	r3, [r7, #4]
}
 80072e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072e2:	4b10      	ldr	r3, [pc, #64]	@ (8007324 <vPortEnterCritical+0x5c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3301      	adds	r3, #1
 80072e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007324 <vPortEnterCritical+0x5c>)
 80072ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007324 <vPortEnterCritical+0x5c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d110      	bne.n	8007316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <vPortEnterCritical+0x60>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <vPortEnterCritical+0x4e>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	603b      	str	r3, [r7, #0]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vPortEnterCritical+0x4a>
	}
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	2000000c 	.word	0x2000000c
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007332:	4b12      	ldr	r3, [pc, #72]	@ (800737c <vPortExitCritical+0x50>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <vPortExitCritical+0x26>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	607b      	str	r3, [r7, #4]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007352:	4b0a      	ldr	r3, [pc, #40]	@ (800737c <vPortExitCritical+0x50>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3b01      	subs	r3, #1
 8007358:	4a08      	ldr	r2, [pc, #32]	@ (800737c <vPortExitCritical+0x50>)
 800735a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <vPortExitCritical+0x50>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <vPortExitCritical+0x44>
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f383 8811 	msr	BASEPRI, r3
}
 800736e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	2000000c 	.word	0x2000000c

08007380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007380:	f3ef 8009 	mrs	r0, PSP
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	4b15      	ldr	r3, [pc, #84]	@ (80073e0 <pxCurrentTCBConst>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	f01e 0f10 	tst.w	lr, #16
 8007390:	bf08      	it	eq
 8007392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739a:	6010      	str	r0, [r2, #0]
 800739c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073a4:	f380 8811 	msr	BASEPRI, r0
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f7fe ffac 	bl	800630c <vTaskSwitchContext>
 80073b4:	f04f 0000 	mov.w	r0, #0
 80073b8:	f380 8811 	msr	BASEPRI, r0
 80073bc:	bc09      	pop	{r0, r3}
 80073be:	6819      	ldr	r1, [r3, #0]
 80073c0:	6808      	ldr	r0, [r1, #0]
 80073c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c6:	f01e 0f10 	tst.w	lr, #16
 80073ca:	bf08      	it	eq
 80073cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073d0:	f380 8809 	msr	PSP, r0
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	f3af 8000 	nop.w

080073e0 <pxCurrentTCBConst>:
 80073e0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop

080073e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	607b      	str	r3, [r7, #4]
}
 8007400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007402:	f7fe fec9 	bl	8006198 <xTaskIncrementTick>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <xPortSysTickHandler+0x40>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f383 8811 	msr	BASEPRI, r3
}
 800741e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007430:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <vPortSetupTimerInterrupt+0x34>)
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <vPortSetupTimerInterrupt+0x38>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800743c:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <vPortSetupTimerInterrupt+0x3c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0a      	ldr	r2, [pc, #40]	@ (800746c <vPortSetupTimerInterrupt+0x40>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <vPortSetupTimerInterrupt+0x44>)
 800744a:	3b01      	subs	r3, #1
 800744c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800744e:	4b04      	ldr	r3, [pc, #16]	@ (8007460 <vPortSetupTimerInterrupt+0x34>)
 8007450:	2207      	movs	r2, #7
 8007452:	601a      	str	r2, [r3, #0]
}
 8007454:	bf00      	nop
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	e000e010 	.word	0xe000e010
 8007464:	e000e018 	.word	0xe000e018
 8007468:	20000000 	.word	0x20000000
 800746c:	10624dd3 	.word	0x10624dd3
 8007470:	e000e014 	.word	0xe000e014

08007474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007484 <vPortEnableVFP+0x10>
 8007478:	6801      	ldr	r1, [r0, #0]
 800747a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800747e:	6001      	str	r1, [r0, #0]
 8007480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007482:	bf00      	nop
 8007484:	e000ed88 	.word	0xe000ed88

08007488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800748e:	f3ef 8305 	mrs	r3, IPSR
 8007492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d915      	bls.n	80074c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800749a:	4a18      	ldr	r2, [pc, #96]	@ (80074fc <vPortValidateInterruptPriority+0x74>)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074a4:	4b16      	ldr	r3, [pc, #88]	@ (8007500 <vPortValidateInterruptPriority+0x78>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	7afa      	ldrb	r2, [r7, #11]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d20b      	bcs.n	80074c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	e7fd      	b.n	80074c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <vPortValidateInterruptPriority+0x7c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007508 <vPortValidateInterruptPriority+0x80>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d90b      	bls.n	80074ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	603b      	str	r3, [r7, #0]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <vPortValidateInterruptPriority+0x62>
	}
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	e000e3f0 	.word	0xe000e3f0
 8007500:	20000e4c 	.word	0x20000e4c
 8007504:	e000ed0c 	.word	0xe000ed0c
 8007508:	20000e50 	.word	0x20000e50

0800750c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	@ 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007518:	f7fe fd82 	bl	8006020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800751c:	4b5c      	ldr	r3, [pc, #368]	@ (8007690 <pvPortMalloc+0x184>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007524:	f000 f924 	bl	8007770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007528:	4b5a      	ldr	r3, [pc, #360]	@ (8007694 <pvPortMalloc+0x188>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	f040 8095 	bne.w	8007660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01e      	beq.n	800757a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800753c:	2208      	movs	r2, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4413      	add	r3, r2
 8007542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d015      	beq.n	800757a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f023 0307 	bic.w	r3, r3, #7
 8007554:	3308      	adds	r3, #8
 8007556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <pvPortMalloc+0x6e>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	617b      	str	r3, [r7, #20]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d06f      	beq.n	8007660 <pvPortMalloc+0x154>
 8007580:	4b45      	ldr	r3, [pc, #276]	@ (8007698 <pvPortMalloc+0x18c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	d86a      	bhi.n	8007660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800758a:	4b44      	ldr	r3, [pc, #272]	@ (800769c <pvPortMalloc+0x190>)
 800758c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800758e:	4b43      	ldr	r3, [pc, #268]	@ (800769c <pvPortMalloc+0x190>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007594:	e004      	b.n	80075a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d903      	bls.n	80075b2 <pvPortMalloc+0xa6>
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f1      	bne.n	8007596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075b2:	4b37      	ldr	r3, [pc, #220]	@ (8007690 <pvPortMalloc+0x184>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d051      	beq.n	8007660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2208      	movs	r2, #8
 80075c2:	4413      	add	r3, r2
 80075c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	1ad2      	subs	r2, r2, r3
 80075d6:	2308      	movs	r3, #8
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	429a      	cmp	r2, r3
 80075dc:	d920      	bls.n	8007620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <pvPortMalloc+0xfc>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800761a:	69b8      	ldr	r0, [r7, #24]
 800761c:	f000 f90a 	bl	8007834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007620:	4b1d      	ldr	r3, [pc, #116]	@ (8007698 <pvPortMalloc+0x18c>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <pvPortMalloc+0x18c>)
 800762c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800762e:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <pvPortMalloc+0x18c>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b1b      	ldr	r3, [pc, #108]	@ (80076a0 <pvPortMalloc+0x194>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d203      	bcs.n	8007642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800763a:	4b17      	ldr	r3, [pc, #92]	@ (8007698 <pvPortMalloc+0x18c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <pvPortMalloc+0x194>)
 8007640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <pvPortMalloc+0x188>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	431a      	orrs	r2, r3
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007656:	4b13      	ldr	r3, [pc, #76]	@ (80076a4 <pvPortMalloc+0x198>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	4a11      	ldr	r2, [pc, #68]	@ (80076a4 <pvPortMalloc+0x198>)
 800765e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007660:	f7fe fcec 	bl	800603c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <pvPortMalloc+0x17a>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60fb      	str	r3, [r7, #12]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <pvPortMalloc+0x176>
	return pvReturn;
 8007686:	69fb      	ldr	r3, [r7, #28]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	@ 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20004a5c 	.word	0x20004a5c
 8007694:	20004a70 	.word	0x20004a70
 8007698:	20004a60 	.word	0x20004a60
 800769c:	20004a54 	.word	0x20004a54
 80076a0:	20004a64 	.word	0x20004a64
 80076a4:	20004a68 	.word	0x20004a68

080076a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04f      	beq.n	800775a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ba:	2308      	movs	r3, #8
 80076bc:	425b      	negs	r3, r3
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4413      	add	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4b25      	ldr	r3, [pc, #148]	@ (8007764 <vPortFree+0xbc>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <vPortFree+0x46>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <vPortFree+0x66>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	4b14      	ldr	r3, [pc, #80]	@ (8007764 <vPortFree+0xbc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01e      	beq.n	800775a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11a      	bne.n	800775a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	4b0e      	ldr	r3, [pc, #56]	@ (8007764 <vPortFree+0xbc>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	43db      	mvns	r3, r3
 800772e:	401a      	ands	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007734:	f7fe fc74 	bl	8006020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <vPortFree+0xc0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4413      	add	r3, r2
 8007742:	4a09      	ldr	r2, [pc, #36]	@ (8007768 <vPortFree+0xc0>)
 8007744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007746:	6938      	ldr	r0, [r7, #16]
 8007748:	f000 f874 	bl	8007834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800774c:	4b07      	ldr	r3, [pc, #28]	@ (800776c <vPortFree+0xc4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	4a06      	ldr	r2, [pc, #24]	@ (800776c <vPortFree+0xc4>)
 8007754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007756:	f7fe fc71 	bl	800603c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20004a70 	.word	0x20004a70
 8007768:	20004a60 	.word	0x20004a60
 800776c:	20004a6c 	.word	0x20004a6c

08007770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007776:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800777a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800777c:	4b27      	ldr	r3, [pc, #156]	@ (800781c <prvHeapInit+0xac>)
 800777e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00c      	beq.n	80077a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3307      	adds	r3, #7
 800778e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <prvHeapInit+0xac>)
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <prvHeapInit+0xb0>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007820 <prvHeapInit+0xb0>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077bc:	2208      	movs	r2, #8
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0307 	bic.w	r3, r3, #7
 80077ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <prvHeapInit+0xb4>)
 80077d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077d2:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <prvHeapInit+0xb4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077da:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <prvHeapInit+0xb4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <prvHeapInit+0xb4>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007828 <prvHeapInit+0xb8>)
 80077fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	4a09      	ldr	r2, [pc, #36]	@ (800782c <prvHeapInit+0xbc>)
 8007806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007808:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <prvHeapInit+0xc0>)
 800780a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800780e:	601a      	str	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20000e54 	.word	0x20000e54
 8007820:	20004a54 	.word	0x20004a54
 8007824:	20004a5c 	.word	0x20004a5c
 8007828:	20004a64 	.word	0x20004a64
 800782c:	20004a60 	.word	0x20004a60
 8007830:	20004a70 	.word	0x20004a70

08007834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800783c:	4b28      	ldr	r3, [pc, #160]	@ (80078e0 <prvInsertBlockIntoFreeList+0xac>)
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e002      	b.n	8007848 <prvInsertBlockIntoFreeList+0x14>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	429a      	cmp	r2, r3
 8007850:	d8f7      	bhi.n	8007842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4413      	add	r3, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d108      	bne.n	8007876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	441a      	add	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d118      	bne.n	80078bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b15      	ldr	r3, [pc, #84]	@ (80078e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d00d      	beq.n	80078b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	441a      	add	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	e008      	b.n	80078c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078b2:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <prvInsertBlockIntoFreeList+0xb0>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e003      	b.n	80078c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d002      	beq.n	80078d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20004a54 	.word	0x20004a54
 80078e4:	20004a5c 	.word	0x20004a5c

080078e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd fa0b 	bl	8004d12 <USBH_LL_IncTimer>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007912:	4618      	mov	r0, r3
 8007914:	f7fd fa4f 	bl	8004db6 <USBH_LL_Connect>
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd fa64 	bl	8004dfc <USBH_LL_Disconnect>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
 8007948:	4613      	mov	r3, r2
 800794a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fa84 	bl	8004e60 <USBH_LL_NotifyURBChange>
#endif
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd f9f9 	bl	8004d66 <USBH_LL_PortEnabled>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd fa05 	bl	8004d9a <USBH_LL_PortDisabled>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7f9 fdc9 	bl	8001546 <HAL_HCD_Stop>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f808 	bl	80079d0 <USBH_Get_USB_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d817      	bhi.n	8007a14 <USBH_Get_USB_Status+0x44>
 80079e4:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <USBH_Get_USB_Status+0x1c>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a03 	.word	0x08007a03
 80079f4:	08007a09 	.word	0x08007a09
 80079f8:	08007a0f 	.word	0x08007a0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	e00b      	b.n	8007a1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a02:	2302      	movs	r3, #2
 8007a04:	73fb      	strb	r3, [r7, #15]
    break;
 8007a06:	e008      	b.n	8007a1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0c:	e005      	b.n	8007a1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	73fb      	strb	r3, [r7, #15]
    break;
 8007a12:	e002      	b.n	8007a1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a14:	2302      	movs	r3, #2
 8007a16:	73fb      	strb	r3, [r7, #15]
    break;
 8007a18:	bf00      	nop
  }
  return usb_status;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <memset>:
 8007a28:	4402      	add	r2, r0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a70 <__libc_init_array+0x38>)
 8007a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a74 <__libc_init_array+0x3c>)
 8007a3e:	1b64      	subs	r4, r4, r5
 8007a40:	10a4      	asrs	r4, r4, #2
 8007a42:	2600      	movs	r6, #0
 8007a44:	42a6      	cmp	r6, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	4d0b      	ldr	r5, [pc, #44]	@ (8007a78 <__libc_init_array+0x40>)
 8007a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a7c <__libc_init_array+0x44>)
 8007a4c:	f000 f826 	bl	8007a9c <_init>
 8007a50:	1b64      	subs	r4, r4, r5
 8007a52:	10a4      	asrs	r4, r4, #2
 8007a54:	2600      	movs	r6, #0
 8007a56:	42a6      	cmp	r6, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a60:	4798      	blx	r3
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6a:	4798      	blx	r3
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	08007b04 	.word	0x08007b04
 8007a74:	08007b04 	.word	0x08007b04
 8007a78:	08007b04 	.word	0x08007b04
 8007a7c:	08007b08 	.word	0x08007b08

08007a80 <memcpy>:
 8007a80:	440a      	add	r2, r1
 8007a82:	4291      	cmp	r1, r2
 8007a84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007a88:	d100      	bne.n	8007a8c <memcpy+0xc>
 8007a8a:	4770      	bx	lr
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a96:	4291      	cmp	r1, r2
 8007a98:	d1f9      	bne.n	8007a8e <memcpy+0xe>
 8007a9a:	bd10      	pop	{r4, pc}

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
