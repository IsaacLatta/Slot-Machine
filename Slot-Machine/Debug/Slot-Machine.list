
Slot-Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080092d4  080092d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009418  08009418  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009418  08009418  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009420  08009420  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009424  08009424  0000a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009428  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004fac  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005018  20005018  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1bd  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004636  00000000  00000000  00027259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001321  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006164  00000000  00000000  0002e4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6d0  00000000  00000000  0003460d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74cb  00000000  00000000  00051cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001291a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072bc  00000000  00000000  001291ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001304a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092bc 	.word	0x080092bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080092bc 	.word	0x080092bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 ff6d 	bl	8001444 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f85f 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f96f 	bl	8000850 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000572:	f000 f8c5 	bl	8000700 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000576:	f000 f8f1 	bl	800075c <MX_I2S3_Init>
  MX_SPI1_Init();
 800057a:	f000 f933 	bl	80007e4 <MX_SPI1_Init>
  MX_RNG_Init();
 800057e:	f000 f91d 	bl	80007bc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
#ifdef DEBUG
	srand((unsigned int) xTaskGetTickCount());
 8000582:	f006 fa2d 	bl	80069e0 <xTaskGetTickCount>
 8000586:	4603      	mov	r3, r0
 8000588:	4618      	mov	r0, r3
 800058a:	f007 ff33 	bl	80083f4 <srand>
  }
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058e:	f005 f895 	bl	80056bc <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	200a      	movs	r0, #10
 8000598:	f005 fae3 	bl	8005b62 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <main+0xac>)
 80005a0:	6013      	str	r3, [r2, #0]
  xAnimationQueue = xQueueCreate(5, sizeof(Animation_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	2005      	movs	r0, #5
 80005a8:	f005 fadb 	bl	8005b62 <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <main+0xb0>)
 80005b0:	6013      	str	r3, [r2, #0]
  if(xEventQueue == NULL || xAnimationQueue == NULL) {
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <main+0xac>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <main+0x62>
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <main+0xb0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <main+0x66>
	  Error_Handler();
 80005c2:	f000 fc8d 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(AnimateTask, "Animator", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2380      	movs	r3, #128	@ 0x80
 80005d0:	2280      	movs	r2, #128	@ 0x80
 80005d2:	4910      	ldr	r1, [pc, #64]	@ (8000614 <main+0xb4>)
 80005d4:	4810      	ldr	r0, [pc, #64]	@ (8000618 <main+0xb8>)
 80005d6:	f005 ff73 	bl	80064c0 <xTaskCreate>
  xTaskCreate(PollButtonTask, "PollButton", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2380      	movs	r3, #128	@ 0x80
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	490d      	ldr	r1, [pc, #52]	@ (800061c <main+0xbc>)
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0xc0>)
 80005ea:	f005 ff69 	bl	80064c0 <xTaskCreate>
  xTaskCreate(StateMachineTask, "HandleStateLogic", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +2, NULL);
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2380      	movs	r3, #128	@ 0x80
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	490a      	ldr	r1, [pc, #40]	@ (8000624 <main+0xc4>)
 80005fc:	480a      	ldr	r0, [pc, #40]	@ (8000628 <main+0xc8>)
 80005fe:	f005 ff5f 	bl	80064c0 <xTaskCreate>
  vTaskStartScheduler();
 8000602:	f006 f8d9 	bl	80067b8 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0xa6>
 800060a:	bf00      	nop
 800060c:	2000018c 	.word	0x2000018c
 8000610:	20000190 	.word	0x20000190
 8000614:	080092d4 	.word	0x080092d4
 8000618:	08000c85 	.word	0x08000c85
 800061c:	080092e0 	.word	0x080092e0
 8000620:	08000cd5 	.word	0x08000cd5
 8000624:	080092ec 	.word	0x080092ec
 8000628:	08000df5 	.word	0x08000df5

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 f84b 	bl	80086d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	@ (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fd90 	bl	80041d8 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 fc0f 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2105      	movs	r1, #5
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fff1 	bl	80046c8 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 fbf8 	bl	8000ee0 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	@ 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f002 ff67 	bl	8003610 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fbca 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <MX_I2S3_Init+0x58>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000780:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000784:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <MX_I2S3_Init+0x5c>)
 8000786:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2S3_Init+0x54>)
 800079c:	f003 f87c 	bl	8003898 <HAL_I2S_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a6:	f000 fb9b 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40003c00 	.word	0x40003c00
 80007b8:	00017700 	.word	0x00017700

080007bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_RNG_Init+0x20>)
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <MX_RNG_Init+0x24>)
 80007c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_RNG_Init+0x20>)
 80007c8:	f004 facc 	bl	8004d64 <HAL_RNG_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007d2:	f000 fb85 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000124 	.word	0x20000124
 80007e0:	50060800 	.word	0x50060800

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f004 fabf 	bl	8004db8 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 fb4e 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000134 	.word	0x20000134
 800084c:	40013000 	.word	0x40013000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	@ 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4b71      	ldr	r3, [pc, #452]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a70      	ldr	r2, [pc, #448]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b6e      	ldr	r3, [pc, #440]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b6a      	ldr	r3, [pc, #424]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a69      	ldr	r2, [pc, #420]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b67      	ldr	r3, [pc, #412]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b63      	ldr	r3, [pc, #396]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a62      	ldr	r2, [pc, #392]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b60      	ldr	r3, [pc, #384]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b5c      	ldr	r3, [pc, #368]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a5b      	ldr	r2, [pc, #364]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b59      	ldr	r3, [pc, #356]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b55      	ldr	r3, [pc, #340]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a54      	ldr	r2, [pc, #336]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b52      	ldr	r3, [pc, #328]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b4b      	ldr	r3, [pc, #300]	@ (8000a30 <MX_GPIO_Init+0x1e0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	4848      	ldr	r0, [pc, #288]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000914:	f001 f8a2 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	4846      	ldr	r0, [pc, #280]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 800091e:	f001 f89d 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	2200      	movs	r2, #0
 8000924:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000928:	4844      	ldr	r0, [pc, #272]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 800092a:	f001 f897 	bl	8001a5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800092e:	2308      	movs	r3, #8
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	483b      	ldr	r0, [pc, #236]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000946:	f000 fed5 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4835      	ldr	r0, [pc, #212]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fec7 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	482d      	ldr	r0, [pc, #180]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 8000982:	f000 feb7 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4829      	ldr	r0, [pc, #164]	@ (8000a40 <MX_GPIO_Init+0x1f0>)
 800099a:	f000 feab 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800099e:	2304      	movs	r3, #4
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <MX_GPIO_Init+0x1f4>)
 80009b2:	f000 fe9f 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c8:	2305      	movs	r3, #5
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0x1f4>)
 80009d4:	f000 fe8e 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 80009f2:	f000 fe7f 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f6:	2320      	movs	r3, #32
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 8000a0a:	f000 fe73 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000a24:	f000 fe66 	bl	80016f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a28:	bf00      	nop
 8000a2a:	3730      	adds	r7, #48	@ 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <writeAllLeds>:

/* USER CODE BEGIN 4 */

// green, orange, red, blue

static void writeAllLeds(GPIO_PinState state) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 4; ++i) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e00b      	b.n	8000a70 <writeAllLeds+0x28>
		HAL_GPIO_WritePin(LED_PORT, LEDS[i], state);
 8000a58:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <writeAllLeds+0x38>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <writeAllLeds+0x3c>)
 8000a66:	f000 fff9 	bl	8001a5c <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	ddf0      	ble.n	8000a58 <writeAllLeds+0x10>
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08009318 	.word	0x08009318
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <wheelAnimation>:
	static int toggle = 0;
	writeAllLeds(toggle ? GPIO_PIN_SET : GPIO_PIN_RESET);
	toggle = !toggle;
}

static void wheelAnimation(void* arg) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	int* finalIndex = (int*)arg;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	61bb      	str	r3, [r7, #24]
	const int spins = 5;
 8000a94:	2305      	movs	r3, #5
 8000a96:	617b      	str	r3, [r7, #20]
	const int totalSpins = (spins*4) + *finalIndex + 1;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	009a      	lsls	r2, r3, #2
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]

	const TickType_t delayMs_inc = 20;
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	60fb      	str	r3, [r7, #12]
	TickType_t delayMs = 50;
 8000aaa:	2332      	movs	r3, #50	@ 0x32
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
	int current_i = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	e028      	b.n	8000b0a <wheelAnimation+0x82>
		writeAllLeds(GPIO_PIN_RESET);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff ffc5 	bl	8000a48 <writeAllLeds>

		HAL_GPIO_WritePin(LED_PORT, LEDS[current_i], GPIO_PIN_SET);
 8000abe:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <wheelAnimation+0xac>)
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	@ (8000b38 <wheelAnimation+0xb0>)
 8000acc:	f000 ffc6 	bl	8001a5c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(delayMs));
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <wheelAnimation+0xb4>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	099b      	lsrs	r3, r3, #6
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fe32 	bl	800674c <vTaskDelay>
		delayMs += delayMs_inc;
 8000ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4413      	add	r3, r2
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
		current_i = (current_i + 1) % 4;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	3301      	adds	r3, #1
 8000af4:	425a      	negs	r2, r3
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	f002 0203 	and.w	r2, r2, #3
 8000afe:	bf58      	it	pl
 8000b00:	4253      	negpl	r3, r2
 8000b02:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	3301      	adds	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbd2      	blt.n	8000ab8 <wheelAnimation+0x30>
	}
	writeAllLeds(GPIO_PIN_RESET);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff ff98 	bl	8000a48 <writeAllLeds>
	HAL_GPIO_WritePin(LED_PORT, LEDS[*finalIndex], GPIO_PIN_SET);
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <wheelAnimation+0xac>)
 8000b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <wheelAnimation+0xb0>)
 8000b28:	f000 ff98 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08009318 	.word	0x08009318
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	10624dd3 	.word	0x10624dd3

08000b40 <collectedAnimation>:


static void collectedAnimation(void* args) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	int* collectedMask = (int*)args;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
	for(int j = 0; j < 4; ++j) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e026      	b.n	8000ba0 <collectedAnimation+0x60>
		for(int i = 0; i < 4; ++i) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	e014      	b.n	8000b82 <collectedAnimation+0x42>
			if(*collectedMask & (1 << i)) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fa42 f303 	asr.w	r3, r2, r3
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <collectedAnimation+0x3c>
				HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000b6a:	4a11      	ldr	r2, [pc, #68]	@ (8000bb0 <collectedAnimation+0x70>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	480f      	ldr	r0, [pc, #60]	@ (8000bb4 <collectedAnimation+0x74>)
 8000b78:	f000 ff70 	bl	8001a5c <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; ++i) {
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	dde7      	ble.n	8000b58 <collectedAnimation+0x18>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 8000b88:	20c8      	movs	r0, #200	@ 0xc8
 8000b8a:	f005 fddf 	bl	800674c <vTaskDelay>
		writeAllLeds(GPIO_PIN_RESET);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff5a 	bl	8000a48 <writeAllLeds>
		vTaskDelay(pdMS_TO_TICKS(200));
 8000b94:	20c8      	movs	r0, #200	@ 0xc8
 8000b96:	f005 fdd9 	bl	800674c <vTaskDelay>
	for(int j = 0; j < 4; ++j) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	ddd5      	ble.n	8000b52 <collectedAnimation+0x12>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	08009318 	.word	0x08009318
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <loseAnimation>:

static void loseAnimation(void* args) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e014      	b.n	8000bf0 <loseAnimation+0x38>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	4810      	ldr	r0, [pc, #64]	@ (8000c10 <loseAnimation+0x58>)
 8000bce:	f000 ff45 	bl	8001a5c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000bd2:	20fa      	movs	r0, #250	@ 0xfa
 8000bd4:	f005 fdba 	bl	800674c <vTaskDelay>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bde:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <loseAnimation+0x58>)
 8000be0:	f000 ff3c 	bl	8001a5c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000be4:	20fa      	movs	r0, #250	@ 0xfa
 8000be6:	f005 fdb1 	bl	800674c <vTaskDelay>
	for (int i = 0; i < 3; i++) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	dde7      	ble.n	8000bc6 <loseAnimation+0xe>
	}

	writeAllLeds(GPIO_PIN_SET);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff26 	bl	8000a48 <writeAllLeds>
	vTaskDelay(pdMS_TO_TICKS(200));
 8000bfc:	20c8      	movs	r0, #200	@ 0xc8
 8000bfe:	f005 fda5 	bl	800674c <vTaskDelay>
	writeAllLeds(GPIO_PIN_RESET);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff20 	bl	8000a48 <writeAllLeds>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <winningAnimation>:

static void winningAnimation(void* args) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    for (int cycle = 0; cycle < 3; cycle++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e01a      	b.n	8000c58 <winningAnimation+0x44>
        for (int i = 0; i < 4; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	e011      	b.n	8000c4c <winningAnimation+0x38>
            writeAllLeds(GPIO_PIN_RESET);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ff0d 	bl	8000a48 <writeAllLeds>
            HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000c2e:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <winningAnimation+0x68>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <winningAnimation+0x6c>)
 8000c3c:	f000 ff0e 	bl	8001a5c <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(150));
 8000c40:	2096      	movs	r0, #150	@ 0x96
 8000c42:	f005 fd83 	bl	800674c <vTaskDelay>
        for (int i = 0; i < 4; i++) {
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	ddea      	ble.n	8000c28 <winningAnimation+0x14>
    for (int cycle = 0; cycle < 3; cycle++) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	dde1      	ble.n	8000c22 <winningAnimation+0xe>
        }
    }

    writeAllLeds(GPIO_PIN_SET);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fef2 	bl	8000a48 <writeAllLeds>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000c64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c68:	f005 fd70 	bl	800674c <vTaskDelay>
    writeAllLeds(GPIO_PIN_RESET);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff feeb 	bl	8000a48 <writeAllLeds>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08009318 	.word	0x08009318
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <AnimateTask>:

void AnimateTask(void *args) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	Animation_t next;
	SystemEvent_t evt;
	for(;;) {
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <AnimateTask+0x48>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f107 0110 	add.w	r1, r7, #16
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 f961 	bl	8005f60 <xQueueReceive>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10f      	bne.n	8000cc4 <AnimateTask+0x40>
			next.animation(next.args);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4798      	blx	r3

			evt.type = EVT_ANIM_COMPLETE;
 8000cac:	2302      	movs	r3, #2
 8000cae:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
			xQueueSend(xEventQueue, &evt, 0);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <AnimateTask+0x4c>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f107 0108 	add.w	r1, r7, #8
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f004 ffae 	bl	8005c20 <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8000cc4:	2032      	movs	r0, #50	@ 0x32
 8000cc6:	f005 fd41 	bl	800674c <vTaskDelay>
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000cca:	e7df      	b.n	8000c8c <AnimateTask+0x8>
 8000ccc:	20000190 	.word	0x20000190
 8000cd0:	2000018c 	.word	0x2000018c

08000cd4 <PollButtonTask>:
	}
}

void PollButtonTask(void *args) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	for(;;) {
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000cdc:	2101      	movs	r1, #1
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <PollButtonTask+0x3c>)
 8000ce0:	f000 fea4 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10e      	bne.n	8000d08 <PollButtonTask+0x34>
			evt.type = EVT_BUTTON_PRESS;
 8000cea:	2301      	movs	r3, #1
 8000cec:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]

			xQueueSend(xEventQueue, &evt, 0);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <PollButtonTask+0x40>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	f107 0108 	add.w	r1, r7, #8
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f004 ff8f 	bl	8005c20 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(200)); // Debounce
 8000d02:	20c8      	movs	r0, #200	@ 0xc8
 8000d04:	f005 fd22 	bl	800674c <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(50));
 8000d08:	2032      	movs	r0, #50	@ 0x32
 8000d0a:	f005 fd1f 	bl	800674c <vTaskDelay>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000d0e:	e7e5      	b.n	8000cdc <PollButtonTask+0x8>
 8000d10:	40020000 	.word	0x40020000
 8000d14:	2000018c 	.word	0x2000018c

08000d18 <spin>:
	}
}

void spin(Animation_t* anim, int* colorBit, int* winningNum) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	*winningNum = rand() % 4;
 8000d24:	f007 fb94 	bl	8008450 <rand>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	425a      	negs	r2, r3
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	bf58      	it	pl
 8000d36:	4253      	negpl	r3, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6013      	str	r3, [r2, #0]
	*colorBit = (1 << *winningNum);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2201      	movs	r2, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	601a      	str	r2, [r3, #0]
	anim->animation = wheelAnimation;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <spin+0x44>)
 8000d4c:	605a      	str	r2, [r3, #4]
	anim->args = winningNum;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	08000a89 	.word	0x08000a89

08000d60 <setNextAnimation>:

void setNextAnimation(Animation_t* nextAnim, State_t* state, int* collectedMask, int* colorBit)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
    switch (*state) {
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d002      	beq.n	8000d7c <setNextAnimation+0x1c>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d02c      	beq.n	8000dd4 <setNextAnimation+0x74>
            break;
        case RESET_TO_IDLE:
        	*state = IDLE;
            break;
    }
}
 8000d7a:	e02f      	b.n	8000ddc <setNextAnimation+0x7c>
        	*state = RESET_TO_IDLE;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	701a      	strb	r2, [r3, #0]
            if ((*collectedMask) & *colorBit) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <setNextAnimation+0x3e>
            	(*collectedMask) = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
            	nextAnim->animation = loseAnimation;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <setNextAnimation+0x88>)
 8000d9a:	605a      	str	r2, [r3, #4]
            break;
 8000d9c:	e01e      	b.n	8000ddc <setNextAnimation+0x7c>
                (*collectedMask) |= *colorBit;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
                if (((*collectedMask) & 0xF) == 0xF) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d106      	bne.n	8000dc6 <setNextAnimation+0x66>
                    (*collectedMask) = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
                    nextAnim->animation = winningAnimation;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <setNextAnimation+0x8c>)
 8000dc2:	605a      	str	r2, [r3, #4]
            break;
 8000dc4:	e00a      	b.n	8000ddc <setNextAnimation+0x7c>
                    nextAnim->animation = collectedAnimation;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <setNextAnimation+0x90>)
 8000dca:	605a      	str	r2, [r3, #4]
                    nextAnim->args = collectedMask;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
            break;
 8000dd2:	e003      	b.n	8000ddc <setNextAnimation+0x7c>
        	*state = IDLE;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
            break;
 8000dda:	bf00      	nop
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	08000bb9 	.word	0x08000bb9
 8000dec:	08000c15 	.word	0x08000c15
 8000df0:	08000b41 	.word	0x08000b41

08000df4 <StateMachineTask>:

void StateMachineTask(void *args) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	EventType_t next = EVT_ANY;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	State_t state = IDLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	Animation_t nextAnim;

	int next_number = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
	nextAnim.animation = wheelAnimation;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <StateMachineTask+0xe0>)
 8000e0e:	61fb      	str	r3, [r7, #28]
	nextAnim.args = &next_number;
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	61bb      	str	r3, [r7, #24]
	int collectedMask = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
	int colorBit = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]

	for(;;) {
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed8 <StateMachineTask+0xe4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 f898 	bl	8005f60 <xQueueReceive>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d1f3      	bne.n	8000e1e <StateMachineTask+0x2a>
			if(next != EVT_ANY && next != evt.type) {
 8000e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <StateMachineTask+0x56>
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e42:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d13f      	bne.n	8000eca <StateMachineTask+0xd6>
				continue; // Do not process
			}

			switch (evt.type) {
 8000e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <StateMachineTask+0x64>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d019      	beq.n	8000e8a <StateMachineTask+0x96>
				}
				else if (state == IDLE) {
					next = EVT_ANY;
				}
			default:
				break;
 8000e56:	e03a      	b.n	8000ece <StateMachineTask+0xda>
				state = SPINNING;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				next = EVT_ANIM_COMPLETE;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				spin(&nextAnim, &colorBit, &next_number);
 8000e64:	f107 0214 	add.w	r2, r7, #20
 8000e68:	f107 010c 	add.w	r1, r7, #12
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff51 	bl	8000d18 <spin>
				xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <StateMachineTask+0xe8>)
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	f107 0118 	add.w	r1, r7, #24
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e84:	f004 fecc 	bl	8005c20 <xQueueGenericSend>
				break;
 8000e88:	e022      	b.n	8000ed0 <StateMachineTask+0xdc>
				setNextAnimation(&nextAnim, &state, &collectedMask, &colorBit);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	f107 0210 	add.w	r2, r7, #16
 8000e92:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8000e96:	f107 0018 	add.w	r0, r7, #24
 8000e9a:	f7ff ff61 	bl	8000d60 <setNextAnimation>
				if (state == RESET_TO_IDLE) {
 8000e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d109      	bne.n	8000eba <StateMachineTask+0xc6>
					xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <StateMachineTask+0xe8>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	f107 0118 	add.w	r1, r7, #24
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eb4:	f004 feb4 	bl	8005c20 <xQueueGenericSend>
				break;
 8000eb8:	e009      	b.n	8000ece <StateMachineTask+0xda>
				else if (state == IDLE) {
 8000eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <StateMachineTask+0xda>
					next = EVT_ANY;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8000ec8:	e001      	b.n	8000ece <StateMachineTask+0xda>
				continue; // Do not process
 8000eca:	bf00      	nop
 8000ecc:	e7a7      	b.n	8000e1e <StateMachineTask+0x2a>
				break;
 8000ece:	bf00      	nop
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000ed0:	e7a5      	b.n	8000e1e <StateMachineTask+0x2a>
 8000ed2:	bf00      	nop
 8000ed4:	08000a89 	.word	0x08000a89
 8000ed8:	2000018c 	.word	0x2000018c
 8000edc:	20000190 	.word	0x20000190

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000ee8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <Error_Handler+0x3c>)
 8000eee:	f000 fdce 	bl	8001a8e <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef8:	4808      	ldr	r0, [pc, #32]	@ (8000f1c <Error_Handler+0x3c>)
 8000efa:	f000 fdaf 	bl	8001a5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <Error_Handler+0x3c>)
 8000f06:	f000 fda9 	bl	8001a5c <HAL_GPIO_WritePin>
   	  HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <Error_Handler+0x3c>)
 8000f12:	f000 fda3 	bl	8001a5c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000f16:	bf00      	nop
 8000f18:	e7e6      	b.n	8000ee8 <Error_Handler+0x8>
 8000f1a:	bf00      	nop
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	210f      	movs	r1, #15
 8000f62:	f06f 0001 	mvn.w	r0, #1
 8000f66:	f000 fb9c 	bl	80016a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_I2C_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fb6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <HAL_I2C_MspInit+0x8c>)
 8000fd4:	f000 fb8e 	bl	80016f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_I2S_MspInit+0xf0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15a      	bne.n	80010ee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800103c:	23c0      	movs	r3, #192	@ 0xc0
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fd49 	bl	8004ae0 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001054:	f7ff ff44 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ac:	2310      	movs	r3, #16
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	@ (8001100 <HAL_I2S_MspInit+0xf8>)
 80010c8:	f000 fb14 	bl	80016f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010cc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010de:	2306      	movs	r3, #6
 80010e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <HAL_I2S_MspInit+0xfc>)
 80010ea:	f000 fb03 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	@ 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40003c00 	.word	0x40003c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020800 	.word	0x40020800

08001108 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_RNG_MspInit+0x3c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_RNG_MspInit+0x40>)
 8001120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001122:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_RNG_MspInit+0x40>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	6353      	str	r3, [r2, #52]	@ 0x34
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_RNG_MspInit+0x40>)
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	50060800 	.word	0x50060800
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12b      	bne.n	80011c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011a6:	23e0      	movs	r3, #224	@ 0xe0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2305      	movs	r3, #5
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c2:	f000 fa97 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <MemManage_Handler+0x4>

080011f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <UsageFault_Handler+0x4>

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f967 	bl	80014e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800121a:	f005 ff1b 	bl	8007054 <xTaskGetSchedulerState>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d001      	beq.n	8001228 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001224:	f006 fd10 	bl	8007c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <OTG_FS_IRQHandler+0x10>)
 8001232:	f000 fc46 	bl	8001ac2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20004aec 	.word	0x20004aec

08001240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return 1;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_kill>:

int _kill(int pid, int sig)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125a:	f007 fa9b 	bl	8008794 <__errno>
 800125e:	4603      	mov	r3, r0
 8001260:	2216      	movs	r2, #22
 8001262:	601a      	str	r2, [r3, #0]
  return -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_exit>:

void _exit (int status)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffe7 	bl	8001250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001282:	bf00      	nop
 8001284:	e7fd      	b.n	8001282 <_exit+0x12>

08001286 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e00a      	b.n	80012ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001298:	f3af 8000 	nop.w
 800129c:	4601      	mov	r1, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	b2ca      	uxtb	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dbf0      	blt.n	8001298 <_read+0x12>
  }

  return len;
 80012b6:	687b      	ldr	r3, [r7, #4]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e009      	b.n	80012e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dbf1      	blt.n	80012d2 <_write+0x12>
  }
  return len;
 80012ee:	687b      	ldr	r3, [r7, #4]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_close>:

int _close(int file)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001320:	605a      	str	r2, [r3, #4]
  return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_isatty>:

int _isatty(int file)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f007 fa00 	bl	8008794 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20020000 	.word	0x20020000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000194 	.word	0x20000194
 80013c8:	20005018 	.word	0x20005018

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001428 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f007 f9bf 	bl	80087a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff f89d 	bl	8000560 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001434:	08009428 	.word	0x08009428
  ldr r2, =_sbss
 8001438:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800143c:	20005018 	.word	0x20005018

08001440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f90d 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fd52 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f917 	bl	80016da <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014c4:	f000 f8ed 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	20000198 	.word	0x20000198

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000198 	.word	0x20000198

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff47 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5c 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e16b      	b.n	80019e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 815a 	bne.w	80019e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	2b02      	cmp	r3, #2
 8001744:	d130      	bne.n	80017a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d017      	beq.n	80017e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80b4 	beq.w	80019e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b60      	ldr	r3, [pc, #384]	@ (8001a00 <HAL_GPIO_Init+0x30c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a5f      	ldr	r2, [pc, #380]	@ (8001a00 <HAL_GPIO_Init+0x30c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a00 <HAL_GPIO_Init+0x30c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001896:	4a5b      	ldr	r2, [pc, #364]	@ (8001a04 <HAL_GPIO_Init+0x310>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a52      	ldr	r2, [pc, #328]	@ (8001a08 <HAL_GPIO_Init+0x314>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d02b      	beq.n	800191a <HAL_GPIO_Init+0x226>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a51      	ldr	r2, [pc, #324]	@ (8001a0c <HAL_GPIO_Init+0x318>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d025      	beq.n	8001916 <HAL_GPIO_Init+0x222>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a50      	ldr	r2, [pc, #320]	@ (8001a10 <HAL_GPIO_Init+0x31c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x21e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a14 <HAL_GPIO_Init+0x320>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x21a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x216>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <HAL_GPIO_Init+0x328>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x212>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <HAL_GPIO_Init+0x32c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_GPIO_Init+0x330>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x20a>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e00e      	b.n	800191c <HAL_GPIO_Init+0x228>
 80018fe:	2308      	movs	r3, #8
 8001900:	e00c      	b.n	800191c <HAL_GPIO_Init+0x228>
 8001902:	2306      	movs	r3, #6
 8001904:	e00a      	b.n	800191c <HAL_GPIO_Init+0x228>
 8001906:	2305      	movs	r3, #5
 8001908:	e008      	b.n	800191c <HAL_GPIO_Init+0x228>
 800190a:	2304      	movs	r3, #4
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x228>
 800190e:	2303      	movs	r3, #3
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x228>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x228>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x228>
 800191a:	2300      	movs	r3, #0
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f002 0203 	and.w	r2, r2, #3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4093      	lsls	r3, r2
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192c:	4935      	ldr	r1, [pc, #212]	@ (8001a04 <HAL_GPIO_Init+0x310>)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195e:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001964:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001988:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198e:	4b26      	ldr	r3, [pc, #152]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019dc:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <HAL_GPIO_Init+0x334>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	f67f ae90 	bls.w	8001710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40021400 	.word	0x40021400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40021c00 	.word	0x40021c00
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	041a      	lsls	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	619a      	str	r2, [r3, #24]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	041a      	lsls	r2, r3, #16
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	400b      	ands	r3, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	619a      	str	r2, [r3, #24]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fb04 	bl	80050e6 <USB_GetMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 80fb 	bne.w	8001cdc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fac7 	bl	800507e <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80f1 	beq.w	8001cda <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fabe 	bl	800507e <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b0c:	d104      	bne.n	8001b18 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b16:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 faae 	bl	800507e <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b2c:	d104      	bne.n	8001b38 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b36:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fa9e 	bl	800507e <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b4c:	d104      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fa8e 	bl	800507e <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d103      	bne.n	8001b74 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2202      	movs	r2, #2
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fa80 	bl	800507e <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b88:	d120      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b92:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d113      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	6938      	ldr	r0, [r7, #16]
 8001ba8:	f003 f9b1 	bl	8004f0e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bac:	6938      	ldr	r0, [r7, #16]
 8001bae:	f003 f9e0 	bl	8004f72 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7a5b      	ldrb	r3, [r3, #9]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d105      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fa9e 	bl	8005102 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f006 fada 	bl	8008180 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fa54 	bl	800507e <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be0:	d102      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 fca1 	bl	800352a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fa46 	bl	800507e <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d106      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f006 faa3 	bl	8008148 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2208      	movs	r2, #8
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fa35 	bl	800507e <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c1e:	d139      	bne.n	8001c94 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 faa9 	bl	800517c <USB_HC_ReadInterrupt>
 8001c2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e025      	b.n	8001c7e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d018      	beq.n	8001c78 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c5c:	d106      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f859 	bl	8001d1c <HCD_HC_IN_IRQHandler>
 8001c6a:	e005      	b.n	8001c78 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 febb 	bl	80029ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	795b      	ldrb	r3, [r3, #5]
 8001c82:	461a      	mov	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d3d3      	bcc.n	8001c32 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 f9f0 	bl	800507e <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d101      	bne.n	8001cac <HAL_HCD_IRQHandler+0x1ea>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_HCD_IRQHandler+0x1ec>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d014      	beq.n	8001cdc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0210 	bic.w	r2, r2, #16
 8001cc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f001 fb52 	bl	800336c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0210 	orr.w	r2, r2, #16
 8001cd6:	619a      	str	r2, [r3, #24]
 8001cd8:	e000      	b.n	8001cdc <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cda:	bf00      	nop
    }
  }
}
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_Stop+0x16>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00d      	b.n	8001d14 <HAL_HCD_Stop+0x32>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fb6a 	bl	80053de <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f9b2 	bl	80050a4 <USB_ReadChInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d11a      	bne.n	8001d80 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2304      	movs	r3, #4
 8001d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	334d      	adds	r3, #77	@ 0x4d
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa10 	bl	800519e <USB_HC_Halt>
 8001d7e:	e09e      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 f98b 	bl	80050a4 <USB_ReadChInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d98:	d11b      	bne.n	8001dd2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da6:	461a      	mov	r2, r3
 8001da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	334d      	adds	r3, #77	@ 0x4d
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 f9e7 	bl	800519e <USB_HC_Halt>
 8001dd0:	e075      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f962 	bl	80050a4 <USB_ReadChInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11a      	bne.n	8001e20 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2308      	movs	r3, #8
 8001dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	334d      	adds	r3, #77	@ 0x4d
 8001e0c:	2206      	movs	r2, #6
 8001e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f9c0 	bl	800519e <USB_HC_Halt>
 8001e1e:	e04e      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f93b 	bl	80050a4 <USB_ReadChInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e38:	d11b      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	334d      	adds	r3, #77	@ 0x4d
 8001e5e:	2209      	movs	r2, #9
 8001e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 f997 	bl	800519e <USB_HC_Halt>
 8001e70:	e025      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f912 	bl	80050a4 <USB_ReadChInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e86:	2b80      	cmp	r3, #128	@ 0x80
 8001e88:	d119      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	334d      	adds	r3, #77	@ 0x4d
 8001eac:	2207      	movs	r2, #7
 8001eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f970 	bl	800519e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f8ec 	bl	80050a4 <USB_ReadChInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed6:	d112      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f95c 	bl	800519e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef8:	6093      	str	r3, [r2, #8]
 8001efa:	f000 bd75 	b.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f8cc 	bl	80050a4 <USB_ReadChInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f040 8128 	bne.w	8002168 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2320      	movs	r3, #32
 8001f28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	331b      	adds	r3, #27
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d119      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	331b      	adds	r3, #27
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	0151      	lsls	r1, r2, #5
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	440a      	add	r2, r1
 8001f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	799b      	ldrb	r3, [r3, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3330      	adds	r3, #48	@ 0x30
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	1ac9      	subs	r1, r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4403      	add	r3, r0
 8001fb0:	3338      	adds	r3, #56	@ 0x38
 8001fb2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	334d      	adds	r3, #77	@ 0x4d
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3344      	adds	r3, #68	@ 0x44
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2301      	movs	r3, #1
 8001fec:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3326      	adds	r3, #38	@ 0x26
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3326      	adds	r3, #38	@ 0x26
 8002014:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002016:	2b02      	cmp	r3, #2
 8002018:	d110      	bne.n	800203c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f003 f8bb 	bl	800519e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2310      	movs	r3, #16
 8002038:	6093      	str	r3, [r2, #8]
 800203a:	e03d      	b.n	80020b8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3326      	adds	r3, #38	@ 0x26
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d00a      	beq.n	8002068 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3326      	adds	r3, #38	@ 0x26
 8002062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002064:	2b01      	cmp	r3, #1
 8002066:	d127      	bne.n	80020b8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	0151      	lsls	r1, r2, #5
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	440a      	add	r2, r1
 800207e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002086:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	334c      	adds	r3, #76	@ 0x4c
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	334c      	adds	r3, #76	@ 0x4c
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f006 f872 	bl	800819c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	799b      	ldrb	r3, [r3, #6]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d13b      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3338      	adds	r3, #56	@ 0x38
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4403      	add	r3, r0
 80020e0:	3328      	adds	r3, #40	@ 0x28
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	440b      	add	r3, r1
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4403      	add	r3, r0
 80020f6:	3328      	adds	r3, #40	@ 0x28
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8470 	beq.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	333c      	adds	r3, #60	@ 0x3c
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	333c      	adds	r3, #60	@ 0x3c
 8002130:	4602      	mov	r2, r0
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	f000 bc58 	b.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	333c      	adds	r3, #60	@ 0x3c
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2d8      	uxtb	r0, r3
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	333c      	adds	r3, #60	@ 0x3c
 8002160:	4602      	mov	r2, r0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	f000 bc40 	b.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f002 ff97 	bl	80050a4 <USB_ReadChInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d131      	bne.n	80021e4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2320      	movs	r3, #32
 8002190:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	331a      	adds	r3, #26
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 841f 	bne.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	331b      	adds	r3, #27
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	334d      	adds	r3, #77	@ 0x4d
 80021ce:	2203      	movs	r2, #3
 80021d0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 ffdf 	bl	800519e <USB_HC_Halt>
 80021e0:	f000 bc02 	b.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f002 ff59 	bl	80050a4 <USB_ReadChInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	f040 8305 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2302      	movs	r3, #2
 800220e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	334d      	adds	r3, #77	@ 0x4d
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d114      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334d      	adds	r3, #77	@ 0x4d
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334c      	adds	r3, #76	@ 0x4c
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e2cc      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	334d      	adds	r3, #77	@ 0x4d
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d114      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	@ 0x4d
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334c      	adds	r3, #76	@ 0x4c
 800228a:	2205      	movs	r2, #5
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e2ac      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334d      	adds	r3, #77	@ 0x4d
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d00b      	beq.n	80022be <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	334d      	adds	r3, #77	@ 0x4d
 80022b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	f040 80a6 	bne.w	800240a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	334d      	adds	r3, #77	@ 0x4d
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3344      	adds	r3, #68	@ 0x44
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1c59      	adds	r1, r3, #1
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4403      	add	r3, r0
 80022f2:	3344      	adds	r3, #68	@ 0x44
 80022f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3344      	adds	r3, #68	@ 0x44
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d943      	bls.n	8002394 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3344      	adds	r3, #68	@ 0x44
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	331a      	adds	r3, #26
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d123      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	331b      	adds	r3, #27
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	331c      	adds	r3, #28
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	440a      	add	r2, r1
 8002374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800237c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	334c      	adds	r3, #76	@ 0x4c
 800238e:	2204      	movs	r2, #4
 8002390:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002392:	e229      	b.n	80027e8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334c      	adds	r3, #76	@ 0x4c
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3326      	adds	r3, #38	@ 0x26
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3326      	adds	r3, #38	@ 0x26
 80023ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 8209 	bne.w	80027e8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002408:	e1ee      	b.n	80027e8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	334d      	adds	r3, #77	@ 0x4d
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b05      	cmp	r3, #5
 800241e:	f040 80c8 	bne.w	80025b2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	334d      	adds	r3, #77	@ 0x4d
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	331b      	adds	r3, #27
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 81ce 	bne.w	80027ea <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3326      	adds	r3, #38	@ 0x26
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d16b      	bne.n	800253c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3348      	adds	r3, #72	@ 0x48
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4403      	add	r3, r0
 8002484:	3348      	adds	r3, #72	@ 0x48
 8002486:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3348      	adds	r3, #72	@ 0x48
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d943      	bls.n	8002526 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3348      	adds	r3, #72	@ 0x48
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	331b      	adds	r3, #27
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3344      	adds	r3, #68	@ 0x44
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d809      	bhi.n	80024f0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	331c      	adds	r3, #28
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800250a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334c      	adds	r3, #76	@ 0x4c
 8002520:	2204      	movs	r2, #4
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e014      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	334c      	adds	r3, #76	@ 0x4c
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e009      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334c      	adds	r3, #76	@ 0x4c
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3326      	adds	r3, #38	@ 0x26
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	3326      	adds	r3, #38	@ 0x26
 8002576:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002578:	2b02      	cmp	r3, #2
 800257a:	f040 8136 	bne.w	80027ea <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002594:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800259c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e11b      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	@ 0x4d
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	f040 8081 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	@ 0x4d
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	331b      	adds	r3, #27
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	f040 80fa 	bne.w	80027ea <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	334c      	adds	r3, #76	@ 0x4c
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002628:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002648:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	0151      	lsls	r1, r2, #5
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	440a      	add	r2, r1
 8002660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002664:	f023 0320 	bic.w	r3, r3, #32
 8002668:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3326      	adds	r3, #38	@ 0x26
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	@ 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002692:	2b02      	cmp	r3, #2
 8002694:	f040 80a9 	bne.w	80027ea <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e08e      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d143      	bne.n	800276a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	334d      	adds	r3, #77	@ 0x4d
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	334c      	adds	r3, #76	@ 0x4c
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3326      	adds	r3, #38	@ 0x26
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3326      	adds	r3, #38	@ 0x26
 8002730:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002732:	2b02      	cmp	r3, #2
 8002734:	d159      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800274c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002754:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e03f      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334d      	adds	r3, #77	@ 0x4d
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d126      	bne.n	80027ce <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	334d      	adds	r3, #77	@ 0x4d
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3344      	adds	r3, #68	@ 0x44
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4403      	add	r3, r0
 80027b4:	3344      	adds	r3, #68	@ 0x44
 80027b6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334c      	adds	r3, #76	@ 0x4c
 80027c8:	2204      	movs	r2, #4
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e00d      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	334d      	adds	r3, #77	@ 0x4d
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f000 8100 	beq.w	80029e6 <HCD_HC_IN_IRQHandler+0xcca>
 80027e6:	e000      	b.n	80027ea <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027e8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334c      	adds	r3, #76	@ 0x4c
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f005 fccb 	bl	800819c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002806:	e0ef      	b.n	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f002 fc47 	bl	80050a4 <USB_ReadChInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b40      	cmp	r3, #64	@ 0x40
 800281e:	d12f      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2340      	movs	r3, #64	@ 0x40
 8002830:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	334d      	adds	r3, #77	@ 0x4d
 8002842:	2205      	movs	r2, #5
 8002844:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	331a      	adds	r3, #26
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3344      	adds	r3, #68	@ 0x44
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fc90 	bl	800519e <USB_HC_Halt>
 800287e:	e0b3      	b.n	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fc0b 	bl	80050a4 <USB_ReadChInterrupts>
 800288e:	4603      	mov	r3, r0
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	f040 80a7 	bne.w	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d11b      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3344      	adds	r3, #68	@ 0x44
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334d      	adds	r3, #77	@ 0x4d
 80028d4:	2204      	movs	r2, #4
 80028d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fc5c 	bl	800519e <USB_HC_Halt>
 80028e6:	e03f      	b.n	8002968 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3326      	adds	r3, #38	@ 0x26
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3326      	adds	r3, #38	@ 0x26
 800290e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d129      	bne.n	8002968 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3344      	adds	r3, #68	@ 0x44
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	799b      	ldrb	r3, [r3, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HCD_HC_IN_IRQHandler+0xc2a>
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	331b      	adds	r3, #27
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d110      	bne.n	8002968 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	334d      	adds	r3, #77	@ 0x4d
 8002956:	2204      	movs	r2, #4
 8002958:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fc1b 	bl	800519e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	331b      	adds	r3, #27
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d129      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	331b      	adds	r3, #27
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	0151      	lsls	r1, r2, #5
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	440a      	add	r2, r1
 80029a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	0151      	lsls	r1, r2, #5
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	440a      	add	r2, r1
 80029c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029de:	461a      	mov	r2, r3
 80029e0:	2310      	movs	r3, #16
 80029e2:	6093      	str	r3, [r2, #8]
 80029e4:	e000      	b.n	80029e8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029e6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fb49 	bl	80050a4 <USB_ReadChInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d11b      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	334d      	adds	r3, #77	@ 0x4d
 8002a3e:	2207      	movs	r2, #7
 8002a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fba7 	bl	800519e <USB_HC_Halt>
 8002a50:	f000 bc89 	b.w	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fb21 	bl	80050a4 <USB_ReadChInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 8082 	bne.w	8002b72 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3319      	adds	r3, #25
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d124      	bne.n	8002ae0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3319      	adds	r3, #25
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	334c      	adds	r3, #76	@ 0x4c
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	334d      	adds	r3, #77	@ 0x4d
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 fb5f 	bl	800519e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331a      	adds	r3, #26
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f040 8437 	bne.w	8003366 <HCD_HC_OUT_IRQHandler+0x978>
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331b      	adds	r3, #27
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 842b 	bne.w	8003366 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3326      	adds	r3, #38	@ 0x26
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d009      	beq.n	8002b3a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	331b      	adds	r3, #27
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334d      	adds	r3, #77	@ 0x4d
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fb21 	bl	800519e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3344      	adds	r3, #68	@ 0x44
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e3f9      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fa92 	bl	80050a4 <USB_ReadChInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8a:	d111      	bne.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 faf8 	bl	800519e <USB_HC_Halt>
 8002bae:	e3da      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fa73 	bl	80050a4 <USB_ReadChInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d168      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3344      	adds	r3, #68	@ 0x44
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fa5d 	bl	80050a4 <USB_ReadChInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf0:	2b40      	cmp	r3, #64	@ 0x40
 8002bf2:	d112      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3319      	adds	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2340      	movs	r3, #64	@ 0x40
 8002c18:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	331b      	adds	r3, #27
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d019      	beq.n	8002c64 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	331b      	adds	r3, #27
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c62:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	334d      	adds	r3, #77	@ 0x4d
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fa83 	bl	800519e <USB_HC_Halt>
 8002c98:	e365      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 f9fe 	bl	80050a4 <USB_ReadChInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b40      	cmp	r3, #64	@ 0x40
 8002cb0:	d139      	bne.n	8002d26 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	334d      	adds	r3, #77	@ 0x4d
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331a      	adds	r3, #26
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3319      	adds	r3, #25
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3344      	adds	r3, #68	@ 0x44
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fa46 	bl	800519e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	e31f      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 f9b8 	bl	80050a4 <USB_ReadChInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11a      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	334d      	adds	r3, #77	@ 0x4d
 8002d60:	2206      	movs	r2, #6
 8002d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fa16 	bl	800519e <USB_HC_Halt>
 8002d72:	e2f8      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 f991 	bl	80050a4 <USB_ReadChInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d144      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3344      	adds	r3, #68	@ 0x44
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334d      	adds	r3, #77	@ 0x4d
 8002db0:	2204      	movs	r2, #4
 8002db2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3319      	adds	r3, #25
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d114      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3318      	adds	r3, #24
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3319      	adds	r3, #25
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 f9ce 	bl	800519e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2310      	movs	r3, #16
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	e2a7      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 f940 	bl	80050a4 <USB_ReadChInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b80      	cmp	r3, #128	@ 0x80
 8002e2c:	f040 8083 	bne.w	8002f36 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	799b      	ldrb	r3, [r3, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2207      	movs	r2, #7
 8002e4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 f9a2 	bl	800519e <USB_HC_Halt>
 8002e5a:	e062      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3344      	adds	r3, #68	@ 0x44
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4403      	add	r3, r0
 8002e7c:	3344      	adds	r3, #68	@ 0x44
 8002e7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	@ 0x44
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d922      	bls.n	8002edc <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3344      	adds	r3, #68	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	334c      	adds	r3, #76	@ 0x4c
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334c      	adds	r3, #76	@ 0x4c
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f005 f961 	bl	800819c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002eda:	e022      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334c      	adds	r3, #76	@ 0x4c
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e217      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 f8b0 	bl	80050a4 <USB_ReadChInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d11b      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2209      	movs	r2, #9
 8002f62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 f916 	bl	800519e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f84:	6093      	str	r3, [r2, #8]
 8002f86:	e1ee      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 f887 	bl	80050a4 <USB_ReadChInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f040 81df 	bne.w	8003360 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334d      	adds	r3, #77	@ 0x4d
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 8093 	bne.w	80030f2 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	334d      	adds	r3, #77	@ 0x4d
 8002fdc:	2202      	movs	r2, #2
 8002fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334c      	adds	r3, #76	@ 0x4c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3326      	adds	r3, #38	@ 0x26
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d00b      	beq.n	8003022 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3326      	adds	r3, #38	@ 0x26
 800301a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800301c:	2b03      	cmp	r3, #3
 800301e:	f040 8190 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	799b      	ldrb	r3, [r3, #6]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	333d      	adds	r3, #61	@ 0x3d
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2d8      	uxtb	r0, r3
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	333d      	adds	r3, #61	@ 0x3d
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	799b      	ldrb	r3, [r3, #6]
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 8171 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3334      	adds	r3, #52	@ 0x34
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8165 	beq.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3334      	adds	r3, #52	@ 0x34
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4403      	add	r3, r0
 8003098:	3328      	adds	r3, #40	@ 0x28
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	440b      	add	r3, r1
 800309e:	1e59      	subs	r1, r3, #1
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4403      	add	r3, r0
 80030ae:	3328      	adds	r3, #40	@ 0x28
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 813f 	beq.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	333d      	adds	r3, #61	@ 0x3d
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2d8      	uxtb	r0, r3
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	333d      	adds	r3, #61	@ 0x3d
 80030ec:	4602      	mov	r2, r0
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e127      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334d      	adds	r3, #77	@ 0x4d
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d120      	bne.n	800314a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334d      	adds	r3, #77	@ 0x4d
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	331b      	adds	r3, #27
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8107 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334c      	adds	r3, #76	@ 0x4c
 8003144:	2202      	movs	r2, #2
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e0fb      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d13a      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	334d      	adds	r3, #77	@ 0x4d
 8003170:	2202      	movs	r2, #2
 8003172:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	334c      	adds	r3, #76	@ 0x4c
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	331b      	adds	r3, #27
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	f040 80d1 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	331b      	adds	r3, #27
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	0151      	lsls	r1, r2, #5
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	440a      	add	r2, r1
 80031ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d2:	6053      	str	r3, [r2, #4]
 80031d4:	e0b5      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d114      	bne.n	8003216 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	@ 0x4c
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e095      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b06      	cmp	r3, #6
 800322a:	d114      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	2202      	movs	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334c      	adds	r3, #76	@ 0x4c
 8003250:	2205      	movs	r2, #5
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e075      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334d      	adds	r3, #77	@ 0x4d
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b07      	cmp	r3, #7
 800326a:	d00a      	beq.n	8003282 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800327e:	2b09      	cmp	r3, #9
 8003280:	d170      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334d      	adds	r3, #77	@ 0x4d
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3344      	adds	r3, #68	@ 0x44
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c59      	adds	r1, r3, #1
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4403      	add	r3, r0
 80032b6:	3344      	adds	r3, #68	@ 0x44
 80032b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3344      	adds	r3, #68	@ 0x44
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d914      	bls.n	80032fa <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3344      	adds	r3, #68	@ 0x44
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334c      	adds	r3, #76	@ 0x4c
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032f8:	e022      	b.n	8003340 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334c      	adds	r3, #76	@ 0x4c
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003324:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800332c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003340:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334c      	adds	r3, #76	@ 0x4c
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f004 ff1f 	bl	800819c <HAL_HCD_HC_NotifyURBChange_Callback>
 800335e:	e002      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003364:	bf00      	nop
  }
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	@ 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	0c5b      	lsrs	r3, r3, #17
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HCD_RXQLVL_IRQHandler+0x46>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	f000 80b6 	beq.w	800351c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033b0:	e0b7      	b.n	8003522 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80b3 	beq.w	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	332c      	adds	r3, #44	@ 0x2c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a7 	beq.w	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3338      	adds	r3, #56	@ 0x38
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	3334      	adds	r3, #52	@ 0x34
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4299      	cmp	r1, r3
 80033fc:	f200 8083 	bhi.w	8003506 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	332c      	adds	r3, #44	@ 0x2c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	b292      	uxth	r2, r2
 800341a:	4619      	mov	r1, r3
 800341c:	f001 fdd7 	bl	8004fce <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	332c      	adds	r3, #44	@ 0x2c
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	18d1      	adds	r1, r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4403      	add	r3, r0
 8003444:	332c      	adds	r3, #44	@ 0x2c
 8003446:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3338      	adds	r3, #56	@ 0x38
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	18d1      	adds	r1, r2, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	3338      	adds	r3, #56	@ 0x38
 800346e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	0cdb      	lsrs	r3, r3, #19
 8003480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003484:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4293      	cmp	r3, r2
 800349e:	d13f      	bne.n	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d03c      	beq.n	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034bc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034c4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	333c      	adds	r3, #60	@ 0x3c
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2d8      	uxtb	r0, r3
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333c      	adds	r3, #60	@ 0x3c
 8003500:	4602      	mov	r2, r0
 8003502:	701a      	strb	r2, [r3, #0]
      break;
 8003504:	e00c      	b.n	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	334c      	adds	r3, #76	@ 0x4c
 8003516:	2204      	movs	r2, #4
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e001      	b.n	8003520 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003520:	bf00      	nop
  }
}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	@ 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003556:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d10b      	bne.n	800357a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 fdf9 	bl	8008164 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d132      	bne.n	80035ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d126      	bne.n	80035e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7a5b      	ldrb	r3, [r3, #9]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d113      	bne.n	80035c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035a8:	d106      	bne.n	80035b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fda6 	bl	8005102 <USB_InitFSLSPClkSel>
 80035b6:	e011      	b.n	80035dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fd9f 	bl	8005102 <USB_InitFSLSPClkSel>
 80035c4:	e00a      	b.n	80035dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	79db      	ldrb	r3, [r3, #7]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d106      	bne.n	80035dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035d4:	461a      	mov	r2, r3
 80035d6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80035da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f004 fdef 	bl	80081c0 <HAL_HCD_PortEnabled_Callback>
 80035e2:	e002      	b.n	80035ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 fdf9 	bl	80081dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d103      	bne.n	80035fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e12b      	b.n	800387a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fc9e 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003674:	f001 fa20 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8003678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a81      	ldr	r2, [pc, #516]	@ (8003884 <HAL_I2C_Init+0x274>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d807      	bhi.n	8003694 <HAL_I2C_Init+0x84>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a80      	ldr	r2, [pc, #512]	@ (8003888 <HAL_I2C_Init+0x278>)
 8003688:	4293      	cmp	r3, r2
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e006      	b.n	80036a2 <HAL_I2C_Init+0x92>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a7d      	ldr	r2, [pc, #500]	@ (800388c <HAL_I2C_Init+0x27c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0e7      	b.n	800387a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a78      	ldr	r2, [pc, #480]	@ (8003890 <HAL_I2C_Init+0x280>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0c9b      	lsrs	r3, r3, #18
 80036b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003884 <HAL_I2C_Init+0x274>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <HAL_I2C_Init+0xd4>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	e009      	b.n	80036f8 <HAL_I2C_Init+0xe8>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	4a69      	ldr	r2, [pc, #420]	@ (8003894 <HAL_I2C_Init+0x284>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	3301      	adds	r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800370a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	495c      	ldr	r1, [pc, #368]	@ (8003884 <HAL_I2C_Init+0x274>)
 8003714:	428b      	cmp	r3, r1
 8003716:	d819      	bhi.n	800374c <HAL_I2C_Init+0x13c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e59      	subs	r1, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fbb1 f3f3 	udiv	r3, r1, r3
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800372c:	400b      	ands	r3, r1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_I2C_Init+0x138>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1e59      	subs	r1, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	e051      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 8003748:	2304      	movs	r3, #4
 800374a:	e04f      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d111      	bne.n	8003778 <HAL_I2C_Init+0x168>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1e58      	subs	r0, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e012      	b.n	800379e <HAL_I2C_Init+0x18e>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	0099      	lsls	r1, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Init+0x196>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e022      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10e      	bne.n	80037cc <HAL_I2C_Init+0x1bc>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e58      	subs	r0, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	440b      	add	r3, r1
 80037bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Init+0x1dc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	0099      	lsls	r1, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6809      	ldr	r1, [r1, #0]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800381a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6911      	ldr	r1, [r2, #16]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	000186a0 	.word	0x000186a0
 8003888:	001e847f 	.word	0x001e847f
 800388c:	003d08ff 	.word	0x003d08ff
 8003890:	431bde83 	.word	0x431bde83
 8003894:	10624dd3 	.word	0x10624dd3

08003898 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e128      	b.n	8003afc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a90      	ldr	r2, [pc, #576]	@ (8003b04 <HAL_I2S_Init+0x26c>)
 80038c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fd fb9f 	bl	8001008 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038e0:	f023 030f 	bic.w	r3, r3, #15
 80038e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2202      	movs	r2, #2
 80038ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d060      	beq.n	80039b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038fe:	2310      	movs	r3, #16
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e001      	b.n	8003908 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d802      	bhi.n	8003916 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003916:	2001      	movs	r0, #1
 8003918:	f001 f9c4 	bl	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800391c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003926:	d125      	bne.n	8003974 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d010      	beq.n	8003952 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	fbb2 f2f3 	udiv	r2, r2, r3
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	461a      	mov	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	3305      	adds	r3, #5
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e01f      	b.n	8003992 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	3305      	adds	r3, #5
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e00e      	b.n	8003992 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	3305      	adds	r3, #5
 8003990:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a5c      	ldr	r2, [pc, #368]	@ (8003b08 <HAL_I2S_Init+0x270>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	08db      	lsrs	r3, r3, #3
 800399c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e003      	b.n	80039c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039b8:	2302      	movs	r3, #2
 80039ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d902      	bls.n	80039cc <HAL_I2S_Init+0x134>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2bff      	cmp	r3, #255	@ 0xff
 80039ca:	d907      	bls.n	80039dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d0:	f043 0210 	orr.w	r2, r3, #16
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e08f      	b.n	8003afc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039fa:	f023 030f 	bic.w	r3, r3, #15
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6851      	ldr	r1, [r2, #4]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	4311      	orrs	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68d2      	ldr	r2, [r2, #12]
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6992      	ldr	r2, [r2, #24]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d161      	bne.n	8003aec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a38      	ldr	r2, [pc, #224]	@ (8003b0c <HAL_I2S_Init+0x274>)
 8003a2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a37      	ldr	r2, [pc, #220]	@ (8003b10 <HAL_I2S_Init+0x278>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_I2S_Init+0x1a4>
 8003a38:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_I2S_Init+0x27c>)
 8003a3a:	e001      	b.n	8003a40 <HAL_I2S_Init+0x1a8>
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4932      	ldr	r1, [pc, #200]	@ (8003b10 <HAL_I2S_Init+0x278>)
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2S_Init+0x1b8>
 8003a4c:	4a31      	ldr	r2, [pc, #196]	@ (8003b14 <HAL_I2S_Init+0x27c>)
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x1bc>
 8003a50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2b      	ldr	r2, [pc, #172]	@ (8003b10 <HAL_I2S_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_I2S_Init+0x1d4>
 8003a68:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <HAL_I2S_Init+0x27c>)
 8003a6a:	e001      	b.n	8003a70 <HAL_I2S_Init+0x1d8>
 8003a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a70:	2202      	movs	r2, #2
 8003a72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a25      	ldr	r2, [pc, #148]	@ (8003b10 <HAL_I2S_Init+0x278>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2S_Init+0x1ea>
 8003a7e:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <HAL_I2S_Init+0x27c>)
 8003a80:	e001      	b.n	8003a86 <HAL_I2S_Init+0x1ee>
 8003a82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a92:	d003      	beq.n	8003a9c <HAL_I2S_Init+0x204>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e001      	b.n	8003aa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	897b      	ldrh	r3, [r7, #10]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ad4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a0d      	ldr	r2, [pc, #52]	@ (8003b10 <HAL_I2S_Init+0x278>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2S_Init+0x24c>
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_I2S_Init+0x27c>)
 8003ae2:	e001      	b.n	8003ae8 <HAL_I2S_Init+0x250>
 8003ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae8:	897a      	ldrh	r2, [r7, #10]
 8003aea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08003c0f 	.word	0x08003c0f
 8003b08:	cccccccd 	.word	0xcccccccd
 8003b0c:	08003d25 	.word	0x08003d25
 8003b10:	40003800 	.word	0x40003800
 8003b14:	40003400 	.word	0x40003400

08003b18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10e      	bne.n	8003ba8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b98:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ffb8 	bl	8003b18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10e      	bne.n	8003c06 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bf6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff93 	bl	8003b2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d13a      	bne.n	8003ca0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d109      	bne.n	8003c48 <I2S_IRQHandler+0x3a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b40      	cmp	r3, #64	@ 0x40
 8003c40:	d102      	bne.n	8003c48 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ffb4 	bl	8003bb0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4e:	2b40      	cmp	r3, #64	@ 0x40
 8003c50:	d126      	bne.n	8003ca0 <I2S_IRQHandler+0x92>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d11f      	bne.n	8003ca0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff50 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d136      	bne.n	8003d1a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d109      	bne.n	8003cca <I2S_IRQHandler+0xbc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d102      	bne.n	8003cca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff45 	bl	8003b54 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d122      	bne.n	8003d1a <I2S_IRQHandler+0x10c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d11b      	bne.n	8003d1a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff13 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a92      	ldr	r2, [pc, #584]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d3e:	4b92      	ldr	r3, [pc, #584]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d40:	e001      	b.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a8b      	ldr	r2, [pc, #556]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5e:	e001      	b.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d70:	d004      	beq.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 8099 	bne.w	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f925 	bl	8003fe0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9c8 	bl	8004140 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d13a      	bne.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d035      	beq.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dce:	4b6e      	ldr	r3, [pc, #440]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4969      	ldr	r1, [pc, #420]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	428b      	cmp	r3, r1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003de2:	4b69      	ldr	r3, [pc, #420]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe88 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	f040 80c3 	bne.w	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80bd 	beq.w	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e62:	4b49      	ldr	r3, [pc, #292]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e64:	e001      	b.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4944      	ldr	r1, [pc, #272]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e72:	428b      	cmp	r3, r1
 8003e74:	d101      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e76:	4b44      	ldr	r3, [pc, #272]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e78:	e001      	b.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e82:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe4a 	bl	8003b40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eac:	e089      	b.n	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8be 	bl	8004044 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8fd 	bl	80040dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d12f      	bne.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02a      	beq.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f04:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f10:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f12:	e001      	b.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4919      	ldr	r1, [pc, #100]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f20:	428b      	cmp	r3, r1
 8003f22:	d101      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f24:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f26:	e001      	b.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fdfa 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d136      	bne.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d031      	beq.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a07      	ldr	r2, [pc, #28]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f6a:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6c:	e001      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4902      	ldr	r1, [pc, #8]	@ (8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d106      	bne.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f7e:	4b02      	ldr	r3, [pc, #8]	@ (8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e006      	b.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f82:	bf00      	nop
 8003f84:	40003800 	.word	0x40003800
 8003f88:	40003400 	.word	0x40003400
 8003f8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f94:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	f043 0204 	orr.w	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fdc0 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc2:	bf00      	nop
}
 8003fc4:	bf00      	nop
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	1c99      	adds	r1, r3, #2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d113      	bne.n	800403a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004020:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ffc9 	bl	8003fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c99      	adds	r1, r3, #2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6251      	str	r1, [r2, #36]	@ 0x24
 8004056:	8819      	ldrh	r1, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <I2SEx_TxISR_I2SExt+0x90>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <I2SEx_TxISR_I2SExt+0x22>
 8004062:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004064:	e001      	b.n	800406a <I2SEx_TxISR_I2SExt+0x26>
 8004066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800406a:	460a      	mov	r2, r1
 800406c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a12      	ldr	r2, [pc, #72]	@ (80040d4 <I2SEx_TxISR_I2SExt+0x90>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <I2SEx_TxISR_I2SExt+0x50>
 8004090:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004092:	e001      	b.n	8004098 <I2SEx_TxISR_I2SExt+0x54>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	490d      	ldr	r1, [pc, #52]	@ (80040d4 <I2SEx_TxISR_I2SExt+0x90>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d101      	bne.n	80040a8 <I2SEx_TxISR_I2SExt+0x64>
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <I2SEx_TxISR_I2SExt+0x94>)
 80040a6:	e001      	b.n	80040ac <I2SEx_TxISR_I2SExt+0x68>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff81 	bl	8003fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40003800 	.word	0x40003800
 80040d8:	40003400 	.word	0x40003400

080040dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68d8      	ldr	r0, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	1c99      	adds	r1, r3, #2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040f4:	b282      	uxth	r2, r0
 80040f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800411e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff4a 	bl	8003fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a20      	ldr	r2, [pc, #128]	@ (80041d0 <I2SEx_RxISR_I2SExt+0x90>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <I2SEx_RxISR_I2SExt+0x16>
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <I2SEx_RxISR_I2SExt+0x94>)
 8004154:	e001      	b.n	800415a <I2SEx_RxISR_I2SExt+0x1a>
 8004156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415a:	68d8      	ldr	r0, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	1c99      	adds	r1, r3, #2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004166:	b282      	uxth	r2, r0
 8004168:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d121      	bne.n	80041c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a12      	ldr	r2, [pc, #72]	@ (80041d0 <I2SEx_RxISR_I2SExt+0x90>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <I2SEx_RxISR_I2SExt+0x50>
 800418c:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <I2SEx_RxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_RxISR_I2SExt+0x54>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	490d      	ldr	r1, [pc, #52]	@ (80041d0 <I2SEx_RxISR_I2SExt+0x90>)
 800419c:	428b      	cmp	r3, r1
 800419e:	d101      	bne.n	80041a4 <I2SEx_RxISR_I2SExt+0x64>
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <I2SEx_RxISR_I2SExt+0x94>)
 80041a2:	e001      	b.n	80041a8 <I2SEx_RxISR_I2SExt+0x68>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff03 	bl	8003fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40003800 	.word	0x40003800
 80041d4:	40003400 	.word	0x40003400

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e267      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041f6:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b85      	ldr	r3, [pc, #532]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b82      	ldr	r3, [pc, #520]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b7e      	ldr	r3, [pc, #504]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e242      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b70      	ldr	r3, [pc, #448]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6f      	ldr	r2, [pc, #444]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6d      	ldr	r3, [pc, #436]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6c      	ldr	r2, [pc, #432]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b69      	ldr	r3, [pc, #420]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a68      	ldr	r2, [pc, #416]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd f93e 	bl	8001510 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004298:	f7fd f93a 	bl	8001510 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e207      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fd f92a 	bl	8001510 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd f926 	bl	8001510 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f3      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b51      	ldr	r3, [pc, #324]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b47      	ldr	r3, [pc, #284]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b44      	ldr	r3, [pc, #272]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c7      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4937      	ldr	r1, [pc, #220]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd f8df 	bl	8001510 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd f8db 	bl	8001510 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a8      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b2b      	ldr	r3, [pc, #172]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4925      	ldr	r1, [pc, #148]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd f8be 	bl	8001510 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004398:	f7fd f8ba 	bl	8001510 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e187      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d036      	beq.n	8004430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd f89e 	bl	8001510 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fd f89a 	bl	8001510 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e167      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd f887 	bl	8001510 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e00e      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd f883 	bl	8001510 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d907      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e150      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004418:	40023800 	.word	0x40023800
 800441c:	42470000 	.word	0x42470000
 8004420:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004424:	4b88      	ldr	r3, [pc, #544]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ea      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8097 	beq.w	800456c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b81      	ldr	r3, [pc, #516]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	4b7d      	ldr	r3, [pc, #500]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4a7c      	ldr	r2, [pc, #496]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	@ 0x40
 800445e:	4b7a      	ldr	r3, [pc, #488]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b77      	ldr	r3, [pc, #476]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447a:	4b74      	ldr	r3, [pc, #464]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd f843 	bl	8001510 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd f83f 	bl	8001510 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e10c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b6a      	ldr	r3, [pc, #424]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2ea>
 80044b4:	4b64      	ldr	r3, [pc, #400]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b8:	4a63      	ldr	r2, [pc, #396]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x30c>
 80044ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a5b      	ldr	r2, [pc, #364]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044e4:	4b58      	ldr	r3, [pc, #352]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a57      	ldr	r2, [pc, #348]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	4b55      	ldr	r3, [pc, #340]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	4a54      	ldr	r2, [pc, #336]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0304 	bic.w	r3, r3, #4
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd f804 	bl	8001510 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd f800 	bl	8001510 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0cb      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ee      	beq.n	800450c <HAL_RCC_OscConfig+0x334>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004530:	f7fc ffee 	bl	8001510 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fc ffea 	bl	8001510 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0b5      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	4b3e      	ldr	r3, [pc, #248]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ee      	bne.n	8004538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	4a38      	ldr	r2, [pc, #224]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a1 	beq.w	80046b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004576:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d05c      	beq.n	800463c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d141      	bne.n	800460e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fc ffbe 	bl	8001510 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fc ffba 	bl	8001510 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e087      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	491b      	ldr	r1, [pc, #108]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fc ff93 	bl	8001510 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fc ff8f 	bl	8001510 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e05c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x416>
 800460c:	e054      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fc ff7c 	bl	8001510 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fc ff78 	bl	8001510 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e045      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x444>
 800463a:	e03d      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e038      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004654:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d121      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d11a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800468a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7fc feaa 	bl	8001510 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fc fea6 	bl	8001510 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	@ (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	@ (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fe0a 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08009320 	.word	0x08009320
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b094      	sub	sp, #80	@ 0x50
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ac:	4b79      	ldr	r3, [pc, #484]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x40>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	f200 80e1 	bhi.w	8004a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x3a>
 80048c6:	e0db      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b73      	ldr	r3, [pc, #460]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048cc:	e0db      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b73      	ldr	r3, [pc, #460]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80048d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d2:	e0d8      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b6d      	ldr	r3, [pc, #436]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	2200      	movs	r2, #0
 80048f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048fe:	2300      	movs	r3, #0
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
 8004902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004906:	4622      	mov	r2, r4
 8004908:	462b      	mov	r3, r5
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	0159      	lsls	r1, r3, #5
 8004914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004918:	0150      	lsls	r0, r2, #5
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4621      	mov	r1, r4
 8004920:	1a51      	subs	r1, r2, r1
 8004922:	6139      	str	r1, [r7, #16]
 8004924:	4629      	mov	r1, r5
 8004926:	eb63 0301 	sbc.w	r3, r3, r1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004938:	4659      	mov	r1, fp
 800493a:	018b      	lsls	r3, r1, #6
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004942:	4651      	mov	r1, sl
 8004944:	018a      	lsls	r2, r1, #6
 8004946:	4651      	mov	r1, sl
 8004948:	ebb2 0801 	subs.w	r8, r2, r1
 800494c:	4659      	mov	r1, fp
 800494e:	eb63 0901 	sbc.w	r9, r3, r1
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004966:	4690      	mov	r8, r2
 8004968:	4699      	mov	r9, r3
 800496a:	4623      	mov	r3, r4
 800496c:	eb18 0303 	adds.w	r3, r8, r3
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	462b      	mov	r3, r5
 8004974:	eb49 0303 	adc.w	r3, r9, r3
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004986:	4629      	mov	r1, r5
 8004988:	024b      	lsls	r3, r1, #9
 800498a:	4621      	mov	r1, r4
 800498c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004990:	4621      	mov	r1, r4
 8004992:	024a      	lsls	r2, r1, #9
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800499a:	2200      	movs	r2, #0
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800499e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049a4:	f7fb fc64 	bl	8000270 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b0:	e058      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b2:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	2200      	movs	r2, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	4611      	mov	r1, r2
 80049be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	f04f 0000 	mov.w	r0, #0
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	0159      	lsls	r1, r3, #5
 80049da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049de:	0150      	lsls	r0, r2, #5
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4641      	mov	r1, r8
 80049e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ea:	4649      	mov	r1, r9
 80049ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a04:	ebb2 040a 	subs.w	r4, r2, sl
 8004a08:	eb63 050b 	sbc.w	r5, r3, fp
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	00eb      	lsls	r3, r5, #3
 8004a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a1a:	00e2      	lsls	r2, r4, #3
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	461d      	mov	r5, r3
 8004a20:	4643      	mov	r3, r8
 8004a22:	18e3      	adds	r3, r4, r3
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	464b      	mov	r3, r9
 8004a28:	eb45 0303 	adc.w	r3, r5, r3
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	028b      	lsls	r3, r1, #10
 8004a3e:	4621      	mov	r1, r4
 8004a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a44:	4621      	mov	r1, r4
 8004a46:	028a      	lsls	r2, r1, #10
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	61fa      	str	r2, [r7, #28]
 8004a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a58:	f7fb fc0a 	bl	8000270 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3750      	adds	r7, #80	@ 0x50
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	007a1200 	.word	0x007a1200

08004aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	@ (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	@ (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	08009330 	.word	0x08009330

08004ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d035      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b08:	4b62      	ldr	r3, [pc, #392]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0e:	f7fc fcff 	bl	8001510 <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b16:	f7fc fcfb 	bl	8001510 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0b0      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b28:	4b5b      	ldr	r3, [pc, #364]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	019a      	lsls	r2, r3, #6
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	071b      	lsls	r3, r3, #28
 8004b40:	4955      	ldr	r1, [pc, #340]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b48:	4b52      	ldr	r3, [pc, #328]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc fcdf 	bl	8001510 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b56:	f7fc fcdb 	bl	8001510 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e090      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b68:	4b4b      	ldr	r3, [pc, #300]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8083 	beq.w	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	4a43      	ldr	r2, [pc, #268]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b92:	4b41      	ldr	r3, [pc, #260]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004baa:	f7fc fcb1 	bl	8001510 <HAL_GetTick>
 8004bae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fc fcad 	bl	8001510 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e062      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc4:	4b35      	ldr	r3, [pc, #212]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd0:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02f      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d028      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bee:	4b2a      	ldr	r3, [pc, #168]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf8:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfe:	4b28      	ldr	r3, [pc, #160]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c04:	4a24      	ldr	r2, [pc, #144]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c0a:	4b23      	ldr	r3, [pc, #140]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d114      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fc fc7b 	bl	8001510 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fc fc77 	bl	8001510 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e02a      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ee      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4c:	d10d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c4e:	4b12      	ldr	r3, [pc, #72]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c62:	490d      	ldr	r1, [pc, #52]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	608b      	str	r3, [r1, #8]
 8004c68:	e005      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c82:	4905      	ldr	r1, [pc, #20]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	42470068 	.word	0x42470068
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	42470e40 	.word	0x42470e40

08004ca4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d13f      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cc2:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cd8:	d12f      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cda:	4b1f      	ldr	r3, [pc, #124]	@ (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cdc:	617b      	str	r3, [r7, #20]
          break;
 8004cde:	e02f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cec:	d108      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cee:	4b19      	ldr	r3, [pc, #100]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf6:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e007      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d00:	4b14      	ldr	r3, [pc, #80]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d08:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d10:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d2a:	0f1b      	lsrs	r3, r3, #28
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	617b      	str	r3, [r7, #20]
          break;
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
          break;
 8004d3e:	bf00      	nop
        }
      }
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004d42:	bf00      	nop
    }
  }
  return frequency;
 8004d44:	697b      	ldr	r3, [r7, #20]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800
 8004d58:	00bb8000 	.word	0x00bb8000
 8004d5c:	007a1200 	.word	0x007a1200
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e01c      	b.n	8004db0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	795b      	ldrb	r3, [r3, #5]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc f9be 	bl	8001108 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0204 	orr.w	r2, r2, #4
 8004da0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07b      	b.n	8004ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dda:	d009      	beq.n	8004df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
 8004de2:	e005      	b.n	8004df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc f99e 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	ea42 0103 	orr.w	r1, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0104 	and.w	r1, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0210 	and.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f28:	d901      	bls.n	8004f2e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e01b      	b.n	8004f66 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	daf2      	bge.n	8004f1c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f52:	d901      	bls.n	8004f58 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d0f0      	beq.n	8004f46 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f8a:	d901      	bls.n	8004f90 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e018      	b.n	8004fc2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	daf2      	bge.n	8004f7e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2210      	movs	r2, #16
 8004fa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fae:	d901      	bls.n	8004fb4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d0f0      	beq.n	8004fa2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b08b      	sub	sp, #44	@ 0x2c
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	e014      	b.n	8005024 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	601a      	str	r2, [r3, #0]
    pDest++;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	3301      	adds	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	3301      	adds	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	3301      	adds	r3, #1
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	3301      	adds	r3, #1
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	429a      	cmp	r2, r3
 800502a:	d3e6      	bcc.n	8004ffa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800502c:	8bfb      	ldrh	r3, [r7, #30]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01e      	beq.n	8005070 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503c:	461a      	mov	r2, r3
 800503e:	f107 0310 	add.w	r3, r7, #16
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	b2da      	uxtb	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	701a      	strb	r2, [r3, #0]
      i++;
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	3301      	adds	r3, #1
 800505c:	623b      	str	r3, [r7, #32]
      pDest++;
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	3301      	adds	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005064:	8bfb      	ldrh	r3, [r7, #30]
 8005066:	3b01      	subs	r3, #1
 8005068:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800506a:	8bfb      	ldrh	r3, [r7, #30]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ea      	bne.n	8005046 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005072:	4618      	mov	r0, r3
 8005074:	372c      	adds	r7, #44	@ 0x2c
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d8:	68bb      	ldr	r3, [r7, #8]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0301 	and.w	r3, r3, #1
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005120:	f023 0303 	bic.w	r3, r3, #3
 8005124:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800514a:	461a      	mov	r2, r3
 800514c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005150:	6053      	str	r3, [r2, #4]
 8005152:	e00c      	b.n	800516e <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d107      	bne.n	800516a <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005160:	461a      	mov	r2, r3
 8005162:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	e001      	b.n	800516e <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	b29b      	uxth	r3, r3
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800519e:	b480      	push	{r7}
 80051a0:	b089      	sub	sp, #36	@ 0x24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0c9b      	lsrs	r3, r3, #18
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	0fdb      	lsrs	r3, r3, #31
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	0fdb      	lsrs	r3, r3, #31
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b20      	cmp	r3, #32
 8005202:	d10d      	bne.n	8005220 <USB_HC_Halt+0x82>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <USB_HC_Halt+0x82>
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d002      	beq.n	800521c <USB_HC_Halt+0x7e>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d101      	bne.n	8005220 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e0d8      	b.n	80053d2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <USB_HC_Halt+0x8e>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d173      	bne.n	8005314 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	440a      	add	r2, r1
 8005242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800524a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d14a      	bne.n	80052ee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d133      	bne.n	80052cc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800527e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005282:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800529e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052a2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052b0:	d82e      	bhi.n	8005310 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c8:	d0ec      	beq.n	80052a4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052ca:	e081      	b.n	80053d0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052ec:	e070      	b.n	80053d0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800530c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800530e:	e05f      	b.n	80053d0 <USB_HC_Halt+0x232>
            break;
 8005310:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005312:	e05d      	b.n	80053d0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800532e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005332:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d133      	bne.n	80053ac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800535e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005362:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800537e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005382:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3301      	adds	r3, #1
 8005388:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005390:	d81d      	bhi.n	80053ce <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053a8:	d0ec      	beq.n	8005384 <USB_HC_Halt+0x1e6>
 80053aa:	e011      	b.n	80053d0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e000      	b.n	80053d0 <USB_HC_Halt+0x232>
          break;
 80053ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3724      	adds	r7, #36	@ 0x24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b088      	sub	sp, #32
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fd7a 	bl	8004eec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053f8:	2110      	movs	r1, #16
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fd87 	bl	8004f0e <USB_FlushTxFifo>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fdb1 	bl	8004f72 <USB_FlushRxFifo>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800541a:	2300      	movs	r3, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e01f      	b.n	8005460 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005436:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800543e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005446:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005454:	461a      	mov	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3301      	adds	r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d9dc      	bls.n	8005420 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e034      	b.n	80054d6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005482:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800548a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005492:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a0:	461a      	mov	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054b2:	d80c      	bhi.n	80054ce <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ca:	d0ec      	beq.n	80054a6 <USB_StopHost+0xc8>
 80054cc:	e000      	b.n	80054d0 <USB_StopHost+0xf2>
        break;
 80054ce:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d9c7      	bls.n	800546c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054e2:	461a      	mov	r2, r3
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054e8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054f0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fce9 	bl	8004eca <USB_EnableGlobalInt>

  return ret;
 80054f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f804 	bl	8005526 <USBH_HandleSof>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b0b      	cmp	r3, #11
 8005536:	d10a      	bne.n	800554e <USBH_HandleSof+0x28>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
  }
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800557a:	2300      	movs	r3, #0
 800557c:	2200      	movs	r2, #0
 800557e:	f000 f8c1 	bl	8005704 <osMessageQueuePut>
#endif
#endif

  return;
 8005582:	bf00      	nop
}
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800559a:	bf00      	nop
}
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80055da:	2300      	movs	r3, #0
 80055dc:	2200      	movs	r2, #0
 80055de:	f000 f891 	bl	8005704 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f002 fdf3 	bl	80081f8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f830 	bl	800567e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	795b      	ldrb	r3, [r3, #5]
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f82a 	bl	800567e <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800563e:	2300      	movs	r3, #0
 8005640:	2200      	movs	r2, #0
 8005642:	f000 f85f 	bl	8005704 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800566c:	2300      	movs	r3, #0
 800566e:	2200      	movs	r2, #0
 8005670:	f000 f848 	bl	8005704 <osMessageQueuePut>
#endif

  return USBH_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d80d      	bhi.n	80056ac <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	33e0      	adds	r3, #224	@ 0xe0
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	33e0      	adds	r3, #224	@ 0xe0
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	603b      	str	r3, [r7, #0]
  return(result);
 80056c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056ce:	f06f 0305 	mvn.w	r3, #5
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	e00c      	b.n	80056f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <osKernelInitialize+0x44>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <osKernelInitialize+0x44>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	e002      	b.n	80056f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056f0:	687b      	ldr	r3, [r7, #4]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	2000019c 	.word	0x2000019c

08005704 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800571c:	f3ef 8305 	mrs	r3, IPSR
 8005720:	617b      	str	r3, [r7, #20]
  return(result);
 8005722:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005724:	2b00      	cmp	r3, #0
 8005726:	d028      	beq.n	800577a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <osMessageQueuePut+0x36>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <osMessageQueuePut+0x36>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800573a:	f06f 0303 	mvn.w	r3, #3
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e038      	b.n	80057b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005746:	f107 0210 	add.w	r2, r7, #16
 800574a:	2300      	movs	r3, #0
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	69b8      	ldr	r0, [r7, #24]
 8005750:	f000 fb68 	bl	8005e24 <xQueueGenericSendFromISR>
 8005754:	4603      	mov	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d003      	beq.n	8005762 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800575a:	f06f 0302 	mvn.w	r3, #2
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	e028      	b.n	80057b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d025      	beq.n	80057b4 <osMessageQueuePut+0xb0>
 8005768:	4b15      	ldr	r3, [pc, #84]	@ (80057c0 <osMessageQueuePut+0xbc>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	e01c      	b.n	80057b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <osMessageQueuePut+0x82>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005786:	f06f 0303 	mvn.w	r3, #3
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e012      	b.n	80057b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800578e:	2300      	movs	r3, #0
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	69b8      	ldr	r0, [r7, #24]
 8005796:	f000 fa43 	bl	8005c20 <xQueueGenericSend>
 800579a:	4603      	mov	r3, r0
 800579c:	2b01      	cmp	r3, #1
 800579e:	d009      	beq.n	80057b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80057a6:	f06f 0301 	mvn.w	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e002      	b.n	80057b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80057ae:	f06f 0302 	mvn.w	r3, #2
 80057b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80057b4:	69fb      	ldr	r3, [r7, #28]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a07      	ldr	r2, [pc, #28]	@ (80057f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80057d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a06      	ldr	r2, [pc, #24]	@ (80057f4 <vApplicationGetIdleTaskMemory+0x30>)
 80057da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2280      	movs	r2, #128	@ 0x80
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200001a0 	.word	0x200001a0
 80057f4:	200001fc 	.word	0x200001fc

080057f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a07      	ldr	r2, [pc, #28]	@ (8005824 <vApplicationGetTimerTaskMemory+0x2c>)
 8005808:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a06      	ldr	r2, [pc, #24]	@ (8005828 <vApplicationGetTimerTaskMemory+0x30>)
 800580e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	200003fc 	.word	0x200003fc
 8005828:	20000458 	.word	0x20000458

0800582c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f103 0208 	add.w	r2, r3, #8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f103 0208 	add.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e4:	d103      	bne.n	80058ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e00c      	b.n	8005908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3308      	adds	r3, #8
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <vListInsert+0x2e>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d2f6      	bcs.n	80058f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6892      	ldr	r2, [r2, #8]
 8005956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6852      	ldr	r2, [r2, #4]
 8005960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d103      	bne.n	8005974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059c0:	f002 f8b2 	bl	8007b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	3b01      	subs	r3, #1
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	441a      	add	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	22ff      	movs	r2, #255	@ 0xff
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d114      	bne.n	8005a40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01a      	beq.n	8005a54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3310      	adds	r3, #16
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f956 	bl	8006cd4 <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <xQueueGenericReset+0xd0>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e009      	b.n	8005a54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3310      	adds	r3, #16
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fef1 	bl	800582c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3324      	adds	r3, #36	@ 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff feec 	bl	800582c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a54:	f002 f89a 	bl	8007b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a58:	2301      	movs	r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08e      	sub	sp, #56	@ 0x38
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <xQueueGenericCreateStatic+0x56>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xQueueGenericCreateStatic+0x5a>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericCreateStatic+0x5c>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	623b      	str	r3, [r7, #32]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <xQueueGenericCreateStatic+0x84>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <xQueueGenericCreateStatic+0x88>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <xQueueGenericCreateStatic+0x8a>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	61fb      	str	r3, [r7, #28]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b0e:	2350      	movs	r3, #80	@ 0x50
 8005b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b50      	cmp	r3, #80	@ 0x50
 8005b16:	d00b      	beq.n	8005b30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61bb      	str	r3, [r7, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f840 	bl	8005bd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3730      	adds	r7, #48	@ 0x30
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b08a      	sub	sp, #40	@ 0x28
 8005b66:	af02      	add	r7, sp, #8
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	613b      	str	r3, [r7, #16]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	3350      	adds	r3, #80	@ 0x50
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 f8e5 	bl	8007d6c <pvPortMalloc>
 8005ba2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	3350      	adds	r3, #80	@ 0x50
 8005bb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bbc:	79fa      	ldrb	r2, [r7, #7]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f805 	bl	8005bd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bce:	69bb      	ldr	r3, [r7, #24]
	}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e002      	b.n	8005bfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c06:	2101      	movs	r1, #1
 8005c08:	69b8      	ldr	r0, [r7, #24]
 8005c0a:	f7ff fec3 	bl	8005994 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	@ 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <xQueueGenericSend+0x34>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x42>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSend+0x46>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSend+0x48>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xQueueGenericSend+0x64>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d103      	bne.n	8005c92 <xQueueGenericSend+0x72>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericSend+0x76>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericSend+0x78>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xQueueGenericSend+0x94>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cb4:	f001 f9ce 	bl	8007054 <xTaskGetSchedulerState>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <xQueueGenericSend+0xa4>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <xQueueGenericSend+0xa8>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <xQueueGenericSend+0xaa>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <xQueueGenericSend+0xc6>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	61fb      	str	r3, [r7, #28]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce6:	f001 ff1f 	bl	8007b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <xQueueGenericSend+0xdc>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d129      	bne.n	8005d50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d02:	f000 fa0f 	bl	8006124 <prvCopyDataToQueue>
 8005d06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	3324      	adds	r3, #36	@ 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ffdd 	bl	8006cd4 <xTaskRemoveFromEventList>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d20:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <xQueueGenericSend+0x200>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	e00a      	b.n	8005d48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d38:	4b39      	ldr	r3, [pc, #228]	@ (8005e20 <xQueueGenericSend+0x200>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d48:	f001 ff20 	bl	8007b8c <vPortExitCritical>
				return pdPASS;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e063      	b.n	8005e18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d56:	f001 ff19 	bl	8007b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e05c      	b.n	8005e18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f817 	bl	8006d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d72:	f001 ff0b 	bl	8007b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d76:	f000 fd87 	bl	8006888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d7a:	f001 fed5 	bl	8007b28 <vPortEnterCritical>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d8a:	d103      	bne.n	8005d94 <xQueueGenericSend+0x174>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da0:	d103      	bne.n	8005daa <xQueueGenericSend+0x18a>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005daa:	f001 feef 	bl	8007b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dae:	1d3a      	adds	r2, r7, #4
 8005db0:	f107 0314 	add.w	r3, r7, #20
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f806 	bl	8006dc8 <xTaskCheckForTimeOut>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d124      	bne.n	8005e0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dc4:	f000 faa6 	bl	8006314 <prvIsQueueFull>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d018      	beq.n	8005e00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 ff2a 	bl	8006c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dde:	f000 fa31 	bl	8006244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005de2:	f000 fd5f 	bl	80068a4 <xTaskResumeAll>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f af7c 	bne.w	8005ce6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005dee:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <xQueueGenericSend+0x200>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	e772      	b.n	8005ce6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e02:	f000 fa1f 	bl	8006244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e06:	f000 fd4d 	bl	80068a4 <xTaskResumeAll>
 8005e0a:	e76c      	b.n	8005ce6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e0e:	f000 fa19 	bl	8006244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e12:	f000 fd47 	bl	80068a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3738      	adds	r7, #56	@ 0x38
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b090      	sub	sp, #64	@ 0x40
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	e7fd      	b.n	8005e50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSendFromISR+0x3e>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <xQueueGenericSendFromISR+0x42>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <xQueueGenericSendFromISR+0x44>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSendFromISR+0x6e>
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <xQueueGenericSendFromISR+0x72>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueGenericSendFromISR+0x74>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb4:	f001 ff18 	bl	8007ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eb8:	f3ef 8211 	mrs	r2, BASEPRI
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	61fa      	str	r2, [r7, #28]
 8005ece:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <xQueueGenericSendFromISR+0xc2>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d12f      	bne.n	8005f46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005efc:	f000 f912 	bl	8006124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f08:	d112      	bne.n	8005f30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	3324      	adds	r3, #36	@ 0x24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fedc 	bl	8006cd4 <xTaskRemoveFromEventList>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e007      	b.n	8005f40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f34:	3301      	adds	r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	b25a      	sxtb	r2, r3
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f40:	2301      	movs	r3, #1
 8005f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f44:	e001      	b.n	8005f4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3740      	adds	r7, #64	@ 0x40
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	@ 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <xQueueReceive+0x32>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	623b      	str	r3, [r7, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	e7fd      	b.n	8005f8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <xQueueReceive+0x40>
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <xQueueReceive+0x44>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <xQueueReceive+0x46>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <xQueueReceive+0x62>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	61fb      	str	r3, [r7, #28]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc2:	f001 f847 	bl	8007054 <xTaskGetSchedulerState>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <xQueueReceive+0x72>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <xQueueReceive+0x76>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <xQueueReceive+0x78>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <xQueueReceive+0x94>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	61bb      	str	r3, [r7, #24]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ff4:	f001 fd98 	bl	8007b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01f      	beq.n	8006044 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006008:	f000 f8f6 	bl	80061f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00f      	beq.n	800603c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	3310      	adds	r3, #16
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fe57 	bl	8006cd4 <xTaskRemoveFromEventList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800602c:	4b3c      	ldr	r3, [pc, #240]	@ (8006120 <xQueueReceive+0x1c0>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800603c:	f001 fda6 	bl	8007b8c <vPortExitCritical>
				return pdPASS;
 8006040:	2301      	movs	r3, #1
 8006042:	e069      	b.n	8006118 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800604a:	f001 fd9f 	bl	8007b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800604e:	2300      	movs	r3, #0
 8006050:	e062      	b.n	8006118 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006058:	f107 0310 	add.w	r3, r7, #16
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fe9d 	bl	8006d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006062:	2301      	movs	r3, #1
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006066:	f001 fd91 	bl	8007b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800606a:	f000 fc0d 	bl	8006888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800606e:	f001 fd5b 	bl	8007b28 <vPortEnterCritical>
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006078:	b25b      	sxtb	r3, r3
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800607e:	d103      	bne.n	8006088 <xQueueReceive+0x128>
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800608e:	b25b      	sxtb	r3, r3
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006094:	d103      	bne.n	800609e <xQueueReceive+0x13e>
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800609e:	f001 fd75 	bl	8007b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060a2:	1d3a      	adds	r2, r7, #4
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fe8c 	bl	8006dc8 <xTaskCheckForTimeOut>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d123      	bne.n	80060fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b8:	f000 f916 	bl	80062e8 <prvIsQueueEmpty>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	3324      	adds	r3, #36	@ 0x24
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fdb0 	bl	8006c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d2:	f000 f8b7 	bl	8006244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060d6:	f000 fbe5 	bl	80068a4 <xTaskResumeAll>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d189      	bne.n	8005ff4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006120 <xQueueReceive+0x1c0>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	e780      	b.n	8005ff4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f4:	f000 f8a6 	bl	8006244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060f8:	f000 fbd4 	bl	80068a4 <xTaskResumeAll>
 80060fc:	e77a      	b.n	8005ff4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006100:	f000 f8a0 	bl	8006244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006104:	f000 fbce 	bl	80068a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800610a:	f000 f8ed 	bl	80062e8 <prvIsQueueEmpty>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	f43f af6f 	beq.w	8005ff4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006116:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	@ 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14d      	bne.n	80061e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ff9e 	bl	8007090 <xTaskPriorityDisinherit>
 8006154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	e043      	b.n	80061e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d119      	bne.n	8006198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6858      	ldr	r0, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616c:	461a      	mov	r2, r3
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	f002 fb3d 	bl	80087ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d32b      	bcc.n	80061e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	e026      	b.n	80061e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68d8      	ldr	r0, [r3, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	461a      	mov	r2, r3
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	f002 fb23 	bl	80087ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	425b      	negs	r3, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d207      	bcs.n	80061d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061cc:	425b      	negs	r3, r3
 80061ce:	441a      	add	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d105      	bne.n	80061e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80061ee:	697b      	ldr	r3, [r7, #20]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	441a      	add	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	d303      	bcc.n	800622c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68d9      	ldr	r1, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	461a      	mov	r2, r3
 8006236:	6838      	ldr	r0, [r7, #0]
 8006238:	f002 fad9 	bl	80087ee <memcpy>
	}
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800624c:	f001 fc6c 	bl	8007b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006258:	e011      	b.n	800627e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d012      	beq.n	8006288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3324      	adds	r3, #36	@ 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fd34 	bl	8006cd4 <xTaskRemoveFromEventList>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006272:	f000 fe0d 	bl	8006e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3b01      	subs	r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dce9      	bgt.n	800625a <prvUnlockQueue+0x16>
 8006286:	e000      	b.n	800628a <prvUnlockQueue+0x46>
					break;
 8006288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	22ff      	movs	r2, #255	@ 0xff
 800628e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006292:	f001 fc7b 	bl	8007b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006296:	f001 fc47 	bl	8007b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062a2:	e011      	b.n	80062c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3310      	adds	r3, #16
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fd0f 	bl	8006cd4 <xTaskRemoveFromEventList>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062bc:	f000 fde8 	bl	8006e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dce9      	bgt.n	80062a4 <prvUnlockQueue+0x60>
 80062d0:	e000      	b.n	80062d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	22ff      	movs	r2, #255	@ 0xff
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80062dc:	f001 fc56 	bl	8007b8c <vPortExitCritical>
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062f0:	f001 fc1a 	bl	8007b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e001      	b.n	8006306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006306:	f001 fc41 	bl	8007b8c <vPortExitCritical>

	return xReturn;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800631c:	f001 fc04 	bl	8007b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006328:	429a      	cmp	r2, r3
 800632a:	d102      	bne.n	8006332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e001      	b.n	8006336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006336:	f001 fc29 	bl	8007b8c <vPortExitCritical>

	return xReturn;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e014      	b.n	800637e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006354:	4a0f      	ldr	r2, [pc, #60]	@ (8006394 <vQueueAddToRegistry+0x50>)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006360:	490c      	ldr	r1, [pc, #48]	@ (8006394 <vQueueAddToRegistry+0x50>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800636a:	4a0a      	ldr	r2, [pc, #40]	@ (8006394 <vQueueAddToRegistry+0x50>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006376:	e006      	b.n	8006386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b07      	cmp	r3, #7
 8006382:	d9e7      	bls.n	8006354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000858 	.word	0x20000858

08006398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063a8:	f001 fbbe 	bl	8007b28 <vPortEnterCritical>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063b8:	d103      	bne.n	80063c2 <vQueueWaitForMessageRestricted+0x2a>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063ce:	d103      	bne.n	80063d8 <vQueueWaitForMessageRestricted+0x40>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063d8:	f001 fbd8 	bl	8007b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3324      	adds	r3, #36	@ 0x24
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fc45 	bl	8006c7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063f2:	6978      	ldr	r0, [r7, #20]
 80063f4:	f7ff ff26 	bl	8006244 <prvUnlockQueue>
	}
 80063f8:	bf00      	nop
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	@ 0x38
 8006404:	af04      	add	r7, sp, #16
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800640e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	623b      	str	r3, [r7, #32]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800644a:	235c      	movs	r3, #92	@ 0x5c
 800644c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b5c      	cmp	r3, #92	@ 0x5c
 8006452:	d00b      	beq.n	800646c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	61bb      	str	r3, [r7, #24]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800646c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01e      	beq.n	80064b2 <xTaskCreateStatic+0xb2>
 8006474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f850 	bl	800654a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064ac:	f000 f8de 	bl	800666c <prvAddNewTaskToReadyList>
 80064b0:	e001      	b.n	80064b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b6:	697b      	ldr	r3, [r7, #20]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	@ 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	@ 0x30
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fc49 	bl	8007d6c <pvPortMalloc>
 80064da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064e2:	205c      	movs	r0, #92	@ 0x5c
 80064e4:	f001 fc42 	bl	8007d6c <pvPortMalloc>
 80064e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f6:	e005      	b.n	8006504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f8:	6978      	ldr	r0, [r7, #20]
 80064fa:	f001 fd05 	bl	8007f08 <vPortFree>
 80064fe:	e001      	b.n	8006504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f80e 	bl	800654a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652e:	69f8      	ldr	r0, [r7, #28]
 8006530:	f000 f89c 	bl	800666c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e002      	b.n	8006540 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800653e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006540:	69bb      	ldr	r3, [r7, #24]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b088      	sub	sp, #32
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	461a      	mov	r2, r3
 8006562:	21a5      	movs	r1, #165	@ 0xa5
 8006564:	f002 f8b7 	bl	80086d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006572:	3b01      	subs	r3, #1
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f023 0307 	bic.w	r3, r3, #7
 8006580:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	617b      	str	r3, [r7, #20]
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01f      	beq.n	80065ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e012      	b.n	80065d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	3334      	adds	r3, #52	@ 0x34
 80065c0:	460a      	mov	r2, r1
 80065c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b0f      	cmp	r3, #15
 80065da:	d9e9      	bls.n	80065b0 <prvInitialiseNewTask+0x66>
 80065dc:	e000      	b.n	80065e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80065de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065e8:	e003      	b.n	80065f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f4:	2b37      	cmp	r3, #55	@ 0x37
 80065f6:	d901      	bls.n	80065fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065f8:	2337      	movs	r3, #55	@ 0x37
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006600:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006606:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	2200      	movs	r2, #0
 800660c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f92a 	bl	800586c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	3318      	adds	r3, #24
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff f925 	bl	800586c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006636:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	2200      	movs	r2, #0
 800663c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68f9      	ldr	r1, [r7, #12]
 800664a:	69b8      	ldr	r0, [r7, #24]
 800664c:	f001 f93e 	bl	80078cc <pxPortInitialiseStack>
 8006650:	4602      	mov	r2, r0
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800665c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006662:	bf00      	nop
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006674:	f001 fa58 	bl	8007b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006678:	4b2d      	ldr	r3, [pc, #180]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 8006680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006682:	4b2c      	ldr	r3, [pc, #176]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800668a:	4a2a      	ldr	r2, [pc, #168]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006690:	4b27      	ldr	r3, [pc, #156]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d110      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006698:	f000 fc1e 	bl	8006ed8 <prvInitialiseTaskLists>
 800669c:	e00d      	b.n	80066ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800669e:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a6:	4b23      	ldr	r3, [pc, #140]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d802      	bhi.n	80066ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066ba:	4b20      	ldr	r3, [pc, #128]	@ (800673c <prvAddNewTaskToReadyList+0xd0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a1e      	ldr	r2, [pc, #120]	@ (800673c <prvAddNewTaskToReadyList+0xd0>)
 80066c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066c4:	4b1d      	ldr	r3, [pc, #116]	@ (800673c <prvAddNewTaskToReadyList+0xd0>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <prvAddNewTaskToReadyList+0xd4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d903      	bls.n	80066e0 <prvAddNewTaskToReadyList+0x74>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <prvAddNewTaskToReadyList+0xd4>)
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <prvAddNewTaskToReadyList+0xd8>)
 80066ee:	441a      	add	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7ff f8c5 	bl	8005886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066fc:	f001 fa46 	bl	8007b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006700:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <prvAddNewTaskToReadyList+0xcc>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006708:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	429a      	cmp	r2, r3
 8006714:	d207      	bcs.n	8006726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvAddNewTaskToReadyList+0xdc>)
 8006718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000d6c 	.word	0x20000d6c
 8006734:	20000898 	.word	0x20000898
 8006738:	20000d78 	.word	0x20000d78
 800673c:	20000d88 	.word	0x20000d88
 8006740:	20000d74 	.word	0x20000d74
 8006744:	2000089c 	.word	0x2000089c
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d018      	beq.n	8006790 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800675e:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <vTaskDelay+0x64>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <vTaskDelay+0x32>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800677e:	f000 f883 	bl	8006888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006782:	2100      	movs	r1, #0
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fcf3 	bl	8007170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800678a:	f000 f88b 	bl	80068a4 <xTaskResumeAll>
 800678e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d107      	bne.n	80067a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <vTaskDelay+0x68>)
 8006798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000d94 	.word	0x20000d94
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	@ 0x28
 80067bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067c6:	463a      	mov	r2, r7
 80067c8:	1d39      	adds	r1, r7, #4
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fff8 	bl	80057c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	9202      	str	r2, [sp, #8]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	2300      	movs	r3, #0
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	460a      	mov	r2, r1
 80067e6:	4922      	ldr	r1, [pc, #136]	@ (8006870 <vTaskStartScheduler+0xb8>)
 80067e8:	4822      	ldr	r0, [pc, #136]	@ (8006874 <vTaskStartScheduler+0xbc>)
 80067ea:	f7ff fe09 	bl	8006400 <xTaskCreateStatic>
 80067ee:	4603      	mov	r3, r0
 80067f0:	4a21      	ldr	r2, [pc, #132]	@ (8006878 <vTaskStartScheduler+0xc0>)
 80067f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067f4:	4b20      	ldr	r3, [pc, #128]	@ (8006878 <vTaskStartScheduler+0xc0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067fc:	2301      	movs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e001      	b.n	8006806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d102      	bne.n	8006812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800680c:	f000 fd04 	bl	8007218 <xTimerCreateTimerTask>
 8006810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d116      	bne.n	8006846 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	613b      	str	r3, [r7, #16]
}
 800682a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <vTaskStartScheduler+0xc4>)
 800682e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006832:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006834:	4b12      	ldr	r3, [pc, #72]	@ (8006880 <vTaskStartScheduler+0xc8>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <vTaskStartScheduler+0xcc>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006840:	f001 f8ce 	bl	80079e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006844:	e00f      	b.n	8006866 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800684c:	d10b      	bne.n	8006866 <vTaskStartScheduler+0xae>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <vTaskStartScheduler+0xaa>
}
 8006866:	bf00      	nop
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	08009300 	.word	0x08009300
 8006874:	08006ea9 	.word	0x08006ea9
 8006878:	20000d90 	.word	0x20000d90
 800687c:	20000d8c 	.word	0x20000d8c
 8006880:	20000d78 	.word	0x20000d78
 8006884:	20000d70 	.word	0x20000d70

08006888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800688c:	4b04      	ldr	r3, [pc, #16]	@ (80068a0 <vTaskSuspendAll+0x18>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	4a03      	ldr	r2, [pc, #12]	@ (80068a0 <vTaskSuspendAll+0x18>)
 8006894:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000d94 	.word	0x20000d94

080068a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068b2:	4b42      	ldr	r3, [pc, #264]	@ (80069bc <xTaskResumeAll+0x118>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	603b      	str	r3, [r7, #0]
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	e7fd      	b.n	80068ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068d2:	f001 f929 	bl	8007b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068d6:	4b39      	ldr	r3, [pc, #228]	@ (80069bc <xTaskResumeAll+0x118>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3b01      	subs	r3, #1
 80068dc:	4a37      	ldr	r2, [pc, #220]	@ (80069bc <xTaskResumeAll+0x118>)
 80068de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e0:	4b36      	ldr	r3, [pc, #216]	@ (80069bc <xTaskResumeAll+0x118>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d162      	bne.n	80069ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068e8:	4b35      	ldr	r3, [pc, #212]	@ (80069c0 <xTaskResumeAll+0x11c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05e      	beq.n	80069ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068f0:	e02f      	b.n	8006952 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f2:	4b34      	ldr	r3, [pc, #208]	@ (80069c4 <xTaskResumeAll+0x120>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3318      	adds	r3, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff f81e 	bl	8005940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff f819 	bl	8005940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	4b2d      	ldr	r3, [pc, #180]	@ (80069c8 <xTaskResumeAll+0x124>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <xTaskResumeAll+0x7e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a2a      	ldr	r2, [pc, #168]	@ (80069c8 <xTaskResumeAll+0x124>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a27      	ldr	r2, [pc, #156]	@ (80069cc <xTaskResumeAll+0x128>)
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe ffa4 	bl	8005886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	4b23      	ldr	r3, [pc, #140]	@ (80069d0 <xTaskResumeAll+0x12c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800694c:	4b21      	ldr	r3, [pc, #132]	@ (80069d4 <xTaskResumeAll+0x130>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006952:	4b1c      	ldr	r3, [pc, #112]	@ (80069c4 <xTaskResumeAll+0x120>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1cb      	bne.n	80068f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006960:	f000 fb58 	bl	8007014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006964:	4b1c      	ldr	r3, [pc, #112]	@ (80069d8 <xTaskResumeAll+0x134>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006970:	f000 f846 	bl	8006a00 <xTaskIncrementTick>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800697a:	4b16      	ldr	r3, [pc, #88]	@ (80069d4 <xTaskResumeAll+0x130>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3b01      	subs	r3, #1
 8006984:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f1      	bne.n	8006970 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800698c:	4b12      	ldr	r3, [pc, #72]	@ (80069d8 <xTaskResumeAll+0x134>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <xTaskResumeAll+0x130>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800699a:	2301      	movs	r3, #1
 800699c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800699e:	4b0f      	ldr	r3, [pc, #60]	@ (80069dc <xTaskResumeAll+0x138>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ae:	f001 f8ed 	bl	8007b8c <vPortExitCritical>

	return xAlreadyYielded;
 80069b2:	68bb      	ldr	r3, [r7, #8]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000d94 	.word	0x20000d94
 80069c0:	20000d6c 	.word	0x20000d6c
 80069c4:	20000d2c 	.word	0x20000d2c
 80069c8:	20000d74 	.word	0x20000d74
 80069cc:	2000089c 	.word	0x2000089c
 80069d0:	20000898 	.word	0x20000898
 80069d4:	20000d80 	.word	0x20000d80
 80069d8:	20000d7c 	.word	0x20000d7c
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069e6:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <xTaskGetTickCount+0x1c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000d70 	.word	0x20000d70

08006a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b48 <xTaskIncrementTick+0x148>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 8090 	bne.w	8006b34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a14:	4b4d      	ldr	r3, [pc, #308]	@ (8006b4c <xTaskIncrementTick+0x14c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006b4c <xTaskIncrementTick+0x14c>)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d121      	bne.n	8006a6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a28:	4b49      	ldr	r3, [pc, #292]	@ (8006b50 <xTaskIncrementTick+0x150>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	603b      	str	r3, [r7, #0]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xTaskIncrementTick+0x46>
 8006a4a:	4b41      	ldr	r3, [pc, #260]	@ (8006b50 <xTaskIncrementTick+0x150>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	4b40      	ldr	r3, [pc, #256]	@ (8006b54 <xTaskIncrementTick+0x154>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a3e      	ldr	r2, [pc, #248]	@ (8006b50 <xTaskIncrementTick+0x150>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	4a3e      	ldr	r2, [pc, #248]	@ (8006b54 <xTaskIncrementTick+0x154>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b58 <xTaskIncrementTick+0x158>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a3c      	ldr	r2, [pc, #240]	@ (8006b58 <xTaskIncrementTick+0x158>)
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	f000 fad4 	bl	8007014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <xTaskIncrementTick+0x15c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d349      	bcc.n	8006b0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a76:	4b36      	ldr	r3, [pc, #216]	@ (8006b50 <xTaskIncrementTick+0x150>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a80:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <xTaskIncrementTick+0x15c>)
 8006a82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a86:	601a      	str	r2, [r3, #0]
					break;
 8006a88:	e03f      	b.n	8006b0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8a:	4b31      	ldr	r3, [pc, #196]	@ (8006b50 <xTaskIncrementTick+0x150>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d203      	bcs.n	8006aaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8006b5c <xTaskIncrementTick+0x15c>)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aa8:	e02f      	b.n	8006b0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe ff46 	bl	8005940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	3318      	adds	r3, #24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe ff3d 	bl	8005940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aca:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <xTaskIncrementTick+0x160>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d903      	bls.n	8006ada <xTaskIncrementTick+0xda>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <xTaskIncrementTick+0x160>)
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b64 <xTaskIncrementTick+0x164>)
 8006ae8:	441a      	add	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	4610      	mov	r0, r2
 8006af2:	f7fe fec8 	bl	8005886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <xTaskIncrementTick+0x168>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3b8      	bcc.n	8006a76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b08:	e7b5      	b.n	8006a76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b0a:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <xTaskIncrementTick+0x168>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b10:	4914      	ldr	r1, [pc, #80]	@ (8006b64 <xTaskIncrementTick+0x164>)
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d901      	bls.n	8006b26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b26:	4b11      	ldr	r3, [pc, #68]	@ (8006b6c <xTaskIncrementTick+0x16c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e004      	b.n	8006b3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b34:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <xTaskIncrementTick+0x170>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b70 <xTaskIncrementTick+0x170>)
 8006b3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b3e:	697b      	ldr	r3, [r7, #20]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000d94 	.word	0x20000d94
 8006b4c:	20000d70 	.word	0x20000d70
 8006b50:	20000d24 	.word	0x20000d24
 8006b54:	20000d28 	.word	0x20000d28
 8006b58:	20000d84 	.word	0x20000d84
 8006b5c:	20000d8c 	.word	0x20000d8c
 8006b60:	20000d74 	.word	0x20000d74
 8006b64:	2000089c 	.word	0x2000089c
 8006b68:	20000898 	.word	0x20000898
 8006b6c:	20000d80 	.word	0x20000d80
 8006b70:	20000d7c 	.word	0x20000d7c

08006b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b7a:	4b28      	ldr	r3, [pc, #160]	@ (8006c1c <vTaskSwitchContext+0xa8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b82:	4b27      	ldr	r3, [pc, #156]	@ (8006c20 <vTaskSwitchContext+0xac>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b88:	e042      	b.n	8006c10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006b8a:	4b25      	ldr	r3, [pc, #148]	@ (8006c20 <vTaskSwitchContext+0xac>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b90:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <vTaskSwitchContext+0xb0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e011      	b.n	8006bbc <vTaskSwitchContext+0x48>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <vTaskSwitchContext+0x3e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	491a      	ldr	r1, [pc, #104]	@ (8006c28 <vTaskSwitchContext+0xb4>)
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0e3      	beq.n	8006b98 <vTaskSwitchContext+0x24>
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a13      	ldr	r2, [pc, #76]	@ (8006c28 <vTaskSwitchContext+0xb4>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d104      	bne.n	8006c00 <vTaskSwitchContext+0x8c>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	605a      	str	r2, [r3, #4]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	4a09      	ldr	r2, [pc, #36]	@ (8006c2c <vTaskSwitchContext+0xb8>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4a06      	ldr	r2, [pc, #24]	@ (8006c24 <vTaskSwitchContext+0xb0>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000d94 	.word	0x20000d94
 8006c20:	20000d80 	.word	0x20000d80
 8006c24:	20000d74 	.word	0x20000d74
 8006c28:	2000089c 	.word	0x2000089c
 8006c2c:	20000898 	.word	0x20000898

08006c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c58:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <vTaskPlaceOnEventList+0x48>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3318      	adds	r3, #24
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fe fe34 	bl	80058ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c66:	2101      	movs	r1, #1
 8006c68:	6838      	ldr	r0, [r7, #0]
 8006c6a:	f000 fa81 	bl	8007170 <prvAddCurrentTaskToDelayedList>
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000898 	.word	0x20000898

08006c7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	617b      	str	r3, [r7, #20]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3318      	adds	r3, #24
 8006cac:	4619      	mov	r1, r3
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7fe fde9 	bl	8005886 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	f000 fa54 	bl	8007170 <prvAddCurrentTaskToDelayedList>
	}
 8006cc8:	bf00      	nop
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000898 	.word	0x20000898

08006cd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3318      	adds	r3, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fe1a 	bl	8005940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <xTaskRemoveFromEventList+0xb0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11d      	bne.n	8006d50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fe11 	bl	8005940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d22:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <xTaskRemoveFromEventList+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d903      	bls.n	8006d32 <xTaskRemoveFromEventList+0x5e>
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <xTaskRemoveFromEventList+0xb4>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4a13      	ldr	r2, [pc, #76]	@ (8006d8c <xTaskRemoveFromEventList+0xb8>)
 8006d40:	441a      	add	r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7fe fd9c 	bl	8005886 <vListInsertEnd>
 8006d4e:	e005      	b.n	8006d5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3318      	adds	r3, #24
 8006d54:	4619      	mov	r1, r3
 8006d56:	480e      	ldr	r0, [pc, #56]	@ (8006d90 <xTaskRemoveFromEventList+0xbc>)
 8006d58:	f7fe fd95 	bl	8005886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d60:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <xTaskRemoveFromEventList+0xc0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d905      	bls.n	8006d76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <xTaskRemoveFromEventList+0xc4>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e001      	b.n	8006d7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d7a:	697b      	ldr	r3, [r7, #20]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000d94 	.word	0x20000d94
 8006d88:	20000d74 	.word	0x20000d74
 8006d8c:	2000089c 	.word	0x2000089c
 8006d90:	20000d2c 	.word	0x20000d2c
 8006d94:	20000898 	.word	0x20000898
 8006d98:	20000d80 	.word	0x20000d80

08006d9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006da4:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <vTaskInternalSetTimeOutState+0x24>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <vTaskInternalSetTimeOutState+0x28>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	605a      	str	r2, [r3, #4]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20000d84 	.word	0x20000d84
 8006dc4:	20000d70 	.word	0x20000d70

08006dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	613b      	str	r3, [r7, #16]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e0e:	f000 fe8b 	bl	8007b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e12:	4b1d      	ldr	r3, [pc, #116]	@ (8006e88 <xTaskCheckForTimeOut+0xc0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e2a:	d102      	bne.n	8006e32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e023      	b.n	8006e7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b15      	ldr	r3, [pc, #84]	@ (8006e8c <xTaskCheckForTimeOut+0xc4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d007      	beq.n	8006e4e <xTaskCheckForTimeOut+0x86>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e015      	b.n	8006e7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d20b      	bcs.n	8006e70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff99 	bl	8006d9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e004      	b.n	8006e7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f000 fe87 	bl	8007b8c <vPortExitCritical>

	return xReturn;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000d70 	.word	0x20000d70
 8006e8c:	20000d84 	.word	0x20000d84

08006e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e94:	4b03      	ldr	r3, [pc, #12]	@ (8006ea4 <vTaskMissedYield+0x14>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000d80 	.word	0x20000d80

08006ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006eb0:	f000 f852 	bl	8006f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <prvIdleTask+0x28>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d9f9      	bls.n	8006eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <prvIdleTask+0x2c>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ecc:	e7f0      	b.n	8006eb0 <prvIdleTask+0x8>
 8006ece:	bf00      	nop
 8006ed0:	2000089c 	.word	0x2000089c
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e00c      	b.n	8006efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a12      	ldr	r2, [pc, #72]	@ (8006f38 <prvInitialiseTaskLists+0x60>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fc9a 	bl	800582c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3301      	adds	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b37      	cmp	r3, #55	@ 0x37
 8006f02:	d9ef      	bls.n	8006ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f04:	480d      	ldr	r0, [pc, #52]	@ (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f06:	f7fe fc91 	bl	800582c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f0a:	480d      	ldr	r0, [pc, #52]	@ (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f0c:	f7fe fc8e 	bl	800582c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f10:	480c      	ldr	r0, [pc, #48]	@ (8006f44 <prvInitialiseTaskLists+0x6c>)
 8006f12:	f7fe fc8b 	bl	800582c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f16:	480c      	ldr	r0, [pc, #48]	@ (8006f48 <prvInitialiseTaskLists+0x70>)
 8006f18:	f7fe fc88 	bl	800582c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f1c:	480b      	ldr	r0, [pc, #44]	@ (8006f4c <prvInitialiseTaskLists+0x74>)
 8006f1e:	f7fe fc85 	bl	800582c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <prvInitialiseTaskLists+0x78>)
 8006f24:	4a05      	ldr	r2, [pc, #20]	@ (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <prvInitialiseTaskLists+0x7c>)
 8006f2a:	4a05      	ldr	r2, [pc, #20]	@ (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000089c 	.word	0x2000089c
 8006f3c:	20000cfc 	.word	0x20000cfc
 8006f40:	20000d10 	.word	0x20000d10
 8006f44:	20000d2c 	.word	0x20000d2c
 8006f48:	20000d40 	.word	0x20000d40
 8006f4c:	20000d58 	.word	0x20000d58
 8006f50:	20000d24 	.word	0x20000d24
 8006f54:	20000d28 	.word	0x20000d28

08006f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5e:	e019      	b.n	8006f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f60:	f000 fde2 	bl	8007b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <prvCheckTasksWaitingTermination+0x50>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fce5 	bl	8005940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f8a:	f000 fdff 	bl	8007b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f810 	bl	8006fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f94:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e1      	bne.n	8006f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000d40 	.word	0x20000d40
 8006fac:	20000d6c 	.word	0x20000d6c
 8006fb0:	20000d54 	.word	0x20000d54

08006fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d108      	bne.n	8006fd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 ff9c 	bl	8007f08 <vPortFree>
				vPortFree( pxTCB );
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 ff99 	bl	8007f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fd6:	e019      	b.n	800700c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d103      	bne.n	8006fea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 ff90 	bl	8007f08 <vPortFree>
	}
 8006fe8:	e010      	b.n	800700c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d00b      	beq.n	800700c <prvDeleteTCB+0x58>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <prvDeleteTCB+0x54>
	}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800701a:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <prvResetNextTaskUnblockTime+0x38>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007024:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 8007026:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800702a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800702c:	e008      	b.n	8007040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702e:	4b07      	ldr	r3, [pc, #28]	@ (800704c <prvResetNextTaskUnblockTime+0x38>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a04      	ldr	r2, [pc, #16]	@ (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000d24 	.word	0x20000d24
 8007050:	20000d8c 	.word	0x20000d8c

08007054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <xTaskGetSchedulerState+0x34>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007062:	2301      	movs	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	e008      	b.n	800707a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007068:	4b08      	ldr	r3, [pc, #32]	@ (800708c <xTaskGetSchedulerState+0x38>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007070:	2302      	movs	r3, #2
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e001      	b.n	800707a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800707a:	687b      	ldr	r3, [r7, #4]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	20000d78 	.word	0x20000d78
 800708c:	20000d94 	.word	0x20000d94

08007090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d058      	beq.n	8007158 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007164 <xTaskPriorityDisinherit+0xd4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d00b      	beq.n	80070c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	e7fd      	b.n	80070c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60bb      	str	r3, [r7, #8]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ec:	1e5a      	subs	r2, r3, #1
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d02c      	beq.n	8007158 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007102:	2b00      	cmp	r3, #0
 8007104:	d128      	bne.n	8007158 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3304      	adds	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fc18 	bl	8005940 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007128:	4b0f      	ldr	r3, [pc, #60]	@ (8007168 <xTaskPriorityDisinherit+0xd8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d903      	bls.n	8007138 <xTaskPriorityDisinherit+0xa8>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	4a0c      	ldr	r2, [pc, #48]	@ (8007168 <xTaskPriorityDisinherit+0xd8>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4a09      	ldr	r2, [pc, #36]	@ (800716c <xTaskPriorityDisinherit+0xdc>)
 8007146:	441a      	add	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fe fb99 	bl	8005886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007158:	697b      	ldr	r3, [r7, #20]
	}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000898 	.word	0x20000898
 8007168:	20000d74 	.word	0x20000d74
 800716c:	2000089c 	.word	0x2000089c

08007170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800717a:	4b21      	ldr	r3, [pc, #132]	@ (8007200 <prvAddCurrentTaskToDelayedList+0x90>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007180:	4b20      	ldr	r3, [pc, #128]	@ (8007204 <prvAddCurrentTaskToDelayedList+0x94>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fbda 	bl	8005940 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007192:	d10a      	bne.n	80071aa <prvAddCurrentTaskToDelayedList+0x3a>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800719a:	4b1a      	ldr	r3, [pc, #104]	@ (8007204 <prvAddCurrentTaskToDelayedList+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4819      	ldr	r0, [pc, #100]	@ (8007208 <prvAddCurrentTaskToDelayedList+0x98>)
 80071a4:	f7fe fb6f 	bl	8005886 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071a8:	e026      	b.n	80071f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071b2:	4b14      	ldr	r3, [pc, #80]	@ (8007204 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d209      	bcs.n	80071d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c2:	4b12      	ldr	r3, [pc, #72]	@ (800720c <prvAddCurrentTaskToDelayedList+0x9c>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007204 <prvAddCurrentTaskToDelayedList+0x94>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f7fe fb7d 	bl	80058ce <vListInsert>
}
 80071d4:	e010      	b.n	80071f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <prvAddCurrentTaskToDelayedList+0x94>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7fe fb73 	bl	80058ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d202      	bcs.n	80071f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071f2:	4a08      	ldr	r2, [pc, #32]	@ (8007214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000d70 	.word	0x20000d70
 8007204:	20000898 	.word	0x20000898
 8007208:	20000d58 	.word	0x20000d58
 800720c:	20000d28 	.word	0x20000d28
 8007210:	20000d24 	.word	0x20000d24
 8007214:	20000d8c 	.word	0x20000d8c

08007218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007222:	f000 fb13 	bl	800784c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007226:	4b1d      	ldr	r3, [pc, #116]	@ (800729c <xTimerCreateTimerTask+0x84>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d021      	beq.n	8007272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007236:	1d3a      	adds	r2, r7, #4
 8007238:	f107 0108 	add.w	r1, r7, #8
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fad9 	bl	80057f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	9202      	str	r2, [sp, #8]
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	2302      	movs	r3, #2
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	460a      	mov	r2, r1
 8007258:	4911      	ldr	r1, [pc, #68]	@ (80072a0 <xTimerCreateTimerTask+0x88>)
 800725a:	4812      	ldr	r0, [pc, #72]	@ (80072a4 <xTimerCreateTimerTask+0x8c>)
 800725c:	f7ff f8d0 	bl	8006400 <xTaskCreateStatic>
 8007260:	4603      	mov	r3, r0
 8007262:	4a11      	ldr	r2, [pc, #68]	@ (80072a8 <xTimerCreateTimerTask+0x90>)
 8007264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007266:	4b10      	ldr	r3, [pc, #64]	@ (80072a8 <xTimerCreateTimerTask+0x90>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800726e:	2301      	movs	r3, #1
 8007270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	613b      	str	r3, [r7, #16]
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007290:	697b      	ldr	r3, [r7, #20]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000dc8 	.word	0x20000dc8
 80072a0:	08009308 	.word	0x08009308
 80072a4:	080073e5 	.word	0x080073e5
 80072a8:	20000dcc 	.word	0x20000dcc

080072ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	@ 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10b      	bne.n	80072dc <xTimerGenericCommand+0x30>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <xTimerGenericCommand+0x98>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02a      	beq.n	800733a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	dc18      	bgt.n	8007328 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072f6:	f7ff fead 	bl	8007054 <xTaskGetSchedulerState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d109      	bne.n	8007314 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007300:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <xTimerGenericCommand+0x98>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	f107 0110 	add.w	r1, r7, #16
 8007308:	2300      	movs	r3, #0
 800730a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730c:	f7fe fc88 	bl	8005c20 <xQueueGenericSend>
 8007310:	6278      	str	r0, [r7, #36]	@ 0x24
 8007312:	e012      	b.n	800733a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007314:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <xTimerGenericCommand+0x98>)
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	f107 0110 	add.w	r1, r7, #16
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	f7fe fc7e 	bl	8005c20 <xQueueGenericSend>
 8007324:	6278      	str	r0, [r7, #36]	@ 0x24
 8007326:	e008      	b.n	800733a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007328:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <xTimerGenericCommand+0x98>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	f107 0110 	add.w	r1, r7, #16
 8007330:	2300      	movs	r3, #0
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	f7fe fd76 	bl	8005e24 <xQueueGenericSendFromISR>
 8007338:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800733c:	4618      	mov	r0, r3
 800733e:	3728      	adds	r7, #40	@ 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000dc8 	.word	0x20000dc8

08007348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b23      	ldr	r3, [pc, #140]	@ (80073e0 <prvProcessExpiredTimer+0x98>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe faed 	bl	8005940 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d023      	beq.n	80073bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	18d1      	adds	r1, r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f000 f8d5 	bl	8007530 <prvInsertTimerInActiveList>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d020      	beq.n	80073ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800738c:	2300      	movs	r3, #0
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	2100      	movs	r1, #0
 8007396:	6978      	ldr	r0, [r7, #20]
 8007398:	f7ff ff88 	bl	80072ac <xTimerGenericCommand>
 800739c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d114      	bne.n	80073ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60fb      	str	r3, [r7, #12]
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	e7fd      	b.n	80073b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	6978      	ldr	r0, [r7, #20]
 80073d4:	4798      	blx	r3
}
 80073d6:	bf00      	nop
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000dc0 	.word	0x20000dc0

080073e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073ec:	f107 0308 	add.w	r3, r7, #8
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f859 	bl	80074a8 <prvGetNextExpireTime>
 80073f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4619      	mov	r1, r3
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f805 	bl	800740c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007402:	f000 f8d7 	bl	80075b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007406:	bf00      	nop
 8007408:	e7f0      	b.n	80073ec <prvTimerTask+0x8>
	...

0800740c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007416:	f7ff fa37 	bl	8006888 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f866 	bl	80074f0 <prvSampleTimeNow>
 8007424:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d130      	bne.n	800748e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <prvProcessTimerOrBlockTask+0x3c>
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	429a      	cmp	r2, r3
 8007438:	d806      	bhi.n	8007448 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800743a:	f7ff fa33 	bl	80068a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff ff81 	bl	8007348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007446:	e024      	b.n	8007492 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d008      	beq.n	8007460 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800744e:	4b13      	ldr	r3, [pc, #76]	@ (800749c <prvProcessTimerOrBlockTask+0x90>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <prvProcessTimerOrBlockTask+0x50>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <prvProcessTimerOrBlockTask+0x52>
 800745c:	2300      	movs	r3, #0
 800745e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007460:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <prvProcessTimerOrBlockTask+0x94>)
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	f7fe ff93 	bl	8006398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007472:	f7ff fa17 	bl	80068a4 <xTaskResumeAll>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800747c:	4b09      	ldr	r3, [pc, #36]	@ (80074a4 <prvProcessTimerOrBlockTask+0x98>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
}
 800748c:	e001      	b.n	8007492 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800748e:	f7ff fa09 	bl	80068a4 <xTaskResumeAll>
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000dc4 	.word	0x20000dc4
 80074a0:	20000dc8 	.word	0x20000dc8
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074b0:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <prvGetNextExpireTime+0x44>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <prvGetNextExpireTime+0x16>
 80074ba:	2201      	movs	r2, #1
 80074bc:	e000      	b.n	80074c0 <prvGetNextExpireTime+0x18>
 80074be:	2200      	movs	r2, #0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <prvGetNextExpireTime+0x44>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e001      	b.n	80074dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000dc0 	.word	0x20000dc0

080074f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074f8:	f7ff fa72 	bl	80069e0 <xTaskGetTickCount>
 80074fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074fe:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <prvSampleTimeNow+0x3c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	429a      	cmp	r2, r3
 8007506:	d205      	bcs.n	8007514 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007508:	f000 f93a 	bl	8007780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e002      	b.n	800751a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800751a:	4a04      	ldr	r2, [pc, #16]	@ (800752c <prvSampleTimeNow+0x3c>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007520:	68fb      	ldr	r3, [r7, #12]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000dd0 	.word	0x20000dd0

08007530 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d812      	bhi.n	800757c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	d302      	bcc.n	800756a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	e01b      	b.n	80075a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800756a:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <prvInsertTimerInActiveList+0x7c>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7fe f9aa 	bl	80058ce <vListInsert>
 800757a:	e012      	b.n	80075a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d206      	bcs.n	8007592 <prvInsertTimerInActiveList+0x62>
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d302      	bcc.n	8007592 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800758c:	2301      	movs	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e007      	b.n	80075a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <prvInsertTimerInActiveList+0x80>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f7fe f996 	bl	80058ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075a2:	697b      	ldr	r3, [r7, #20]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000dc4 	.word	0x20000dc4
 80075b0:	20000dc0 	.word	0x20000dc0

080075b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08e      	sub	sp, #56	@ 0x38
 80075b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ba:	e0ce      	b.n	800775a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da19      	bge.n	80075f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	3304      	adds	r3, #4
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	61fb      	str	r3, [r7, #28]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ec:	6850      	ldr	r0, [r2, #4]
 80075ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075f0:	6892      	ldr	r2, [r2, #8]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f2c0 80ae 	blt.w	800775a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe f996 	bl	8005940 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007614:	463b      	mov	r3, r7
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff ff6a 	bl	80074f0 <prvSampleTimeNow>
 800761c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b09      	cmp	r3, #9
 8007622:	f200 8097 	bhi.w	8007754 <prvProcessReceivedCommands+0x1a0>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <prvProcessReceivedCommands+0x78>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	08007655 	.word	0x08007655
 8007630:	08007655 	.word	0x08007655
 8007634:	08007655 	.word	0x08007655
 8007638:	080076cb 	.word	0x080076cb
 800763c:	080076df 	.word	0x080076df
 8007640:	0800772b 	.word	0x0800772b
 8007644:	08007655 	.word	0x08007655
 8007648:	08007655 	.word	0x08007655
 800764c:	080076cb 	.word	0x080076cb
 8007650:	080076df 	.word	0x080076df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	18d1      	adds	r1, r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007674:	f7ff ff5c 	bl	8007530 <prvInsertTimerInActiveList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d06c      	beq.n	8007758 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d061      	beq.n	8007758 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	441a      	add	r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076a6:	f7ff fe01 	bl	80072ac <xTimerGenericCommand>
 80076aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d152      	bne.n	8007758 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	61bb      	str	r3, [r7, #24]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076dc:	e03d      	b.n	800775a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	617b      	str	r3, [r7, #20]
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	e7fd      	b.n	8007712 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	18d1      	adds	r1, r2, r3
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007724:	f7ff ff04 	bl	8007530 <prvInsertTimerInActiveList>
					break;
 8007728:	e017      	b.n	800775a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800773a:	f000 fbe5 	bl	8007f08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800773e:	e00c      	b.n	800775a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007752:	e002      	b.n	800775a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <prvProcessReceivedCommands+0x1a6>
					break;
 8007758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800775a:	4b08      	ldr	r3, [pc, #32]	@ (800777c <prvProcessReceivedCommands+0x1c8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1d39      	adds	r1, r7, #4
 8007760:	2200      	movs	r2, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fbfc 	bl	8005f60 <xQueueReceive>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f47f af26 	bne.w	80075bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	3730      	adds	r7, #48	@ 0x30
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000dc8 	.word	0x20000dc8

08007780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007786:	e049      	b.n	800781c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007788:	4b2e      	ldr	r3, [pc, #184]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007792:	4b2c      	ldr	r3, [pc, #176]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe f8cd 	bl	8005940 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02f      	beq.n	800781c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d90e      	bls.n	80077ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077da:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	f7fe f872 	bl	80058ce <vListInsert>
 80077ea:	e017      	b.n	800781c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077ec:	2300      	movs	r3, #0
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	2300      	movs	r3, #0
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fd58 	bl	80072ac <xTimerGenericCommand>
 80077fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10b      	bne.n	800781c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	603b      	str	r3, [r7, #0]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800781c:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1b0      	bne.n	8007788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <prvSwitchTimerLists+0xc8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a04      	ldr	r2, [pc, #16]	@ (8007844 <prvSwitchTimerLists+0xc4>)
 8007832:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007834:	4a04      	ldr	r2, [pc, #16]	@ (8007848 <prvSwitchTimerLists+0xc8>)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6013      	str	r3, [r2, #0]
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000dc0 	.word	0x20000dc0
 8007848:	20000dc4 	.word	0x20000dc4

0800784c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007852:	f000 f969 	bl	8007b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007856:	4b15      	ldr	r3, [pc, #84]	@ (80078ac <prvCheckForValidListAndQueue+0x60>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d120      	bne.n	80078a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800785e:	4814      	ldr	r0, [pc, #80]	@ (80078b0 <prvCheckForValidListAndQueue+0x64>)
 8007860:	f7fd ffe4 	bl	800582c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007864:	4813      	ldr	r0, [pc, #76]	@ (80078b4 <prvCheckForValidListAndQueue+0x68>)
 8007866:	f7fd ffe1 	bl	800582c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800786a:	4b13      	ldr	r3, [pc, #76]	@ (80078b8 <prvCheckForValidListAndQueue+0x6c>)
 800786c:	4a10      	ldr	r2, [pc, #64]	@ (80078b0 <prvCheckForValidListAndQueue+0x64>)
 800786e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007870:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <prvCheckForValidListAndQueue+0x70>)
 8007872:	4a10      	ldr	r2, [pc, #64]	@ (80078b4 <prvCheckForValidListAndQueue+0x68>)
 8007874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007876:	2300      	movs	r3, #0
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4b11      	ldr	r3, [pc, #68]	@ (80078c0 <prvCheckForValidListAndQueue+0x74>)
 800787c:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <prvCheckForValidListAndQueue+0x78>)
 800787e:	2110      	movs	r1, #16
 8007880:	200a      	movs	r0, #10
 8007882:	f7fe f8f1 	bl	8005a68 <xQueueGenericCreateStatic>
 8007886:	4603      	mov	r3, r0
 8007888:	4a08      	ldr	r2, [pc, #32]	@ (80078ac <prvCheckForValidListAndQueue+0x60>)
 800788a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <prvCheckForValidListAndQueue+0x60>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <prvCheckForValidListAndQueue+0x60>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	490b      	ldr	r1, [pc, #44]	@ (80078c8 <prvCheckForValidListAndQueue+0x7c>)
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd52 	bl	8006344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a0:	f000 f974 	bl	8007b8c <vPortExitCritical>
}
 80078a4:	bf00      	nop
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000dc8 	.word	0x20000dc8
 80078b0:	20000d98 	.word	0x20000d98
 80078b4:	20000dac 	.word	0x20000dac
 80078b8:	20000dc0 	.word	0x20000dc0
 80078bc:	20000dc4 	.word	0x20000dc4
 80078c0:	20000e74 	.word	0x20000e74
 80078c4:	20000dd4 	.word	0x20000dd4
 80078c8:	08009310 	.word	0x08009310

080078cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3b04      	subs	r3, #4
 80078dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3b04      	subs	r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0201 	bic.w	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3b04      	subs	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007930 <pxPortInitialiseStack+0x64>)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b14      	subs	r3, #20
 8007906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b04      	subs	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f06f 0202 	mvn.w	r2, #2
 800791a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3b20      	subs	r3, #32
 8007920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	08007935 	.word	0x08007935

08007934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800793e:	4b13      	ldr	r3, [pc, #76]	@ (800798c <prvTaskExitError+0x58>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007946:	d00b      	beq.n	8007960 <prvTaskExitError+0x2c>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	60fb      	str	r3, [r7, #12]
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <prvTaskExitError+0x28>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60bb      	str	r3, [r7, #8]
}
 8007972:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007974:	bf00      	nop
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0fc      	beq.n	8007976 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	2000000c 	.word	0x2000000c

08007990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007990:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <pxCurrentTCBConst2>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f380 8809 	msr	PSP, r0
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	4770      	bx	lr
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst2>:
 80079b0:	20000898 	.word	0x20000898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079b8:	4808      	ldr	r0, [pc, #32]	@ (80079dc <prvPortStartFirstTask+0x24>)
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	6800      	ldr	r0, [r0, #0]
 80079be:	f380 8808 	msr	MSP, r0
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8814 	msr	CONTROL, r0
 80079ca:	b662      	cpsie	i
 80079cc:	b661      	cpsie	f
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	df00      	svc	0
 80079d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079da:	bf00      	nop
 80079dc:	e000ed08 	.word	0xe000ed08

080079e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079e6:	4b47      	ldr	r3, [pc, #284]	@ (8007b04 <xPortStartScheduler+0x124>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a47      	ldr	r2, [pc, #284]	@ (8007b08 <xPortStartScheduler+0x128>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10b      	bne.n	8007a08 <xPortStartScheduler+0x28>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a08:	4b3e      	ldr	r3, [pc, #248]	@ (8007b04 <xPortStartScheduler+0x124>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b0c <xPortStartScheduler+0x12c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10b      	bne.n	8007a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a2a:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <xPortStartScheduler+0x130>)
 8007a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	22ff      	movs	r2, #255	@ 0xff
 8007a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	4b31      	ldr	r3, [pc, #196]	@ (8007b14 <xPortStartScheduler+0x134>)
 8007a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a52:	4b31      	ldr	r3, [pc, #196]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007a54:	2207      	movs	r2, #7
 8007a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a58:	e009      	b.n	8007a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	4a2d      	ldr	r2, [pc, #180]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a76:	2b80      	cmp	r3, #128	@ 0x80
 8007a78:	d0ef      	beq.n	8007a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a7a:	4b27      	ldr	r3, [pc, #156]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1c3 0307 	rsb	r3, r3, #7
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d00b      	beq.n	8007a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60bb      	str	r3, [r7, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ab0:	4a19      	ldr	r2, [pc, #100]	@ (8007b18 <xPortStartScheduler+0x138>)
 8007ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007abc:	4b17      	ldr	r3, [pc, #92]	@ (8007b1c <xPortStartScheduler+0x13c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a16      	ldr	r2, [pc, #88]	@ (8007b1c <xPortStartScheduler+0x13c>)
 8007ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ac8:	4b14      	ldr	r3, [pc, #80]	@ (8007b1c <xPortStartScheduler+0x13c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a13      	ldr	r2, [pc, #76]	@ (8007b1c <xPortStartScheduler+0x13c>)
 8007ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ad4:	f000 f8da 	bl	8007c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ad8:	4b11      	ldr	r3, [pc, #68]	@ (8007b20 <xPortStartScheduler+0x140>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ade:	f000 f8f9 	bl	8007cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ae2:	4b10      	ldr	r3, [pc, #64]	@ (8007b24 <xPortStartScheduler+0x144>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8007b24 <xPortStartScheduler+0x144>)
 8007ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007aee:	f7ff ff63 	bl	80079b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007af2:	f7ff f83f 	bl	8006b74 <vTaskSwitchContext>
	prvTaskExitError();
 8007af6:	f7ff ff1d 	bl	8007934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	e000ed00 	.word	0xe000ed00
 8007b08:	410fc271 	.word	0x410fc271
 8007b0c:	410fc270 	.word	0x410fc270
 8007b10:	e000e400 	.word	0xe000e400
 8007b14:	20000ec4 	.word	0x20000ec4
 8007b18:	20000ec8 	.word	0x20000ec8
 8007b1c:	e000ed20 	.word	0xe000ed20
 8007b20:	2000000c 	.word	0x2000000c
 8007b24:	e000ef34 	.word	0xe000ef34

08007b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b42:	4b10      	ldr	r3, [pc, #64]	@ (8007b84 <vPortEnterCritical+0x5c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a0e      	ldr	r2, [pc, #56]	@ (8007b84 <vPortEnterCritical+0x5c>)
 8007b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b84 <vPortEnterCritical+0x5c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d110      	bne.n	8007b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b54:	4b0c      	ldr	r3, [pc, #48]	@ (8007b88 <vPortEnterCritical+0x60>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00b      	beq.n	8007b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	603b      	str	r3, [r7, #0]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <vPortEnterCritical+0x4a>
	}
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	2000000c 	.word	0x2000000c
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b92:	4b12      	ldr	r3, [pc, #72]	@ (8007bdc <vPortExitCritical+0x50>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10b      	bne.n	8007bb2 <vPortExitCritical+0x26>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	607b      	str	r3, [r7, #4]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <vPortExitCritical+0x50>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4a08      	ldr	r2, [pc, #32]	@ (8007bdc <vPortExitCritical+0x50>)
 8007bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bbc:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <vPortExitCritical+0x50>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <vPortExitCritical+0x44>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	2000000c 	.word	0x2000000c

08007be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007be0:	f3ef 8009 	mrs	r0, PSP
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4b15      	ldr	r3, [pc, #84]	@ (8007c40 <pxCurrentTCBConst>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f01e 0f10 	tst.w	lr, #16
 8007bf0:	bf08      	it	eq
 8007bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c04:	f380 8811 	msr	BASEPRI, r0
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f7fe ffb0 	bl	8006b74 <vTaskSwitchContext>
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	f380 8811 	msr	BASEPRI, r0
 8007c1c:	bc09      	pop	{r0, r3}
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	6808      	ldr	r0, [r1, #0]
 8007c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c26:	f01e 0f10 	tst.w	lr, #16
 8007c2a:	bf08      	it	eq
 8007c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c30:	f380 8809 	msr	PSP, r0
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst>:
 8007c40:	20000898 	.word	0x20000898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f7fe fecd 	bl	8006a00 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <xPortSysTickHandler+0x40>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
}
 8007c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c96:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc4 <vPortSetupTimerInterrupt+0x38>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc8 <vPortSetupTimerInterrupt+0x3c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ccc <vPortSetupTimerInterrupt+0x40>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	4a09      	ldr	r2, [pc, #36]	@ (8007cd0 <vPortSetupTimerInterrupt+0x44>)
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010
 8007cc4:	e000e018 	.word	0xe000e018
 8007cc8:	20000000 	.word	0x20000000
 8007ccc:	10624dd3 	.word	0x10624dd3
 8007cd0:	e000e014 	.word	0xe000e014

08007cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ce4 <vPortEnableVFP+0x10>
 8007cd8:	6801      	ldr	r1, [r0, #0]
 8007cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007cde:	6001      	str	r1, [r0, #0]
 8007ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ce2:	bf00      	nop
 8007ce4:	e000ed88 	.word	0xe000ed88

08007ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cee:	f3ef 8305 	mrs	r3, IPSR
 8007cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d915      	bls.n	8007d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cfa:	4a18      	ldr	r2, [pc, #96]	@ (8007d5c <vPortValidateInterruptPriority+0x74>)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d04:	4b16      	ldr	r3, [pc, #88]	@ (8007d60 <vPortValidateInterruptPriority+0x78>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	7afa      	ldrb	r2, [r7, #11]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d20b      	bcs.n	8007d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d26:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <vPortValidateInterruptPriority+0x7c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d68 <vPortValidateInterruptPriority+0x80>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d90b      	bls.n	8007d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	603b      	str	r3, [r7, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortValidateInterruptPriority+0x62>
	}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	e000e3f0 	.word	0xe000e3f0
 8007d60:	20000ec4 	.word	0x20000ec4
 8007d64:	e000ed0c 	.word	0xe000ed0c
 8007d68:	20000ec8 	.word	0x20000ec8

08007d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	@ 0x28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d78:	f7fe fd86 	bl	8006888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ef0 <pvPortMalloc+0x184>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d84:	f000 f924 	bl	8007fd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d88:	4b5a      	ldr	r3, [pc, #360]	@ (8007ef4 <pvPortMalloc+0x188>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 8095 	bne.w	8007ec0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01e      	beq.n	8007dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4413      	add	r3, r2
 8007da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d015      	beq.n	8007dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <pvPortMalloc+0x6e>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	617b      	str	r3, [r7, #20]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d06f      	beq.n	8007ec0 <pvPortMalloc+0x154>
 8007de0:	4b45      	ldr	r3, [pc, #276]	@ (8007ef8 <pvPortMalloc+0x18c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d86a      	bhi.n	8007ec0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dea:	4b44      	ldr	r3, [pc, #272]	@ (8007efc <pvPortMalloc+0x190>)
 8007dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dee:	4b43      	ldr	r3, [pc, #268]	@ (8007efc <pvPortMalloc+0x190>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007df4:	e004      	b.n	8007e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d903      	bls.n	8007e12 <pvPortMalloc+0xa6>
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f1      	bne.n	8007df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e12:	4b37      	ldr	r3, [pc, #220]	@ (8007ef0 <pvPortMalloc+0x184>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d051      	beq.n	8007ec0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2208      	movs	r2, #8
 8007e22:	4413      	add	r3, r2
 8007e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	1ad2      	subs	r2, r2, r3
 8007e36:	2308      	movs	r3, #8
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d920      	bls.n	8007e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <pvPortMalloc+0xfc>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e7a:	69b8      	ldr	r0, [r7, #24]
 8007e7c:	f000 f90a 	bl	8008094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e80:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef8 <pvPortMalloc+0x18c>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef8 <pvPortMalloc+0x18c>)
 8007e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef8 <pvPortMalloc+0x18c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b1b      	ldr	r3, [pc, #108]	@ (8007f00 <pvPortMalloc+0x194>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d203      	bcs.n	8007ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ef8 <pvPortMalloc+0x18c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a18      	ldr	r2, [pc, #96]	@ (8007f00 <pvPortMalloc+0x194>)
 8007ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <pvPortMalloc+0x188>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007eb6:	4b13      	ldr	r3, [pc, #76]	@ (8007f04 <pvPortMalloc+0x198>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	4a11      	ldr	r2, [pc, #68]	@ (8007f04 <pvPortMalloc+0x198>)
 8007ebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ec0:	f7fe fcf0 	bl	80068a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <pvPortMalloc+0x17a>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3728      	adds	r7, #40	@ 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20004ad4 	.word	0x20004ad4
 8007ef4:	20004ae8 	.word	0x20004ae8
 8007ef8:	20004ad8 	.word	0x20004ad8
 8007efc:	20004acc 	.word	0x20004acc
 8007f00:	20004adc 	.word	0x20004adc
 8007f04:	20004ae0 	.word	0x20004ae0

08007f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d04f      	beq.n	8007fba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	4b25      	ldr	r3, [pc, #148]	@ (8007fc4 <vPortFree+0xbc>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10b      	bne.n	8007f4e <vPortFree+0x46>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	60fb      	str	r3, [r7, #12]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00b      	beq.n	8007f6e <vPortFree+0x66>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <vPortFree+0xbc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01e      	beq.n	8007fba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d11a      	bne.n	8007fba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc4 <vPortFree+0xbc>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	401a      	ands	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f94:	f7fe fc78 	bl	8006888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <vPortFree+0xc0>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	4a09      	ldr	r2, [pc, #36]	@ (8007fc8 <vPortFree+0xc0>)
 8007fa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f000 f874 	bl	8008094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fac:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <vPortFree+0xc4>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	4a06      	ldr	r2, [pc, #24]	@ (8007fcc <vPortFree+0xc4>)
 8007fb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fb6:	f7fe fc75 	bl	80068a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fba:	bf00      	nop
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20004ae8 	.word	0x20004ae8
 8007fc8:	20004ad8 	.word	0x20004ad8
 8007fcc:	20004ae4 	.word	0x20004ae4

08007fd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007fda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fdc:	4b27      	ldr	r3, [pc, #156]	@ (800807c <prvHeapInit+0xac>)
 8007fde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00c      	beq.n	8008004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3307      	adds	r3, #7
 8007fee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0307 	bic.w	r3, r3, #7
 8007ff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800807c <prvHeapInit+0xac>)
 8008000:	4413      	add	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008008:	4a1d      	ldr	r2, [pc, #116]	@ (8008080 <prvHeapInit+0xb0>)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800800e:	4b1c      	ldr	r3, [pc, #112]	@ (8008080 <prvHeapInit+0xb0>)
 8008010:	2200      	movs	r2, #0
 8008012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800801c:	2208      	movs	r2, #8
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <prvHeapInit+0xb4>)
 8008030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <prvHeapInit+0xb4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2200      	movs	r2, #0
 8008038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800803a:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <prvHeapInit+0xb4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008050:	4b0c      	ldr	r3, [pc, #48]	@ (8008084 <prvHeapInit+0xb4>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	4a0a      	ldr	r2, [pc, #40]	@ (8008088 <prvHeapInit+0xb8>)
 800805e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	4a09      	ldr	r2, [pc, #36]	@ (800808c <prvHeapInit+0xbc>)
 8008066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008068:	4b09      	ldr	r3, [pc, #36]	@ (8008090 <prvHeapInit+0xc0>)
 800806a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	bf00      	nop
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000ecc 	.word	0x20000ecc
 8008080:	20004acc 	.word	0x20004acc
 8008084:	20004ad4 	.word	0x20004ad4
 8008088:	20004adc 	.word	0x20004adc
 800808c:	20004ad8 	.word	0x20004ad8
 8008090:	20004ae8 	.word	0x20004ae8

08008094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800809c:	4b28      	ldr	r3, [pc, #160]	@ (8008140 <prvInsertBlockIntoFreeList+0xac>)
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e002      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x14>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d8f7      	bhi.n	80080a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4413      	add	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d108      	bne.n	80080d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d118      	bne.n	800811c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b15      	ldr	r3, [pc, #84]	@ (8008144 <prvInsertBlockIntoFreeList+0xb0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d00d      	beq.n	8008112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	441a      	add	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	e008      	b.n	8008124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008112:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <prvInsertBlockIntoFreeList+0xb0>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	e003      	b.n	8008124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	429a      	cmp	r2, r3
 800812a:	d002      	beq.n	8008132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20004acc 	.word	0x20004acc
 8008144:	20004ad4 	.word	0x20004ad4

08008148 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd f9d3 	bl	8005502 <USBH_LL_IncTimer>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fa17 	bl	80055a6 <USBH_LL_Connect>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fa2c 	bl	80055ec <USBH_LL_Disconnect>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	4613      	mov	r3, r2
 80081aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fd fa4c 	bl	8005650 <USBH_LL_NotifyURBChange>
#endif
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fd f9c1 	bl	8005556 <USBH_LL_PortEnabled>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fd f9cd 	bl	800558a <USBH_LL_PortDisabled>
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800820e:	4618      	mov	r0, r3
 8008210:	f7f9 fd67 	bl	8001ce2 <HAL_HCD_Stop>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f808 	bl	8008230 <USBH_Get_USB_Status>
 8008220:	4603      	mov	r3, r0
 8008222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008224:	7bbb      	ldrb	r3, [r7, #14]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d817      	bhi.n	8008274 <USBH_Get_USB_Status+0x44>
 8008244:	a201      	add	r2, pc, #4	@ (adr r2, 800824c <USBH_Get_USB_Status+0x1c>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	0800825d 	.word	0x0800825d
 8008250:	08008263 	.word	0x08008263
 8008254:	08008269 	.word	0x08008269
 8008258:	0800826f 	.word	0x0800826f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
    break;
 8008260:	e00b      	b.n	800827a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008262:	2302      	movs	r3, #2
 8008264:	73fb      	strb	r3, [r7, #15]
    break;
 8008266:	e008      	b.n	800827a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
    break;
 800826c:	e005      	b.n	800827a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800826e:	2302      	movs	r3, #2
 8008270:	73fb      	strb	r3, [r7, #15]
    break;
 8008272:	e002      	b.n	800827a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008274:	2302      	movs	r3, #2
 8008276:	73fb      	strb	r3, [r7, #15]
    break;
 8008278:	bf00      	nop
  }
  return usb_status;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <malloc>:
 8008288:	4b02      	ldr	r3, [pc, #8]	@ (8008294 <malloc+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f000 b825 	b.w	80082dc <_malloc_r>
 8008292:	bf00      	nop
 8008294:	2000001c 	.word	0x2000001c

08008298 <sbrk_aligned>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0f      	ldr	r6, [pc, #60]	@ (80082d8 <sbrk_aligned+0x40>)
 800829c:	460c      	mov	r4, r1
 800829e:	6831      	ldr	r1, [r6, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	b911      	cbnz	r1, 80082aa <sbrk_aligned+0x12>
 80082a4:	f000 fa54 	bl	8008750 <_sbrk_r>
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 fa4f 	bl	8008750 <_sbrk_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d103      	bne.n	80082be <sbrk_aligned+0x26>
 80082b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80082ba:	4620      	mov	r0, r4
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d0f8      	beq.n	80082ba <sbrk_aligned+0x22>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fa40 	bl	8008750 <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1f2      	bne.n	80082ba <sbrk_aligned+0x22>
 80082d4:	e7ef      	b.n	80082b6 <sbrk_aligned+0x1e>
 80082d6:	bf00      	nop
 80082d8:	20004ecc 	.word	0x20004ecc

080082dc <_malloc_r>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	1ccd      	adds	r5, r1, #3
 80082e2:	f025 0503 	bic.w	r5, r5, #3
 80082e6:	3508      	adds	r5, #8
 80082e8:	2d0c      	cmp	r5, #12
 80082ea:	bf38      	it	cc
 80082ec:	250c      	movcc	r5, #12
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	4606      	mov	r6, r0
 80082f2:	db01      	blt.n	80082f8 <_malloc_r+0x1c>
 80082f4:	42a9      	cmp	r1, r5
 80082f6:	d904      	bls.n	8008302 <_malloc_r+0x26>
 80082f8:	230c      	movs	r3, #12
 80082fa:	6033      	str	r3, [r6, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083d8 <_malloc_r+0xfc>
 8008306:	f000 f869 	bl	80083dc <__malloc_lock>
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	461c      	mov	r4, r3
 8008310:	bb44      	cbnz	r4, 8008364 <_malloc_r+0x88>
 8008312:	4629      	mov	r1, r5
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff ffbf 	bl	8008298 <sbrk_aligned>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	4604      	mov	r4, r0
 800831e:	d158      	bne.n	80083d2 <_malloc_r+0xf6>
 8008320:	f8d8 4000 	ldr.w	r4, [r8]
 8008324:	4627      	mov	r7, r4
 8008326:	2f00      	cmp	r7, #0
 8008328:	d143      	bne.n	80083b2 <_malloc_r+0xd6>
 800832a:	2c00      	cmp	r4, #0
 800832c:	d04b      	beq.n	80083c6 <_malloc_r+0xea>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	4639      	mov	r1, r7
 8008332:	4630      	mov	r0, r6
 8008334:	eb04 0903 	add.w	r9, r4, r3
 8008338:	f000 fa0a 	bl	8008750 <_sbrk_r>
 800833c:	4581      	cmp	r9, r0
 800833e:	d142      	bne.n	80083c6 <_malloc_r+0xea>
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	1a6d      	subs	r5, r5, r1
 8008344:	4629      	mov	r1, r5
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ffa6 	bl	8008298 <sbrk_aligned>
 800834c:	3001      	adds	r0, #1
 800834e:	d03a      	beq.n	80083c6 <_malloc_r+0xea>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	442b      	add	r3, r5
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	f8d8 3000 	ldr.w	r3, [r8]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	bb62      	cbnz	r2, 80083b8 <_malloc_r+0xdc>
 800835e:	f8c8 7000 	str.w	r7, [r8]
 8008362:	e00f      	b.n	8008384 <_malloc_r+0xa8>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	1b52      	subs	r2, r2, r5
 8008368:	d420      	bmi.n	80083ac <_malloc_r+0xd0>
 800836a:	2a0b      	cmp	r2, #11
 800836c:	d917      	bls.n	800839e <_malloc_r+0xc2>
 800836e:	1961      	adds	r1, r4, r5
 8008370:	42a3      	cmp	r3, r4
 8008372:	6025      	str	r5, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	6059      	strne	r1, [r3, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	bf08      	it	eq
 800837c:	f8c8 1000 	streq.w	r1, [r8]
 8008380:	5162      	str	r2, [r4, r5]
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f82f 	bl	80083e8 <__malloc_unlock>
 800838a:	f104 000b 	add.w	r0, r4, #11
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	f020 0007 	bic.w	r0, r0, #7
 8008394:	1ac2      	subs	r2, r0, r3
 8008396:	bf1c      	itt	ne
 8008398:	1a1b      	subne	r3, r3, r0
 800839a:	50a3      	strne	r3, [r4, r2]
 800839c:	e7af      	b.n	80082fe <_malloc_r+0x22>
 800839e:	6862      	ldr	r2, [r4, #4]
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	bf0c      	ite	eq
 80083a4:	f8c8 2000 	streq.w	r2, [r8]
 80083a8:	605a      	strne	r2, [r3, #4]
 80083aa:	e7eb      	b.n	8008384 <_malloc_r+0xa8>
 80083ac:	4623      	mov	r3, r4
 80083ae:	6864      	ldr	r4, [r4, #4]
 80083b0:	e7ae      	b.n	8008310 <_malloc_r+0x34>
 80083b2:	463c      	mov	r4, r7
 80083b4:	687f      	ldr	r7, [r7, #4]
 80083b6:	e7b6      	b.n	8008326 <_malloc_r+0x4a>
 80083b8:	461a      	mov	r2, r3
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d1fb      	bne.n	80083b8 <_malloc_r+0xdc>
 80083c0:	2300      	movs	r3, #0
 80083c2:	6053      	str	r3, [r2, #4]
 80083c4:	e7de      	b.n	8008384 <_malloc_r+0xa8>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 f80c 	bl	80083e8 <__malloc_unlock>
 80083d0:	e794      	b.n	80082fc <_malloc_r+0x20>
 80083d2:	6005      	str	r5, [r0, #0]
 80083d4:	e7d6      	b.n	8008384 <_malloc_r+0xa8>
 80083d6:	bf00      	nop
 80083d8:	20004ed0 	.word	0x20004ed0

080083dc <__malloc_lock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_lock+0x8>)
 80083de:	f000 ba04 	b.w	80087ea <__retarget_lock_acquire_recursive>
 80083e2:	bf00      	nop
 80083e4:	20005014 	.word	0x20005014

080083e8 <__malloc_unlock>:
 80083e8:	4801      	ldr	r0, [pc, #4]	@ (80083f0 <__malloc_unlock+0x8>)
 80083ea:	f000 b9ff 	b.w	80087ec <__retarget_lock_release_recursive>
 80083ee:	bf00      	nop
 80083f0:	20005014 	.word	0x20005014

080083f4 <srand>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4b10      	ldr	r3, [pc, #64]	@ (8008438 <srand+0x44>)
 80083f8:	681d      	ldr	r5, [r3, #0]
 80083fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80083fc:	4604      	mov	r4, r0
 80083fe:	b9b3      	cbnz	r3, 800842e <srand+0x3a>
 8008400:	2018      	movs	r0, #24
 8008402:	f7ff ff41 	bl	8008288 <malloc>
 8008406:	4602      	mov	r2, r0
 8008408:	6328      	str	r0, [r5, #48]	@ 0x30
 800840a:	b920      	cbnz	r0, 8008416 <srand+0x22>
 800840c:	4b0b      	ldr	r3, [pc, #44]	@ (800843c <srand+0x48>)
 800840e:	480c      	ldr	r0, [pc, #48]	@ (8008440 <srand+0x4c>)
 8008410:	2146      	movs	r1, #70	@ 0x46
 8008412:	f000 f9fb 	bl	800880c <__assert_func>
 8008416:	490b      	ldr	r1, [pc, #44]	@ (8008444 <srand+0x50>)
 8008418:	4b0b      	ldr	r3, [pc, #44]	@ (8008448 <srand+0x54>)
 800841a:	e9c0 1300 	strd	r1, r3, [r0]
 800841e:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <srand+0x58>)
 8008420:	6083      	str	r3, [r0, #8]
 8008422:	230b      	movs	r3, #11
 8008424:	8183      	strh	r3, [r0, #12]
 8008426:	2100      	movs	r1, #0
 8008428:	2001      	movs	r0, #1
 800842a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800842e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008430:	2200      	movs	r2, #0
 8008432:	611c      	str	r4, [r3, #16]
 8008434:	615a      	str	r2, [r3, #20]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	2000001c 	.word	0x2000001c
 800843c:	08009338 	.word	0x08009338
 8008440:	0800934f 	.word	0x0800934f
 8008444:	abcd330e 	.word	0xabcd330e
 8008448:	e66d1234 	.word	0xe66d1234
 800844c:	0005deec 	.word	0x0005deec

08008450 <rand>:
 8008450:	4b16      	ldr	r3, [pc, #88]	@ (80084ac <rand+0x5c>)
 8008452:	b510      	push	{r4, lr}
 8008454:	681c      	ldr	r4, [r3, #0]
 8008456:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008458:	b9b3      	cbnz	r3, 8008488 <rand+0x38>
 800845a:	2018      	movs	r0, #24
 800845c:	f7ff ff14 	bl	8008288 <malloc>
 8008460:	4602      	mov	r2, r0
 8008462:	6320      	str	r0, [r4, #48]	@ 0x30
 8008464:	b920      	cbnz	r0, 8008470 <rand+0x20>
 8008466:	4b12      	ldr	r3, [pc, #72]	@ (80084b0 <rand+0x60>)
 8008468:	4812      	ldr	r0, [pc, #72]	@ (80084b4 <rand+0x64>)
 800846a:	2152      	movs	r1, #82	@ 0x52
 800846c:	f000 f9ce 	bl	800880c <__assert_func>
 8008470:	4911      	ldr	r1, [pc, #68]	@ (80084b8 <rand+0x68>)
 8008472:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <rand+0x6c>)
 8008474:	e9c0 1300 	strd	r1, r3, [r0]
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <rand+0x70>)
 800847a:	6083      	str	r3, [r0, #8]
 800847c:	230b      	movs	r3, #11
 800847e:	8183      	strh	r3, [r0, #12]
 8008480:	2100      	movs	r1, #0
 8008482:	2001      	movs	r0, #1
 8008484:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008488:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800848a:	480e      	ldr	r0, [pc, #56]	@ (80084c4 <rand+0x74>)
 800848c:	690b      	ldr	r3, [r1, #16]
 800848e:	694c      	ldr	r4, [r1, #20]
 8008490:	4a0d      	ldr	r2, [pc, #52]	@ (80084c8 <rand+0x78>)
 8008492:	4358      	muls	r0, r3
 8008494:	fb02 0004 	mla	r0, r2, r4, r0
 8008498:	fba3 3202 	umull	r3, r2, r3, r2
 800849c:	3301      	adds	r3, #1
 800849e:	eb40 0002 	adc.w	r0, r0, r2
 80084a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80084a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	2000001c 	.word	0x2000001c
 80084b0:	08009338 	.word	0x08009338
 80084b4:	0800934f 	.word	0x0800934f
 80084b8:	abcd330e 	.word	0xabcd330e
 80084bc:	e66d1234 	.word	0xe66d1234
 80084c0:	0005deec 	.word	0x0005deec
 80084c4:	5851f42d 	.word	0x5851f42d
 80084c8:	4c957f2d 	.word	0x4c957f2d

080084cc <std>:
 80084cc:	2300      	movs	r3, #0
 80084ce:	b510      	push	{r4, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	e9c0 3300 	strd	r3, r3, [r0]
 80084d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084da:	6083      	str	r3, [r0, #8]
 80084dc:	8181      	strh	r1, [r0, #12]
 80084de:	6643      	str	r3, [r0, #100]	@ 0x64
 80084e0:	81c2      	strh	r2, [r0, #14]
 80084e2:	6183      	str	r3, [r0, #24]
 80084e4:	4619      	mov	r1, r3
 80084e6:	2208      	movs	r2, #8
 80084e8:	305c      	adds	r0, #92	@ 0x5c
 80084ea:	f000 f8f4 	bl	80086d6 <memset>
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <std+0x58>)
 80084f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <std+0x5c>)
 80084f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084f6:	4b0d      	ldr	r3, [pc, #52]	@ (800852c <std+0x60>)
 80084f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <std+0x64>)
 80084fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <std+0x68>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	429c      	cmp	r4, r3
 8008504:	d006      	beq.n	8008514 <std+0x48>
 8008506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800850a:	4294      	cmp	r4, r2
 800850c:	d002      	beq.n	8008514 <std+0x48>
 800850e:	33d0      	adds	r3, #208	@ 0xd0
 8008510:	429c      	cmp	r4, r3
 8008512:	d105      	bne.n	8008520 <std+0x54>
 8008514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851c:	f000 b964 	b.w	80087e8 <__retarget_lock_init_recursive>
 8008520:	bd10      	pop	{r4, pc}
 8008522:	bf00      	nop
 8008524:	08008651 	.word	0x08008651
 8008528:	08008673 	.word	0x08008673
 800852c:	080086ab 	.word	0x080086ab
 8008530:	080086cf 	.word	0x080086cf
 8008534:	20004ed4 	.word	0x20004ed4

08008538 <stdio_exit_handler>:
 8008538:	4a02      	ldr	r2, [pc, #8]	@ (8008544 <stdio_exit_handler+0xc>)
 800853a:	4903      	ldr	r1, [pc, #12]	@ (8008548 <stdio_exit_handler+0x10>)
 800853c:	4803      	ldr	r0, [pc, #12]	@ (800854c <stdio_exit_handler+0x14>)
 800853e:	f000 b869 	b.w	8008614 <_fwalk_sglue>
 8008542:	bf00      	nop
 8008544:	20000010 	.word	0x20000010
 8008548:	080089e5 	.word	0x080089e5
 800854c:	20000020 	.word	0x20000020

08008550 <cleanup_stdio>:
 8008550:	6841      	ldr	r1, [r0, #4]
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <cleanup_stdio+0x34>)
 8008554:	4299      	cmp	r1, r3
 8008556:	b510      	push	{r4, lr}
 8008558:	4604      	mov	r4, r0
 800855a:	d001      	beq.n	8008560 <cleanup_stdio+0x10>
 800855c:	f000 fa42 	bl	80089e4 <_fflush_r>
 8008560:	68a1      	ldr	r1, [r4, #8]
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <cleanup_stdio+0x38>)
 8008564:	4299      	cmp	r1, r3
 8008566:	d002      	beq.n	800856e <cleanup_stdio+0x1e>
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fa3b 	bl	80089e4 <_fflush_r>
 800856e:	68e1      	ldr	r1, [r4, #12]
 8008570:	4b06      	ldr	r3, [pc, #24]	@ (800858c <cleanup_stdio+0x3c>)
 8008572:	4299      	cmp	r1, r3
 8008574:	d004      	beq.n	8008580 <cleanup_stdio+0x30>
 8008576:	4620      	mov	r0, r4
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f000 ba32 	b.w	80089e4 <_fflush_r>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	20004ed4 	.word	0x20004ed4
 8008588:	20004f3c 	.word	0x20004f3c
 800858c:	20004fa4 	.word	0x20004fa4

08008590 <global_stdio_init.part.0>:
 8008590:	b510      	push	{r4, lr}
 8008592:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <global_stdio_init.part.0+0x30>)
 8008594:	4c0b      	ldr	r4, [pc, #44]	@ (80085c4 <global_stdio_init.part.0+0x34>)
 8008596:	4a0c      	ldr	r2, [pc, #48]	@ (80085c8 <global_stdio_init.part.0+0x38>)
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	4620      	mov	r0, r4
 800859c:	2200      	movs	r2, #0
 800859e:	2104      	movs	r1, #4
 80085a0:	f7ff ff94 	bl	80084cc <std>
 80085a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085a8:	2201      	movs	r2, #1
 80085aa:	2109      	movs	r1, #9
 80085ac:	f7ff ff8e 	bl	80084cc <std>
 80085b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085b4:	2202      	movs	r2, #2
 80085b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ba:	2112      	movs	r1, #18
 80085bc:	f7ff bf86 	b.w	80084cc <std>
 80085c0:	2000500c 	.word	0x2000500c
 80085c4:	20004ed4 	.word	0x20004ed4
 80085c8:	08008539 	.word	0x08008539

080085cc <__sfp_lock_acquire>:
 80085cc:	4801      	ldr	r0, [pc, #4]	@ (80085d4 <__sfp_lock_acquire+0x8>)
 80085ce:	f000 b90c 	b.w	80087ea <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	20005015 	.word	0x20005015

080085d8 <__sfp_lock_release>:
 80085d8:	4801      	ldr	r0, [pc, #4]	@ (80085e0 <__sfp_lock_release+0x8>)
 80085da:	f000 b907 	b.w	80087ec <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	20005015 	.word	0x20005015

080085e4 <__sinit>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
 80085e8:	f7ff fff0 	bl	80085cc <__sfp_lock_acquire>
 80085ec:	6a23      	ldr	r3, [r4, #32]
 80085ee:	b11b      	cbz	r3, 80085f8 <__sinit+0x14>
 80085f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f4:	f7ff bff0 	b.w	80085d8 <__sfp_lock_release>
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <__sinit+0x28>)
 80085fa:	6223      	str	r3, [r4, #32]
 80085fc:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <__sinit+0x2c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f5      	bne.n	80085f0 <__sinit+0xc>
 8008604:	f7ff ffc4 	bl	8008590 <global_stdio_init.part.0>
 8008608:	e7f2      	b.n	80085f0 <__sinit+0xc>
 800860a:	bf00      	nop
 800860c:	08008551 	.word	0x08008551
 8008610:	2000500c 	.word	0x2000500c

08008614 <_fwalk_sglue>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	4607      	mov	r7, r0
 800861a:	4688      	mov	r8, r1
 800861c:	4614      	mov	r4, r2
 800861e:	2600      	movs	r6, #0
 8008620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008624:	f1b9 0901 	subs.w	r9, r9, #1
 8008628:	d505      	bpl.n	8008636 <_fwalk_sglue+0x22>
 800862a:	6824      	ldr	r4, [r4, #0]
 800862c:	2c00      	cmp	r4, #0
 800862e:	d1f7      	bne.n	8008620 <_fwalk_sglue+0xc>
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d907      	bls.n	800864c <_fwalk_sglue+0x38>
 800863c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008640:	3301      	adds	r3, #1
 8008642:	d003      	beq.n	800864c <_fwalk_sglue+0x38>
 8008644:	4629      	mov	r1, r5
 8008646:	4638      	mov	r0, r7
 8008648:	47c0      	blx	r8
 800864a:	4306      	orrs	r6, r0
 800864c:	3568      	adds	r5, #104	@ 0x68
 800864e:	e7e9      	b.n	8008624 <_fwalk_sglue+0x10>

08008650 <__sread>:
 8008650:	b510      	push	{r4, lr}
 8008652:	460c      	mov	r4, r1
 8008654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008658:	f000 f868 	bl	800872c <_read_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	bfab      	itete	ge
 8008660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008662:	89a3      	ldrhlt	r3, [r4, #12]
 8008664:	181b      	addge	r3, r3, r0
 8008666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800866a:	bfac      	ite	ge
 800866c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800866e:	81a3      	strhlt	r3, [r4, #12]
 8008670:	bd10      	pop	{r4, pc}

08008672 <__swrite>:
 8008672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008676:	461f      	mov	r7, r3
 8008678:	898b      	ldrh	r3, [r1, #12]
 800867a:	05db      	lsls	r3, r3, #23
 800867c:	4605      	mov	r5, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4616      	mov	r6, r2
 8008682:	d505      	bpl.n	8008690 <__swrite+0x1e>
 8008684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008688:	2302      	movs	r3, #2
 800868a:	2200      	movs	r2, #0
 800868c:	f000 f83c 	bl	8008708 <_lseek_r>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	4628      	mov	r0, r5
 80086a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086a6:	f000 b863 	b.w	8008770 <_write_r>

080086aa <__sseek>:
 80086aa:	b510      	push	{r4, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 f829 	bl	8008708 <_lseek_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	bf15      	itete	ne
 80086bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086c6:	81a3      	strheq	r3, [r4, #12]
 80086c8:	bf18      	it	ne
 80086ca:	81a3      	strhne	r3, [r4, #12]
 80086cc:	bd10      	pop	{r4, pc}

080086ce <__sclose>:
 80086ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d2:	f000 b809 	b.w	80086e8 <_close_r>

080086d6 <memset>:
 80086d6:	4402      	add	r2, r0
 80086d8:	4603      	mov	r3, r0
 80086da:	4293      	cmp	r3, r2
 80086dc:	d100      	bne.n	80086e0 <memset+0xa>
 80086de:	4770      	bx	lr
 80086e0:	f803 1b01 	strb.w	r1, [r3], #1
 80086e4:	e7f9      	b.n	80086da <memset+0x4>
	...

080086e8 <_close_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	@ (8008704 <_close_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7f8 fe00 	bl	80012f8 <_close>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_close_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_close_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	20005010 	.word	0x20005010

08008708 <_lseek_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d07      	ldr	r5, [pc, #28]	@ (8008728 <_lseek_r+0x20>)
 800870c:	4604      	mov	r4, r0
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	2200      	movs	r2, #0
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f7f8 fe15 	bl	8001346 <_lseek>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_lseek_r+0x1e>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_lseek_r+0x1e>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20005010 	.word	0x20005010

0800872c <_read_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d07      	ldr	r5, [pc, #28]	@ (800874c <_read_r+0x20>)
 8008730:	4604      	mov	r4, r0
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	2200      	movs	r2, #0
 8008738:	602a      	str	r2, [r5, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	f7f8 fda3 	bl	8001286 <_read>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_read_r+0x1e>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_read_r+0x1e>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	20005010 	.word	0x20005010

08008750 <_sbrk_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d06      	ldr	r5, [pc, #24]	@ (800876c <_sbrk_r+0x1c>)
 8008754:	2300      	movs	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	f7f8 fe00 	bl	8001360 <_sbrk>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_sbrk_r+0x1a>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_sbrk_r+0x1a>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	20005010 	.word	0x20005010

08008770 <_write_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d07      	ldr	r5, [pc, #28]	@ (8008790 <_write_r+0x20>)
 8008774:	4604      	mov	r4, r0
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f8 fd9e 	bl	80012c0 <_write>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_write_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_write_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20005010 	.word	0x20005010

08008794 <__errno>:
 8008794:	4b01      	ldr	r3, [pc, #4]	@ (800879c <__errno+0x8>)
 8008796:	6818      	ldr	r0, [r3, #0]
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	2000001c 	.word	0x2000001c

080087a0 <__libc_init_array>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	4d0d      	ldr	r5, [pc, #52]	@ (80087d8 <__libc_init_array+0x38>)
 80087a4:	4c0d      	ldr	r4, [pc, #52]	@ (80087dc <__libc_init_array+0x3c>)
 80087a6:	1b64      	subs	r4, r4, r5
 80087a8:	10a4      	asrs	r4, r4, #2
 80087aa:	2600      	movs	r6, #0
 80087ac:	42a6      	cmp	r6, r4
 80087ae:	d109      	bne.n	80087c4 <__libc_init_array+0x24>
 80087b0:	4d0b      	ldr	r5, [pc, #44]	@ (80087e0 <__libc_init_array+0x40>)
 80087b2:	4c0c      	ldr	r4, [pc, #48]	@ (80087e4 <__libc_init_array+0x44>)
 80087b4:	f000 fd82 	bl	80092bc <_init>
 80087b8:	1b64      	subs	r4, r4, r5
 80087ba:	10a4      	asrs	r4, r4, #2
 80087bc:	2600      	movs	r6, #0
 80087be:	42a6      	cmp	r6, r4
 80087c0:	d105      	bne.n	80087ce <__libc_init_array+0x2e>
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c8:	4798      	blx	r3
 80087ca:	3601      	adds	r6, #1
 80087cc:	e7ee      	b.n	80087ac <__libc_init_array+0xc>
 80087ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d2:	4798      	blx	r3
 80087d4:	3601      	adds	r6, #1
 80087d6:	e7f2      	b.n	80087be <__libc_init_array+0x1e>
 80087d8:	08009420 	.word	0x08009420
 80087dc:	08009420 	.word	0x08009420
 80087e0:	08009420 	.word	0x08009420
 80087e4:	08009424 	.word	0x08009424

080087e8 <__retarget_lock_init_recursive>:
 80087e8:	4770      	bx	lr

080087ea <__retarget_lock_acquire_recursive>:
 80087ea:	4770      	bx	lr

080087ec <__retarget_lock_release_recursive>:
 80087ec:	4770      	bx	lr

080087ee <memcpy>:
 80087ee:	440a      	add	r2, r1
 80087f0:	4291      	cmp	r1, r2
 80087f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80087f6:	d100      	bne.n	80087fa <memcpy+0xc>
 80087f8:	4770      	bx	lr
 80087fa:	b510      	push	{r4, lr}
 80087fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008804:	4291      	cmp	r1, r2
 8008806:	d1f9      	bne.n	80087fc <memcpy+0xe>
 8008808:	bd10      	pop	{r4, pc}
	...

0800880c <__assert_func>:
 800880c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800880e:	4614      	mov	r4, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <__assert_func+0x2c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4605      	mov	r5, r0
 8008818:	68d8      	ldr	r0, [r3, #12]
 800881a:	b954      	cbnz	r4, 8008832 <__assert_func+0x26>
 800881c:	4b07      	ldr	r3, [pc, #28]	@ (800883c <__assert_func+0x30>)
 800881e:	461c      	mov	r4, r3
 8008820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008824:	9100      	str	r1, [sp, #0]
 8008826:	462b      	mov	r3, r5
 8008828:	4905      	ldr	r1, [pc, #20]	@ (8008840 <__assert_func+0x34>)
 800882a:	f000 f903 	bl	8008a34 <fiprintf>
 800882e:	f000 f913 	bl	8008a58 <abort>
 8008832:	4b04      	ldr	r3, [pc, #16]	@ (8008844 <__assert_func+0x38>)
 8008834:	e7f4      	b.n	8008820 <__assert_func+0x14>
 8008836:	bf00      	nop
 8008838:	2000001c 	.word	0x2000001c
 800883c:	080093e2 	.word	0x080093e2
 8008840:	080093b4 	.word	0x080093b4
 8008844:	080093a7 	.word	0x080093a7

08008848 <_free_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4605      	mov	r5, r0
 800884c:	2900      	cmp	r1, #0
 800884e:	d041      	beq.n	80088d4 <_free_r+0x8c>
 8008850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008854:	1f0c      	subs	r4, r1, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfb8      	it	lt
 800885a:	18e4      	addlt	r4, r4, r3
 800885c:	f7ff fdbe 	bl	80083dc <__malloc_lock>
 8008860:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <_free_r+0x90>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x2c>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	4628      	mov	r0, r5
 800886c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008870:	f7ff bdba 	b.w	80083e8 <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x42>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1809      	addeq	r1, r1, r0
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x1e>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x4c>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x42>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1850      	adds	r0, r2, r1
 8008898:	42a0      	cmp	r0, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x6c>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	4401      	add	r1, r0
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	4283      	cmp	r3, r0
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x22>
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	4408      	add	r0, r1
 80088b0:	6010      	str	r0, [r2, #0]
 80088b2:	e7da      	b.n	800886a <_free_r+0x22>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x74>
 80088b6:	230c      	movs	r3, #12
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x22>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	1821      	adds	r1, r4, r0
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1809      	addeq	r1, r1, r0
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7ca      	b.n	800886a <_free_r+0x22>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20004ed0 	.word	0x20004ed0

080088dc <__sflush_r>:
 80088dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	0716      	lsls	r6, r2, #28
 80088e6:	4605      	mov	r5, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	d454      	bmi.n	8008996 <__sflush_r+0xba>
 80088ec:	684b      	ldr	r3, [r1, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dc02      	bgt.n	80088f8 <__sflush_r+0x1c>
 80088f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd48      	ble.n	800898a <__sflush_r+0xae>
 80088f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088fa:	2e00      	cmp	r6, #0
 80088fc:	d045      	beq.n	800898a <__sflush_r+0xae>
 80088fe:	2300      	movs	r3, #0
 8008900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008904:	682f      	ldr	r7, [r5, #0]
 8008906:	6a21      	ldr	r1, [r4, #32]
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	d030      	beq.n	800896e <__sflush_r+0x92>
 800890c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	0759      	lsls	r1, r3, #29
 8008912:	d505      	bpl.n	8008920 <__sflush_r+0x44>
 8008914:	6863      	ldr	r3, [r4, #4]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800891a:	b10b      	cbz	r3, 8008920 <__sflush_r+0x44>
 800891c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008924:	6a21      	ldr	r1, [r4, #32]
 8008926:	4628      	mov	r0, r5
 8008928:	47b0      	blx	r6
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	d106      	bne.n	800893e <__sflush_r+0x62>
 8008930:	6829      	ldr	r1, [r5, #0]
 8008932:	291d      	cmp	r1, #29
 8008934:	d82b      	bhi.n	800898e <__sflush_r+0xb2>
 8008936:	4a2a      	ldr	r2, [pc, #168]	@ (80089e0 <__sflush_r+0x104>)
 8008938:	410a      	asrs	r2, r1
 800893a:	07d6      	lsls	r6, r2, #31
 800893c:	d427      	bmi.n	800898e <__sflush_r+0xb2>
 800893e:	2200      	movs	r2, #0
 8008940:	6062      	str	r2, [r4, #4]
 8008942:	04d9      	lsls	r1, r3, #19
 8008944:	6922      	ldr	r2, [r4, #16]
 8008946:	6022      	str	r2, [r4, #0]
 8008948:	d504      	bpl.n	8008954 <__sflush_r+0x78>
 800894a:	1c42      	adds	r2, r0, #1
 800894c:	d101      	bne.n	8008952 <__sflush_r+0x76>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	b903      	cbnz	r3, 8008954 <__sflush_r+0x78>
 8008952:	6560      	str	r0, [r4, #84]	@ 0x54
 8008954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008956:	602f      	str	r7, [r5, #0]
 8008958:	b1b9      	cbz	r1, 800898a <__sflush_r+0xae>
 800895a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800895e:	4299      	cmp	r1, r3
 8008960:	d002      	beq.n	8008968 <__sflush_r+0x8c>
 8008962:	4628      	mov	r0, r5
 8008964:	f7ff ff70 	bl	8008848 <_free_r>
 8008968:	2300      	movs	r3, #0
 800896a:	6363      	str	r3, [r4, #52]	@ 0x34
 800896c:	e00d      	b.n	800898a <__sflush_r+0xae>
 800896e:	2301      	movs	r3, #1
 8008970:	4628      	mov	r0, r5
 8008972:	47b0      	blx	r6
 8008974:	4602      	mov	r2, r0
 8008976:	1c50      	adds	r0, r2, #1
 8008978:	d1c9      	bne.n	800890e <__sflush_r+0x32>
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0c6      	beq.n	800890e <__sflush_r+0x32>
 8008980:	2b1d      	cmp	r3, #29
 8008982:	d001      	beq.n	8008988 <__sflush_r+0xac>
 8008984:	2b16      	cmp	r3, #22
 8008986:	d11e      	bne.n	80089c6 <__sflush_r+0xea>
 8008988:	602f      	str	r7, [r5, #0]
 800898a:	2000      	movs	r0, #0
 800898c:	e022      	b.n	80089d4 <__sflush_r+0xf8>
 800898e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008992:	b21b      	sxth	r3, r3
 8008994:	e01b      	b.n	80089ce <__sflush_r+0xf2>
 8008996:	690f      	ldr	r7, [r1, #16]
 8008998:	2f00      	cmp	r7, #0
 800899a:	d0f6      	beq.n	800898a <__sflush_r+0xae>
 800899c:	0793      	lsls	r3, r2, #30
 800899e:	680e      	ldr	r6, [r1, #0]
 80089a0:	bf08      	it	eq
 80089a2:	694b      	ldreq	r3, [r1, #20]
 80089a4:	600f      	str	r7, [r1, #0]
 80089a6:	bf18      	it	ne
 80089a8:	2300      	movne	r3, #0
 80089aa:	eba6 0807 	sub.w	r8, r6, r7
 80089ae:	608b      	str	r3, [r1, #8]
 80089b0:	f1b8 0f00 	cmp.w	r8, #0
 80089b4:	dde9      	ble.n	800898a <__sflush_r+0xae>
 80089b6:	6a21      	ldr	r1, [r4, #32]
 80089b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089ba:	4643      	mov	r3, r8
 80089bc:	463a      	mov	r2, r7
 80089be:	4628      	mov	r0, r5
 80089c0:	47b0      	blx	r6
 80089c2:	2800      	cmp	r0, #0
 80089c4:	dc08      	bgt.n	80089d8 <__sflush_r+0xfc>
 80089c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	4407      	add	r7, r0
 80089da:	eba8 0800 	sub.w	r8, r8, r0
 80089de:	e7e7      	b.n	80089b0 <__sflush_r+0xd4>
 80089e0:	dfbffffe 	.word	0xdfbffffe

080089e4 <_fflush_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	690b      	ldr	r3, [r1, #16]
 80089e8:	4605      	mov	r5, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	b913      	cbnz	r3, 80089f4 <_fflush_r+0x10>
 80089ee:	2500      	movs	r5, #0
 80089f0:	4628      	mov	r0, r5
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	b118      	cbz	r0, 80089fe <_fflush_r+0x1a>
 80089f6:	6a03      	ldr	r3, [r0, #32]
 80089f8:	b90b      	cbnz	r3, 80089fe <_fflush_r+0x1a>
 80089fa:	f7ff fdf3 	bl	80085e4 <__sinit>
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0f3      	beq.n	80089ee <_fflush_r+0xa>
 8008a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a08:	07d0      	lsls	r0, r2, #31
 8008a0a:	d404      	bmi.n	8008a16 <_fflush_r+0x32>
 8008a0c:	0599      	lsls	r1, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_fflush_r+0x32>
 8008a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a12:	f7ff feea 	bl	80087ea <__retarget_lock_acquire_recursive>
 8008a16:	4628      	mov	r0, r5
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7ff ff5f 	bl	80088dc <__sflush_r>
 8008a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a20:	07da      	lsls	r2, r3, #31
 8008a22:	4605      	mov	r5, r0
 8008a24:	d4e4      	bmi.n	80089f0 <_fflush_r+0xc>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d4e1      	bmi.n	80089f0 <_fflush_r+0xc>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a2e:	f7ff fedd 	bl	80087ec <__retarget_lock_release_recursive>
 8008a32:	e7dd      	b.n	80089f0 <_fflush_r+0xc>

08008a34 <fiprintf>:
 8008a34:	b40e      	push	{r1, r2, r3}
 8008a36:	b503      	push	{r0, r1, lr}
 8008a38:	4601      	mov	r1, r0
 8008a3a:	ab03      	add	r3, sp, #12
 8008a3c:	4805      	ldr	r0, [pc, #20]	@ (8008a54 <fiprintf+0x20>)
 8008a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a42:	6800      	ldr	r0, [r0, #0]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	f000 f837 	bl	8008ab8 <_vfiprintf_r>
 8008a4a:	b002      	add	sp, #8
 8008a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a50:	b003      	add	sp, #12
 8008a52:	4770      	bx	lr
 8008a54:	2000001c 	.word	0x2000001c

08008a58 <abort>:
 8008a58:	b508      	push	{r3, lr}
 8008a5a:	2006      	movs	r0, #6
 8008a5c:	f000 fb8e 	bl	800917c <raise>
 8008a60:	2001      	movs	r0, #1
 8008a62:	f7f8 fc05 	bl	8001270 <_exit>

08008a66 <__sfputc_r>:
 8008a66:	6893      	ldr	r3, [r2, #8]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	b410      	push	{r4}
 8008a6e:	6093      	str	r3, [r2, #8]
 8008a70:	da08      	bge.n	8008a84 <__sfputc_r+0x1e>
 8008a72:	6994      	ldr	r4, [r2, #24]
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	db01      	blt.n	8008a7c <__sfputc_r+0x16>
 8008a78:	290a      	cmp	r1, #10
 8008a7a:	d103      	bne.n	8008a84 <__sfputc_r+0x1e>
 8008a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a80:	f000 bac0 	b.w	8009004 <__swbuf_r>
 8008a84:	6813      	ldr	r3, [r2, #0]
 8008a86:	1c58      	adds	r0, r3, #1
 8008a88:	6010      	str	r0, [r2, #0]
 8008a8a:	7019      	strb	r1, [r3, #0]
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <__sfputs_r>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	18d5      	adds	r5, r2, r3
 8008a9e:	42ac      	cmp	r4, r5
 8008aa0:	d101      	bne.n	8008aa6 <__sfputs_r+0x12>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e007      	b.n	8008ab6 <__sfputs_r+0x22>
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	463a      	mov	r2, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff ffda 	bl	8008a66 <__sfputc_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d1f3      	bne.n	8008a9e <__sfputs_r+0xa>
 8008ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ab8 <_vfiprintf_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	460d      	mov	r5, r1
 8008abe:	b09d      	sub	sp, #116	@ 0x74
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	4698      	mov	r8, r3
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	b118      	cbz	r0, 8008ad0 <_vfiprintf_r+0x18>
 8008ac8:	6a03      	ldr	r3, [r0, #32]
 8008aca:	b90b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x18>
 8008acc:	f7ff fd8a 	bl	80085e4 <__sinit>
 8008ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ad2:	07d9      	lsls	r1, r3, #31
 8008ad4:	d405      	bmi.n	8008ae2 <_vfiprintf_r+0x2a>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	059a      	lsls	r2, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_vfiprintf_r+0x2a>
 8008adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ade:	f7ff fe84 	bl	80087ea <__retarget_lock_acquire_recursive>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	071b      	lsls	r3, r3, #28
 8008ae6:	d501      	bpl.n	8008aec <_vfiprintf_r+0x34>
 8008ae8:	692b      	ldr	r3, [r5, #16]
 8008aea:	b99b      	cbnz	r3, 8008b14 <_vfiprintf_r+0x5c>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 fac6 	bl	8009080 <__swsetup_r>
 8008af4:	b170      	cbz	r0, 8008b14 <_vfiprintf_r+0x5c>
 8008af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008af8:	07dc      	lsls	r4, r3, #31
 8008afa:	d504      	bpl.n	8008b06 <_vfiprintf_r+0x4e>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b00:	b01d      	add	sp, #116	@ 0x74
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	0598      	lsls	r0, r3, #22
 8008b0a:	d4f7      	bmi.n	8008afc <_vfiprintf_r+0x44>
 8008b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b0e:	f7ff fe6d 	bl	80087ec <__retarget_lock_release_recursive>
 8008b12:	e7f3      	b.n	8008afc <_vfiprintf_r+0x44>
 8008b14:	2300      	movs	r3, #0
 8008b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b18:	2320      	movs	r3, #32
 8008b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b22:	2330      	movs	r3, #48	@ 0x30
 8008b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cd4 <_vfiprintf_r+0x21c>
 8008b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b2c:	f04f 0901 	mov.w	r9, #1
 8008b30:	4623      	mov	r3, r4
 8008b32:	469a      	mov	sl, r3
 8008b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b38:	b10a      	cbz	r2, 8008b3e <_vfiprintf_r+0x86>
 8008b3a:	2a25      	cmp	r2, #37	@ 0x25
 8008b3c:	d1f9      	bne.n	8008b32 <_vfiprintf_r+0x7a>
 8008b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b42:	d00b      	beq.n	8008b5c <_vfiprintf_r+0xa4>
 8008b44:	465b      	mov	r3, fp
 8008b46:	4622      	mov	r2, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffa2 	bl	8008a94 <__sfputs_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	f000 80a7 	beq.w	8008ca4 <_vfiprintf_r+0x1ec>
 8008b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b58:	445a      	add	r2, fp
 8008b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 809f 	beq.w	8008ca4 <_vfiprintf_r+0x1ec>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b70:	f10a 0a01 	add.w	sl, sl, #1
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	9307      	str	r3, [sp, #28]
 8008b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b7e:	4654      	mov	r4, sl
 8008b80:	2205      	movs	r2, #5
 8008b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b86:	4853      	ldr	r0, [pc, #332]	@ (8008cd4 <_vfiprintf_r+0x21c>)
 8008b88:	f7f7 fb22 	bl	80001d0 <memchr>
 8008b8c:	9a04      	ldr	r2, [sp, #16]
 8008b8e:	b9d8      	cbnz	r0, 8008bc8 <_vfiprintf_r+0x110>
 8008b90:	06d1      	lsls	r1, r2, #27
 8008b92:	bf44      	itt	mi
 8008b94:	2320      	movmi	r3, #32
 8008b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b9a:	0713      	lsls	r3, r2, #28
 8008b9c:	bf44      	itt	mi
 8008b9e:	232b      	movmi	r3, #43	@ 0x2b
 8008ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008baa:	d015      	beq.n	8008bd8 <_vfiprintf_r+0x120>
 8008bac:	9a07      	ldr	r2, [sp, #28]
 8008bae:	4654      	mov	r4, sl
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbc:	3b30      	subs	r3, #48	@ 0x30
 8008bbe:	2b09      	cmp	r3, #9
 8008bc0:	d94b      	bls.n	8008c5a <_vfiprintf_r+0x1a2>
 8008bc2:	b1b0      	cbz	r0, 8008bf2 <_vfiprintf_r+0x13a>
 8008bc4:	9207      	str	r2, [sp, #28]
 8008bc6:	e014      	b.n	8008bf2 <_vfiprintf_r+0x13a>
 8008bc8:	eba0 0308 	sub.w	r3, r0, r8
 8008bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	46a2      	mov	sl, r4
 8008bd6:	e7d2      	b.n	8008b7e <_vfiprintf_r+0xc6>
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	1d19      	adds	r1, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	9103      	str	r1, [sp, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bfbb      	ittet	lt
 8008be4:	425b      	neglt	r3, r3
 8008be6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bea:	9307      	strge	r3, [sp, #28]
 8008bec:	9307      	strlt	r3, [sp, #28]
 8008bee:	bfb8      	it	lt
 8008bf0:	9204      	strlt	r2, [sp, #16]
 8008bf2:	7823      	ldrb	r3, [r4, #0]
 8008bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf6:	d10a      	bne.n	8008c0e <_vfiprintf_r+0x156>
 8008bf8:	7863      	ldrb	r3, [r4, #1]
 8008bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfc:	d132      	bne.n	8008c64 <_vfiprintf_r+0x1ac>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	9203      	str	r2, [sp, #12]
 8008c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c0a:	3402      	adds	r4, #2
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ce4 <_vfiprintf_r+0x22c>
 8008c12:	7821      	ldrb	r1, [r4, #0]
 8008c14:	2203      	movs	r2, #3
 8008c16:	4650      	mov	r0, sl
 8008c18:	f7f7 fada 	bl	80001d0 <memchr>
 8008c1c:	b138      	cbz	r0, 8008c2e <_vfiprintf_r+0x176>
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	eba0 000a 	sub.w	r0, r0, sl
 8008c24:	2240      	movs	r2, #64	@ 0x40
 8008c26:	4082      	lsls	r2, r0
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	3401      	adds	r4, #1
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c32:	4829      	ldr	r0, [pc, #164]	@ (8008cd8 <_vfiprintf_r+0x220>)
 8008c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c38:	2206      	movs	r2, #6
 8008c3a:	f7f7 fac9 	bl	80001d0 <memchr>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d03f      	beq.n	8008cc2 <_vfiprintf_r+0x20a>
 8008c42:	4b26      	ldr	r3, [pc, #152]	@ (8008cdc <_vfiprintf_r+0x224>)
 8008c44:	bb1b      	cbnz	r3, 8008c8e <_vfiprintf_r+0x1d6>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	3307      	adds	r3, #7
 8008c4a:	f023 0307 	bic.w	r3, r3, #7
 8008c4e:	3308      	adds	r3, #8
 8008c50:	9303      	str	r3, [sp, #12]
 8008c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c54:	443b      	add	r3, r7
 8008c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c58:	e76a      	b.n	8008b30 <_vfiprintf_r+0x78>
 8008c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c5e:	460c      	mov	r4, r1
 8008c60:	2001      	movs	r0, #1
 8008c62:	e7a8      	b.n	8008bb6 <_vfiprintf_r+0xfe>
 8008c64:	2300      	movs	r3, #0
 8008c66:	3401      	adds	r4, #1
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f04f 0c0a 	mov.w	ip, #10
 8008c70:	4620      	mov	r0, r4
 8008c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c76:	3a30      	subs	r2, #48	@ 0x30
 8008c78:	2a09      	cmp	r2, #9
 8008c7a:	d903      	bls.n	8008c84 <_vfiprintf_r+0x1cc>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0c6      	beq.n	8008c0e <_vfiprintf_r+0x156>
 8008c80:	9105      	str	r1, [sp, #20]
 8008c82:	e7c4      	b.n	8008c0e <_vfiprintf_r+0x156>
 8008c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c88:	4604      	mov	r4, r0
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e7f0      	b.n	8008c70 <_vfiprintf_r+0x1b8>
 8008c8e:	ab03      	add	r3, sp, #12
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	462a      	mov	r2, r5
 8008c94:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <_vfiprintf_r+0x228>)
 8008c96:	a904      	add	r1, sp, #16
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f3af 8000 	nop.w
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	1c78      	adds	r0, r7, #1
 8008ca2:	d1d6      	bne.n	8008c52 <_vfiprintf_r+0x19a>
 8008ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d405      	bmi.n	8008cb6 <_vfiprintf_r+0x1fe>
 8008caa:	89ab      	ldrh	r3, [r5, #12]
 8008cac:	059a      	lsls	r2, r3, #22
 8008cae:	d402      	bmi.n	8008cb6 <_vfiprintf_r+0x1fe>
 8008cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb2:	f7ff fd9b 	bl	80087ec <__retarget_lock_release_recursive>
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	065b      	lsls	r3, r3, #25
 8008cba:	f53f af1f 	bmi.w	8008afc <_vfiprintf_r+0x44>
 8008cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cc0:	e71e      	b.n	8008b00 <_vfiprintf_r+0x48>
 8008cc2:	ab03      	add	r3, sp, #12
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <_vfiprintf_r+0x228>)
 8008cca:	a904      	add	r1, sp, #16
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 f879 	bl	8008dc4 <_printf_i>
 8008cd2:	e7e4      	b.n	8008c9e <_vfiprintf_r+0x1e6>
 8008cd4:	080093e3 	.word	0x080093e3
 8008cd8:	080093ed 	.word	0x080093ed
 8008cdc:	00000000 	.word	0x00000000
 8008ce0:	08008a95 	.word	0x08008a95
 8008ce4:	080093e9 	.word	0x080093e9

08008ce8 <_printf_common>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	4616      	mov	r6, r2
 8008cee:	4698      	mov	r8, r3
 8008cf0:	688a      	ldr	r2, [r1, #8]
 8008cf2:	690b      	ldr	r3, [r1, #16]
 8008cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	bfb8      	it	lt
 8008cfc:	4613      	movlt	r3, r2
 8008cfe:	6033      	str	r3, [r6, #0]
 8008d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d04:	4607      	mov	r7, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	b10a      	cbz	r2, 8008d0e <_printf_common+0x26>
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	6033      	str	r3, [r6, #0]
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	0699      	lsls	r1, r3, #26
 8008d12:	bf42      	ittt	mi
 8008d14:	6833      	ldrmi	r3, [r6, #0]
 8008d16:	3302      	addmi	r3, #2
 8008d18:	6033      	strmi	r3, [r6, #0]
 8008d1a:	6825      	ldr	r5, [r4, #0]
 8008d1c:	f015 0506 	ands.w	r5, r5, #6
 8008d20:	d106      	bne.n	8008d30 <_printf_common+0x48>
 8008d22:	f104 0a19 	add.w	sl, r4, #25
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	6832      	ldr	r2, [r6, #0]
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	dc26      	bgt.n	8008d7e <_printf_common+0x96>
 8008d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	3b00      	subs	r3, #0
 8008d38:	bf18      	it	ne
 8008d3a:	2301      	movne	r3, #1
 8008d3c:	0692      	lsls	r2, r2, #26
 8008d3e:	d42b      	bmi.n	8008d98 <_printf_common+0xb0>
 8008d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d44:	4641      	mov	r1, r8
 8008d46:	4638      	mov	r0, r7
 8008d48:	47c8      	blx	r9
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d01e      	beq.n	8008d8c <_printf_common+0xa4>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	6922      	ldr	r2, [r4, #16]
 8008d52:	f003 0306 	and.w	r3, r3, #6
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	bf02      	ittt	eq
 8008d5a:	68e5      	ldreq	r5, [r4, #12]
 8008d5c:	6833      	ldreq	r3, [r6, #0]
 8008d5e:	1aed      	subeq	r5, r5, r3
 8008d60:	68a3      	ldr	r3, [r4, #8]
 8008d62:	bf0c      	ite	eq
 8008d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d68:	2500      	movne	r5, #0
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bfc4      	itt	gt
 8008d6e:	1a9b      	subgt	r3, r3, r2
 8008d70:	18ed      	addgt	r5, r5, r3
 8008d72:	2600      	movs	r6, #0
 8008d74:	341a      	adds	r4, #26
 8008d76:	42b5      	cmp	r5, r6
 8008d78:	d11a      	bne.n	8008db0 <_printf_common+0xc8>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e008      	b.n	8008d90 <_printf_common+0xa8>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4652      	mov	r2, sl
 8008d82:	4641      	mov	r1, r8
 8008d84:	4638      	mov	r0, r7
 8008d86:	47c8      	blx	r9
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d103      	bne.n	8008d94 <_printf_common+0xac>
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d94:	3501      	adds	r5, #1
 8008d96:	e7c6      	b.n	8008d26 <_printf_common+0x3e>
 8008d98:	18e1      	adds	r1, r4, r3
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	2030      	movs	r0, #48	@ 0x30
 8008d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008da2:	4422      	add	r2, r4
 8008da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dac:	3302      	adds	r3, #2
 8008dae:	e7c7      	b.n	8008d40 <_printf_common+0x58>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4622      	mov	r2, r4
 8008db4:	4641      	mov	r1, r8
 8008db6:	4638      	mov	r0, r7
 8008db8:	47c8      	blx	r9
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d0e6      	beq.n	8008d8c <_printf_common+0xa4>
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7d9      	b.n	8008d76 <_printf_common+0x8e>
	...

08008dc4 <_printf_i>:
 8008dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	7e0f      	ldrb	r7, [r1, #24]
 8008dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dcc:	2f78      	cmp	r7, #120	@ 0x78
 8008dce:	4691      	mov	r9, r2
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dda:	d807      	bhi.n	8008dec <_printf_i+0x28>
 8008ddc:	2f62      	cmp	r7, #98	@ 0x62
 8008dde:	d80a      	bhi.n	8008df6 <_printf_i+0x32>
 8008de0:	2f00      	cmp	r7, #0
 8008de2:	f000 80d2 	beq.w	8008f8a <_printf_i+0x1c6>
 8008de6:	2f58      	cmp	r7, #88	@ 0x58
 8008de8:	f000 80b9 	beq.w	8008f5e <_printf_i+0x19a>
 8008dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008df4:	e03a      	b.n	8008e6c <_printf_i+0xa8>
 8008df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dfa:	2b15      	cmp	r3, #21
 8008dfc:	d8f6      	bhi.n	8008dec <_printf_i+0x28>
 8008dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8008e04 <_printf_i+0x40>)
 8008e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e04:	08008e5d 	.word	0x08008e5d
 8008e08:	08008e71 	.word	0x08008e71
 8008e0c:	08008ded 	.word	0x08008ded
 8008e10:	08008ded 	.word	0x08008ded
 8008e14:	08008ded 	.word	0x08008ded
 8008e18:	08008ded 	.word	0x08008ded
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008ded 	.word	0x08008ded
 8008e24:	08008ded 	.word	0x08008ded
 8008e28:	08008ded 	.word	0x08008ded
 8008e2c:	08008ded 	.word	0x08008ded
 8008e30:	08008f71 	.word	0x08008f71
 8008e34:	08008e9b 	.word	0x08008e9b
 8008e38:	08008f2b 	.word	0x08008f2b
 8008e3c:	08008ded 	.word	0x08008ded
 8008e40:	08008ded 	.word	0x08008ded
 8008e44:	08008f93 	.word	0x08008f93
 8008e48:	08008ded 	.word	0x08008ded
 8008e4c:	08008e9b 	.word	0x08008e9b
 8008e50:	08008ded 	.word	0x08008ded
 8008e54:	08008ded 	.word	0x08008ded
 8008e58:	08008f33 	.word	0x08008f33
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6032      	str	r2, [r6, #0]
 8008e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e09d      	b.n	8008fac <_printf_i+0x1e8>
 8008e70:	6833      	ldr	r3, [r6, #0]
 8008e72:	6820      	ldr	r0, [r4, #0]
 8008e74:	1d19      	adds	r1, r3, #4
 8008e76:	6031      	str	r1, [r6, #0]
 8008e78:	0606      	lsls	r6, r0, #24
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0xbc>
 8008e7c:	681d      	ldr	r5, [r3, #0]
 8008e7e:	e003      	b.n	8008e88 <_printf_i+0xc4>
 8008e80:	0645      	lsls	r5, r0, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0xb8>
 8008e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	da03      	bge.n	8008e94 <_printf_i+0xd0>
 8008e8c:	232d      	movs	r3, #45	@ 0x2d
 8008e8e:	426d      	negs	r5, r5
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e94:	4859      	ldr	r0, [pc, #356]	@ (8008ffc <_printf_i+0x238>)
 8008e96:	230a      	movs	r3, #10
 8008e98:	e011      	b.n	8008ebe <_printf_i+0xfa>
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	0608      	lsls	r0, r1, #24
 8008ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ea4:	d402      	bmi.n	8008eac <_printf_i+0xe8>
 8008ea6:	0649      	lsls	r1, r1, #25
 8008ea8:	bf48      	it	mi
 8008eaa:	b2ad      	uxthmi	r5, r5
 8008eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eae:	4853      	ldr	r0, [pc, #332]	@ (8008ffc <_printf_i+0x238>)
 8008eb0:	6033      	str	r3, [r6, #0]
 8008eb2:	bf14      	ite	ne
 8008eb4:	230a      	movne	r3, #10
 8008eb6:	2308      	moveq	r3, #8
 8008eb8:	2100      	movs	r1, #0
 8008eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ebe:	6866      	ldr	r6, [r4, #4]
 8008ec0:	60a6      	str	r6, [r4, #8]
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	bfa2      	ittt	ge
 8008ec6:	6821      	ldrge	r1, [r4, #0]
 8008ec8:	f021 0104 	bicge.w	r1, r1, #4
 8008ecc:	6021      	strge	r1, [r4, #0]
 8008ece:	b90d      	cbnz	r5, 8008ed4 <_printf_i+0x110>
 8008ed0:	2e00      	cmp	r6, #0
 8008ed2:	d04b      	beq.n	8008f6c <_printf_i+0x1a8>
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eda:	fb03 5711 	mls	r7, r3, r1, r5
 8008ede:	5dc7      	ldrb	r7, [r0, r7]
 8008ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ee4:	462f      	mov	r7, r5
 8008ee6:	42bb      	cmp	r3, r7
 8008ee8:	460d      	mov	r5, r1
 8008eea:	d9f4      	bls.n	8008ed6 <_printf_i+0x112>
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d10b      	bne.n	8008f08 <_printf_i+0x144>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	07df      	lsls	r7, r3, #31
 8008ef4:	d508      	bpl.n	8008f08 <_printf_i+0x144>
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	4299      	cmp	r1, r3
 8008efc:	bfde      	ittt	le
 8008efe:	2330      	movle	r3, #48	@ 0x30
 8008f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f08:	1b92      	subs	r2, r2, r6
 8008f0a:	6122      	str	r2, [r4, #16]
 8008f0c:	f8cd a000 	str.w	sl, [sp]
 8008f10:	464b      	mov	r3, r9
 8008f12:	aa03      	add	r2, sp, #12
 8008f14:	4621      	mov	r1, r4
 8008f16:	4640      	mov	r0, r8
 8008f18:	f7ff fee6 	bl	8008ce8 <_printf_common>
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d14a      	bne.n	8008fb6 <_printf_i+0x1f2>
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f24:	b004      	add	sp, #16
 8008f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	f043 0320 	orr.w	r3, r3, #32
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	4833      	ldr	r0, [pc, #204]	@ (8009000 <_printf_i+0x23c>)
 8008f34:	2778      	movs	r7, #120	@ 0x78
 8008f36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	6831      	ldr	r1, [r6, #0]
 8008f3e:	061f      	lsls	r7, r3, #24
 8008f40:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f44:	d402      	bmi.n	8008f4c <_printf_i+0x188>
 8008f46:	065f      	lsls	r7, r3, #25
 8008f48:	bf48      	it	mi
 8008f4a:	b2ad      	uxthmi	r5, r5
 8008f4c:	6031      	str	r1, [r6, #0]
 8008f4e:	07d9      	lsls	r1, r3, #31
 8008f50:	bf44      	itt	mi
 8008f52:	f043 0320 	orrmi.w	r3, r3, #32
 8008f56:	6023      	strmi	r3, [r4, #0]
 8008f58:	b11d      	cbz	r5, 8008f62 <_printf_i+0x19e>
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	e7ac      	b.n	8008eb8 <_printf_i+0xf4>
 8008f5e:	4827      	ldr	r0, [pc, #156]	@ (8008ffc <_printf_i+0x238>)
 8008f60:	e7e9      	b.n	8008f36 <_printf_i+0x172>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	f023 0320 	bic.w	r3, r3, #32
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	e7f6      	b.n	8008f5a <_printf_i+0x196>
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	e7bd      	b.n	8008eec <_printf_i+0x128>
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	6961      	ldr	r1, [r4, #20]
 8008f76:	1d18      	adds	r0, r3, #4
 8008f78:	6030      	str	r0, [r6, #0]
 8008f7a:	062e      	lsls	r6, r5, #24
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	d501      	bpl.n	8008f84 <_printf_i+0x1c0>
 8008f80:	6019      	str	r1, [r3, #0]
 8008f82:	e002      	b.n	8008f8a <_printf_i+0x1c6>
 8008f84:	0668      	lsls	r0, r5, #25
 8008f86:	d5fb      	bpl.n	8008f80 <_printf_i+0x1bc>
 8008f88:	8019      	strh	r1, [r3, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	4616      	mov	r6, r2
 8008f90:	e7bc      	b.n	8008f0c <_printf_i+0x148>
 8008f92:	6833      	ldr	r3, [r6, #0]
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	6032      	str	r2, [r6, #0]
 8008f98:	681e      	ldr	r6, [r3, #0]
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7f7 f916 	bl	80001d0 <memchr>
 8008fa4:	b108      	cbz	r0, 8008faa <_printf_i+0x1e6>
 8008fa6:	1b80      	subs	r0, r0, r6
 8008fa8:	6060      	str	r0, [r4, #4]
 8008faa:	6863      	ldr	r3, [r4, #4]
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fb4:	e7aa      	b.n	8008f0c <_printf_i+0x148>
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	4632      	mov	r2, r6
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	47d0      	blx	sl
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d0ad      	beq.n	8008f20 <_printf_i+0x15c>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	079b      	lsls	r3, r3, #30
 8008fc8:	d413      	bmi.n	8008ff2 <_printf_i+0x22e>
 8008fca:	68e0      	ldr	r0, [r4, #12]
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	4298      	cmp	r0, r3
 8008fd0:	bfb8      	it	lt
 8008fd2:	4618      	movlt	r0, r3
 8008fd4:	e7a6      	b.n	8008f24 <_printf_i+0x160>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4632      	mov	r2, r6
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	47d0      	blx	sl
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d09d      	beq.n	8008f20 <_printf_i+0x15c>
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	9903      	ldr	r1, [sp, #12]
 8008fea:	1a5b      	subs	r3, r3, r1
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dcf2      	bgt.n	8008fd6 <_printf_i+0x212>
 8008ff0:	e7eb      	b.n	8008fca <_printf_i+0x206>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	f104 0619 	add.w	r6, r4, #25
 8008ff8:	e7f5      	b.n	8008fe6 <_printf_i+0x222>
 8008ffa:	bf00      	nop
 8008ffc:	080093f4 	.word	0x080093f4
 8009000:	08009405 	.word	0x08009405

08009004 <__swbuf_r>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	460e      	mov	r6, r1
 8009008:	4614      	mov	r4, r2
 800900a:	4605      	mov	r5, r0
 800900c:	b118      	cbz	r0, 8009016 <__swbuf_r+0x12>
 800900e:	6a03      	ldr	r3, [r0, #32]
 8009010:	b90b      	cbnz	r3, 8009016 <__swbuf_r+0x12>
 8009012:	f7ff fae7 	bl	80085e4 <__sinit>
 8009016:	69a3      	ldr	r3, [r4, #24]
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	071a      	lsls	r2, r3, #28
 800901e:	d501      	bpl.n	8009024 <__swbuf_r+0x20>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	b943      	cbnz	r3, 8009036 <__swbuf_r+0x32>
 8009024:	4621      	mov	r1, r4
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f82a 	bl	8009080 <__swsetup_r>
 800902c:	b118      	cbz	r0, 8009036 <__swbuf_r+0x32>
 800902e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009032:	4638      	mov	r0, r7
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6922      	ldr	r2, [r4, #16]
 800903a:	1a98      	subs	r0, r3, r2
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	b2f6      	uxtb	r6, r6
 8009040:	4283      	cmp	r3, r0
 8009042:	4637      	mov	r7, r6
 8009044:	dc05      	bgt.n	8009052 <__swbuf_r+0x4e>
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fccb 	bl	80089e4 <_fflush_r>
 800904e:	2800      	cmp	r0, #0
 8009050:	d1ed      	bne.n	800902e <__swbuf_r+0x2a>
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	3b01      	subs	r3, #1
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	701e      	strb	r6, [r3, #0]
 8009060:	6962      	ldr	r2, [r4, #20]
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	429a      	cmp	r2, r3
 8009066:	d004      	beq.n	8009072 <__swbuf_r+0x6e>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	07db      	lsls	r3, r3, #31
 800906c:	d5e1      	bpl.n	8009032 <__swbuf_r+0x2e>
 800906e:	2e0a      	cmp	r6, #10
 8009070:	d1df      	bne.n	8009032 <__swbuf_r+0x2e>
 8009072:	4621      	mov	r1, r4
 8009074:	4628      	mov	r0, r5
 8009076:	f7ff fcb5 	bl	80089e4 <_fflush_r>
 800907a:	2800      	cmp	r0, #0
 800907c:	d0d9      	beq.n	8009032 <__swbuf_r+0x2e>
 800907e:	e7d6      	b.n	800902e <__swbuf_r+0x2a>

08009080 <__swsetup_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4b29      	ldr	r3, [pc, #164]	@ (8009128 <__swsetup_r+0xa8>)
 8009084:	4605      	mov	r5, r0
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	460c      	mov	r4, r1
 800908a:	b118      	cbz	r0, 8009094 <__swsetup_r+0x14>
 800908c:	6a03      	ldr	r3, [r0, #32]
 800908e:	b90b      	cbnz	r3, 8009094 <__swsetup_r+0x14>
 8009090:	f7ff faa8 	bl	80085e4 <__sinit>
 8009094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009098:	0719      	lsls	r1, r3, #28
 800909a:	d422      	bmi.n	80090e2 <__swsetup_r+0x62>
 800909c:	06da      	lsls	r2, r3, #27
 800909e:	d407      	bmi.n	80090b0 <__swsetup_r+0x30>
 80090a0:	2209      	movs	r2, #9
 80090a2:	602a      	str	r2, [r5, #0]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ae:	e033      	b.n	8009118 <__swsetup_r+0x98>
 80090b0:	0758      	lsls	r0, r3, #29
 80090b2:	d512      	bpl.n	80090da <__swsetup_r+0x5a>
 80090b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090b6:	b141      	cbz	r1, 80090ca <__swsetup_r+0x4a>
 80090b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090bc:	4299      	cmp	r1, r3
 80090be:	d002      	beq.n	80090c6 <__swsetup_r+0x46>
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7ff fbc1 	bl	8008848 <_free_r>
 80090c6:	2300      	movs	r3, #0
 80090c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	2300      	movs	r3, #0
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f043 0308 	orr.w	r3, r3, #8
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	b94b      	cbnz	r3, 80090fa <__swsetup_r+0x7a>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f0:	d003      	beq.n	80090fa <__swsetup_r+0x7a>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f883 	bl	8009200 <__smakebuf_r>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	f013 0201 	ands.w	r2, r3, #1
 8009102:	d00a      	beq.n	800911a <__swsetup_r+0x9a>
 8009104:	2200      	movs	r2, #0
 8009106:	60a2      	str	r2, [r4, #8]
 8009108:	6962      	ldr	r2, [r4, #20]
 800910a:	4252      	negs	r2, r2
 800910c:	61a2      	str	r2, [r4, #24]
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	b942      	cbnz	r2, 8009124 <__swsetup_r+0xa4>
 8009112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009116:	d1c5      	bne.n	80090a4 <__swsetup_r+0x24>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	0799      	lsls	r1, r3, #30
 800911c:	bf58      	it	pl
 800911e:	6962      	ldrpl	r2, [r4, #20]
 8009120:	60a2      	str	r2, [r4, #8]
 8009122:	e7f4      	b.n	800910e <__swsetup_r+0x8e>
 8009124:	2000      	movs	r0, #0
 8009126:	e7f7      	b.n	8009118 <__swsetup_r+0x98>
 8009128:	2000001c 	.word	0x2000001c

0800912c <_raise_r>:
 800912c:	291f      	cmp	r1, #31
 800912e:	b538      	push	{r3, r4, r5, lr}
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	d904      	bls.n	8009140 <_raise_r+0x14>
 8009136:	2316      	movs	r3, #22
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009142:	b112      	cbz	r2, 800914a <_raise_r+0x1e>
 8009144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009148:	b94b      	cbnz	r3, 800915e <_raise_r+0x32>
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f830 	bl	80091b0 <_getpid_r>
 8009150:	4622      	mov	r2, r4
 8009152:	4601      	mov	r1, r0
 8009154:	4628      	mov	r0, r5
 8009156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915a:	f000 b817 	b.w	800918c <_kill_r>
 800915e:	2b01      	cmp	r3, #1
 8009160:	d00a      	beq.n	8009178 <_raise_r+0x4c>
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	d103      	bne.n	800916e <_raise_r+0x42>
 8009166:	2316      	movs	r3, #22
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	2001      	movs	r0, #1
 800916c:	e7e7      	b.n	800913e <_raise_r+0x12>
 800916e:	2100      	movs	r1, #0
 8009170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009174:	4620      	mov	r0, r4
 8009176:	4798      	blx	r3
 8009178:	2000      	movs	r0, #0
 800917a:	e7e0      	b.n	800913e <_raise_r+0x12>

0800917c <raise>:
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <raise+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f7ff bfd3 	b.w	800912c <_raise_r>
 8009186:	bf00      	nop
 8009188:	2000001c 	.word	0x2000001c

0800918c <_kill_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	@ (80091ac <_kill_r+0x20>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	f7f8 f859 	bl	8001250 <_kill>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	d102      	bne.n	80091a8 <_kill_r+0x1c>
 80091a2:	682b      	ldr	r3, [r5, #0]
 80091a4:	b103      	cbz	r3, 80091a8 <_kill_r+0x1c>
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	bd38      	pop	{r3, r4, r5, pc}
 80091aa:	bf00      	nop
 80091ac:	20005010 	.word	0x20005010

080091b0 <_getpid_r>:
 80091b0:	f7f8 b846 	b.w	8001240 <_getpid>

080091b4 <__swhatbuf_r>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091bc:	2900      	cmp	r1, #0
 80091be:	b096      	sub	sp, #88	@ 0x58
 80091c0:	4615      	mov	r5, r2
 80091c2:	461e      	mov	r6, r3
 80091c4:	da0d      	bge.n	80091e2 <__swhatbuf_r+0x2e>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091cc:	f04f 0100 	mov.w	r1, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2340      	movne	r3, #64	@ 0x40
 80091d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091d8:	2000      	movs	r0, #0
 80091da:	6031      	str	r1, [r6, #0]
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	b016      	add	sp, #88	@ 0x58
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
 80091e2:	466a      	mov	r2, sp
 80091e4:	f000 f848 	bl	8009278 <_fstat_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dbec      	blt.n	80091c6 <__swhatbuf_r+0x12>
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091f6:	4259      	negs	r1, r3
 80091f8:	4159      	adcs	r1, r3
 80091fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091fe:	e7eb      	b.n	80091d8 <__swhatbuf_r+0x24>

08009200 <__smakebuf_r>:
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009204:	079d      	lsls	r5, r3, #30
 8009206:	4606      	mov	r6, r0
 8009208:	460c      	mov	r4, r1
 800920a:	d507      	bpl.n	800921c <__smakebuf_r+0x1c>
 800920c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	2301      	movs	r3, #1
 8009216:	6163      	str	r3, [r4, #20]
 8009218:	b003      	add	sp, #12
 800921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921c:	ab01      	add	r3, sp, #4
 800921e:	466a      	mov	r2, sp
 8009220:	f7ff ffc8 	bl	80091b4 <__swhatbuf_r>
 8009224:	9f00      	ldr	r7, [sp, #0]
 8009226:	4605      	mov	r5, r0
 8009228:	4639      	mov	r1, r7
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff f856 	bl	80082dc <_malloc_r>
 8009230:	b948      	cbnz	r0, 8009246 <__smakebuf_r+0x46>
 8009232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009236:	059a      	lsls	r2, r3, #22
 8009238:	d4ee      	bmi.n	8009218 <__smakebuf_r+0x18>
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0302 	orr.w	r3, r3, #2
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	e7e2      	b.n	800920c <__smakebuf_r+0xc>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	6020      	str	r0, [r4, #0]
 800924a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009256:	b15b      	cbz	r3, 8009270 <__smakebuf_r+0x70>
 8009258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800925c:	4630      	mov	r0, r6
 800925e:	f000 f81d 	bl	800929c <_isatty_r>
 8009262:	b128      	cbz	r0, 8009270 <__smakebuf_r+0x70>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f023 0303 	bic.w	r3, r3, #3
 800926a:	f043 0301 	orr.w	r3, r3, #1
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	431d      	orrs	r5, r3
 8009274:	81a5      	strh	r5, [r4, #12]
 8009276:	e7cf      	b.n	8009218 <__smakebuf_r+0x18>

08009278 <_fstat_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	@ (8009298 <_fstat_r+0x20>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	f7f8 f843 	bl	8001310 <_fstat>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d102      	bne.n	8009294 <_fstat_r+0x1c>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b103      	cbz	r3, 8009294 <_fstat_r+0x1c>
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	bd38      	pop	{r3, r4, r5, pc}
 8009296:	bf00      	nop
 8009298:	20005010 	.word	0x20005010

0800929c <_isatty_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d06      	ldr	r5, [pc, #24]	@ (80092b8 <_isatty_r+0x1c>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	f7f8 f842 	bl	8001330 <_isatty>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_isatty_r+0x1a>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_isatty_r+0x1a>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20005010 	.word	0x20005010

080092bc <_init>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr

080092c8 <_fini>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr
