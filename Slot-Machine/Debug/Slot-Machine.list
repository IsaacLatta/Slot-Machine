
Slot-Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d7c  08007d7c  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d84  08007d84  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007d8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00004e4c  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004e5c  20004e5c  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1e0  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000419e  00000000  00000000  00024220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  000283c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f9  00000000  00000000  00029b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043e6  00000000  00000000  0002ad19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9e6  00000000  00000000  0002f0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4e51  00000000  00000000  0004aae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f936  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000630c  00000000  00000000  0011f97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00125c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cfc 	.word	0x08007cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007cfc 	.word	0x08007cfc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fce5 	bl	8000e94 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f857 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f953 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8bd 	bl	8000650 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8e9 	bl	80006ac <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f917 	bl	800070c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004de:	f004 fdeb 	bl	80050b8 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	200a      	movs	r0, #10
 80004e8:	f005 f839 	bl	800555e <xQueueGenericCreate>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <main+0x9c>)
 80004f0:	6013      	str	r3, [r2, #0]
  xAnimationQueue = xQueueCreate(5, sizeof(Animation_t));
 80004f2:	2200      	movs	r2, #0
 80004f4:	2104      	movs	r1, #4
 80004f6:	2005      	movs	r0, #5
 80004f8:	f005 f831 	bl	800555e <xQueueGenericCreate>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <main+0xa0>)
 8000500:	6013      	str	r3, [r2, #0]
  if(xEventQueue == NULL || xAnimationQueue == NULL) {
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <main+0x9c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <main+0x52>
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <main+0xa0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <main+0x56>
	  Error_Handler();
 8000512:	f000 faf5 	bl	8000b00 <Error_Handler>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(AnimateTask, "Animator", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 8000516:	2300      	movs	r3, #0
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	4910      	ldr	r1, [pc, #64]	@ (8000564 <main+0xa4>)
 8000524:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0xa8>)
 8000526:	f005 fcc9 	bl	8005ebc <xTaskCreate>
  xTaskCreate(PollButtonTask, "PollButton", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <main+0xac>)
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <main+0xb0>)
 800053a:	f005 fcbf 	bl	8005ebc <xTaskCreate>
  xTaskCreate(StateMachineTask, "HandleStateLogic", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +2, NULL);
 800053e:	2300      	movs	r3, #0
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2302      	movs	r3, #2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2380      	movs	r3, #128	@ 0x80
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	490a      	ldr	r1, [pc, #40]	@ (8000574 <main+0xb4>)
 800054c:	480a      	ldr	r0, [pc, #40]	@ (8000578 <main+0xb8>)
 800054e:	f005 fcb5 	bl	8005ebc <xTaskCreate>
  vTaskStartScheduler();
 8000552:	f005 fe2f 	bl	80061b4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x96>
 800055a:	bf00      	nop
 800055c:	20000120 	.word	0x20000120
 8000560:	20000124 	.word	0x20000124
 8000564:	08007d20 	.word	0x08007d20
 8000568:	080009ed 	.word	0x080009ed
 800056c:	08007d2c 	.word	0x08007d2c
 8000570:	08000a3d 	.word	0x08000a3d
 8000574:	08007d38 	.word	0x08007d38
 8000578:	08000a91 	.word	0x08000a91

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fb7c 	bl	8007c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	@ (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fb10 	bl	8003c28 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060e:	f000 fa77 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2105      	movs	r1, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fd71 	bl	8004118 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800063c:	f000 fa60 	bl	8000b00 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	@ 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f002 fce7 	bl	8003060 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 fa32 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <MX_I2S3_Init+0x58>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <MX_I2S3_Init+0x5c>)
 80006d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_I2S3_Init+0x54>)
 80006ec:	f002 fdfc 	bl	80032e8 <HAL_I2S_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006f6:	f000 fa03 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000080 	.word	0x20000080
 8000704:	40003c00 	.word	0x40003c00
 8000708:	00017700 	.word	0x00017700

0800070c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	@ (8000774 <MX_SPI1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800073c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_SPI1_Init+0x64>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_SPI1_Init+0x64>)
 800075e:	f004 f829 	bl	80047b4 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f9ca 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000c8 	.word	0x200000c8
 8000774:	40013000 	.word	0x40013000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	@ 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4b71      	ldr	r3, [pc, #452]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a70      	ldr	r2, [pc, #448]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b6e      	ldr	r3, [pc, #440]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a69      	ldr	r2, [pc, #420]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b67      	ldr	r3, [pc, #412]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b63      	ldr	r3, [pc, #396]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a62      	ldr	r2, [pc, #392]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b60      	ldr	r3, [pc, #384]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a5b      	ldr	r2, [pc, #364]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b59      	ldr	r3, [pc, #356]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b55      	ldr	r3, [pc, #340]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a54      	ldr	r2, [pc, #336]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b52      	ldr	r3, [pc, #328]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a4d      	ldr	r2, [pc, #308]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b4b      	ldr	r3, [pc, #300]	@ (8000958 <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4848      	ldr	r0, [pc, #288]	@ (800095c <MX_GPIO_Init+0x1e4>)
 800083c:	f000 fe36 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4846      	ldr	r0, [pc, #280]	@ (8000960 <MX_GPIO_Init+0x1e8>)
 8000846:	f000 fe31 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000850:	4844      	ldr	r0, [pc, #272]	@ (8000964 <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fe2b 	bl	80014ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	483b      	ldr	r0, [pc, #236]	@ (800095c <MX_GPIO_Init+0x1e4>)
 800086e:	f000 fc69 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4835      	ldr	r0, [pc, #212]	@ (8000960 <MX_GPIO_Init+0x1e8>)
 800088a:	f000 fc5b 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	482d      	ldr	r0, [pc, #180]	@ (8000960 <MX_GPIO_Init+0x1e8>)
 80008aa:	f000 fc4b 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4829      	ldr	r0, [pc, #164]	@ (8000968 <MX_GPIO_Init+0x1f0>)
 80008c2:	f000 fc3f 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c6:	2304      	movs	r3, #4
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4824      	ldr	r0, [pc, #144]	@ (800096c <MX_GPIO_Init+0x1f4>)
 80008da:	f000 fc33 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f0:	2305      	movs	r3, #5
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	@ (800096c <MX_GPIO_Init+0x1f4>)
 80008fc:	f000 fc22 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000900:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000904:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fc13 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091e:	2320      	movs	r3, #32
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_GPIO_Init+0x1ec>)
 8000932:	f000 fc07 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000936:	2302      	movs	r3, #2
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_GPIO_Init+0x1e4>)
 800094c:	f000 fbfa 	bl	8001144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	@ 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40021000 	.word	0x40021000
 8000960:	40020800 	.word	0x40020800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <animation>:

/* USER CODE BEGIN 4 */

static void animation(void* args) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097e:	481a      	ldr	r0, [pc, #104]	@ (80009e8 <animation+0x78>)
 8000980:	f000 fd94 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098a:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <animation+0x78>)
 800098c:	f000 fd8e 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <animation+0x78>)
 8000998:	f000 fd88 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a2:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <animation+0x78>)
 80009a4:	f000 fd82 	bl	80014ac <HAL_GPIO_WritePin>

	vTaskDelay(pdMS_TO_TICKS(500));
 80009a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ac:	f005 fbcc 	bl	8006148 <vTaskDelay>

	HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <animation+0x78>)
 80009b8:	f000 fd78 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <animation+0x78>)
 80009c4:	f000 fd72 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ce:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <animation+0x78>)
 80009d0:	f000 fd6c 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <animation+0x78>)
 80009dc:	f000 fd66 	bl	80014ac <HAL_GPIO_WritePin>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020c00 	.word	0x40020c00

080009ec <AnimateTask>:

void AnimateTask(void *args) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	Animation_t next;
	SystemEvent_t evt;
	for(;;) {
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <AnimateTask+0x48>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f107 0114 	add.w	r1, r7, #20
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 ffab 	bl	800595c <xQueueReceive>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10e      	bne.n	8000a2a <AnimateTask+0x3e>
			next.animation(NULL);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2000      	movs	r0, #0
 8000a10:	4798      	blx	r3

			evt.type = EVT_ANIM_COMPLETE;
 8000a12:	2302      	movs	r3, #2
 8000a14:	733b      	strb	r3, [r7, #12]
			evt.args = NULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
			xQueueSend(xEventQueue, &evt, 0);
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <AnimateTask+0x4c>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f107 010c 	add.w	r1, r7, #12
 8000a22:	2300      	movs	r3, #0
 8000a24:	2200      	movs	r2, #0
 8000a26:	f004 fdf9 	bl	800561c <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8000a2a:	2032      	movs	r0, #50	@ 0x32
 8000a2c:	f005 fb8c 	bl	8006148 <vTaskDelay>
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000a30:	e7e0      	b.n	80009f4 <AnimateTask+0x8>
 8000a32:	bf00      	nop
 8000a34:	20000124 	.word	0x20000124
 8000a38:	20000120 	.word	0x20000120

08000a3c <PollButtonTask>:
	}
}

void PollButtonTask(void *args) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	for(;;) {
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000a44:	2101      	movs	r1, #1
 8000a46:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <PollButtonTask+0x48>)
 8000a48:	f000 fd18 	bl	800147c <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d113      	bne.n	8000a7a <PollButtonTask+0x3e>
			HAL_GPIO_TogglePin(LED_PORT, BLUE_LED_PIN);
 8000a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a56:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <PollButtonTask+0x4c>)
 8000a58:	f000 fd41 	bl	80014de <HAL_GPIO_TogglePin>
			evt.type = EVT_BUTTON_PRESS;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]

			xQueueSend(xEventQueue, &evt, 0);
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <PollButtonTask+0x50>)
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	f107 0108 	add.w	r1, r7, #8
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f004 fdd4 	bl	800561c <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(200)); // Debounce
 8000a74:	20c8      	movs	r0, #200	@ 0xc8
 8000a76:	f005 fb67 	bl	8006148 <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 8000a7a:	20c8      	movs	r0, #200	@ 0xc8
 8000a7c:	f005 fb64 	bl	8006148 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000a80:	e7e0      	b.n	8000a44 <PollButtonTask+0x8>
 8000a82:	bf00      	nop
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	20000120 	.word	0x20000120

08000a90 <StateMachineTask>:
	}
}

void StateMachineTask(void *args) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	EventType_t next = EVT_ANY;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75fb      	strb	r3, [r7, #23]
	Animation_t nextAnim;
	nextAnim.animation = animation;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <StateMachineTask+0x64>)
 8000a9e:	60bb      	str	r3, [r7, #8]
	for(;;) {
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <StateMachineTask+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f107 010c 	add.w	r1, r7, #12
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 ff55 	bl	800595c <xQueueReceive>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1f3      	bne.n	8000aa0 <StateMachineTask+0x10>
			if(next != EVT_ANY && next != evt.type) {
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <StateMachineTask+0x36>
 8000abe:	7b3b      	ldrb	r3, [r7, #12]
 8000ac0:	7dfa      	ldrb	r2, [r7, #23]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d114      	bne.n	8000af0 <StateMachineTask+0x60>
				continue; // Do not process
			}

			// Process
			switch (evt.type) {
 8000ac6:	7b3b      	ldrb	r3, [r7, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d002      	beq.n	8000ad2 <StateMachineTask+0x42>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d00c      	beq.n	8000aea <StateMachineTask+0x5a>
 8000ad0:	e00f      	b.n	8000af2 <StateMachineTask+0x62>
			case EVT_BUTTON_PRESS:
				next = EVT_ANIM_COMPLETE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	75fb      	strb	r3, [r7, #23]
				xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <StateMachineTask+0x6c>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f107 0108 	add.w	r1, r7, #8
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ae4:	f004 fd9a 	bl	800561c <xQueueGenericSend>
				break;
 8000ae8:	e003      	b.n	8000af2 <StateMachineTask+0x62>
			case EVT_ANIM_COMPLETE:
				next = EVT_ANY;
 8000aea:	2300      	movs	r3, #0
 8000aec:	75fb      	strb	r3, [r7, #23]
				break;
 8000aee:	e000      	b.n	8000af2 <StateMachineTask+0x62>
				continue; // Do not process
 8000af0:	bf00      	nop
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000af2:	e7d5      	b.n	8000aa0 <StateMachineTask+0x10>
 8000af4:	08000971 	.word	0x08000971
 8000af8:	20000120 	.word	0x20000120
 8000afc:	20000124 	.word	0x20000124

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000b08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <Error_Handler+0x3c>)
 8000b0e:	f000 fce6 	bl	80014de <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <Error_Handler+0x3c>)
 8000b1a:	f000 fcc7 	bl	80014ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <Error_Handler+0x3c>)
 8000b26:	f000 fcc1 	bl	80014ac <HAL_GPIO_WritePin>
   	  HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <Error_Handler+0x3c>)
 8000b32:	f000 fcbb 	bl	80014ac <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000b36:	bf00      	nop
 8000b38:	e7e6      	b.n	8000b08 <Error_Handler+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a11      	ldr	r2, [pc, #68]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fab4 	bl	80010f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <HAL_I2C_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be8:	2304      	movs	r3, #4
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <HAL_I2C_MspInit+0x8c>)
 8000bf4:	f000 faa6 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	@ 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a31      	ldr	r2, [pc, #196]	@ (8000d18 <HAL_I2S_MspInit+0xf0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d15a      	bne.n	8000d0e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c5c:	23c0      	movs	r3, #192	@ 0xc0
 8000c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fc61 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c74:	f7ff ff44 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a18      	ldr	r2, [pc, #96]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_I2S_MspInit+0xf4>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <HAL_I2S_MspInit+0xf8>)
 8000ce8:	f000 fa2c 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <HAL_I2S_MspInit+0xfc>)
 8000d0a:	f000 fa1b 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	3738      	adds	r7, #56	@ 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40003c00 	.word	0x40003c00
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020800 	.word	0x40020800

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	@ (8000dac <HAL_SPI_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d82:	23e0      	movs	r3, #224	@ 0xe0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	f000 f9d1 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40013000 	.word	0x40013000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df2:	f000 f8a1 	bl	8000f38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000df6:	f005 fe2b 	bl	8006a50 <xTaskGetSchedulerState>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d001      	beq.n	8000e04 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e00:	f006 fc22 	bl	8007648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <OTG_FS_IRQHandler+0x10>)
 8000e0e:	f000 fb80 	bl	8001512 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20004a7c 	.word	0x20004a7c

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f006 ff13 	bl	8007c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb25 	bl	80004c0 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e84:	08007d8c 	.word	0x08007d8c
  ldr r2, =_sbss
 8000e88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e8c:	20004e5c 	.word	0x20004e5c

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f90d 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe3a 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f917 	bl	800112a <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f14:	f000 f8ed 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	@ (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000128 	.word	0x20000128

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000128 	.word	0x20000128

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e16b      	b.n	8001438 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 815a 	bne.w	8001432 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80b4 	beq.w	8001432 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001450 <HAL_GPIO_Init+0x30c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001454 <HAL_GPIO_Init+0x310>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	@ (8001458 <HAL_GPIO_Init+0x314>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	@ (800145c <HAL_GPIO_Init+0x318>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	@ (8001460 <HAL_GPIO_Init+0x31c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	@ (8001464 <HAL_GPIO_Init+0x320>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x21a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_GPIO_Init+0x324>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x216>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	@ (800146c <HAL_GPIO_Init+0x328>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x212>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	@ (8001470 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	@ (8001474 <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x20a>
 800134a:	2307      	movs	r3, #7
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x228>
 800134e:	2308      	movs	r3, #8
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x228>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	@ (8001454 <HAL_GPIO_Init+0x310>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_GPIO_Init+0x334>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <HAL_GPIO_Init+0x334>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013de:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <HAL_GPIO_Init+0x334>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <HAL_GPIO_Init+0x334>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_GPIO_Init+0x334>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <HAL_GPIO_Init+0x334>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae90 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f0:	887a      	ldrh	r2, [r7, #2]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	400b      	ands	r3, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fada 	bl	8004ae2 <USB_GetMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 80fb 	bne.w	800172c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fa9d 	bl	8004a7a <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80f1 	beq.w	800172a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fa94 	bl	8004a7a <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800155c:	d104      	bne.n	8001568 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001566:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fa84 	bl	8004a7a <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800157c:	d104      	bne.n	8001588 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001586:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fa74 	bl	8004a7a <USB_ReadInterrupts>
 8001592:	4603      	mov	r3, r0
 8001594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800159c:	d104      	bne.n	80015a8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015a6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fa64 	bl	8004a7a <USB_ReadInterrupts>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d103      	bne.n	80015c4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2202      	movs	r2, #2
 80015c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fa56 	bl	8004a7a <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d8:	d120      	bne.n	800161c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015e2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d113      	bne.n	800161c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015f4:	2110      	movs	r1, #16
 80015f6:	6938      	ldr	r0, [r7, #16]
 80015f8:	f003 f987 	bl	800490a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015fc:	6938      	ldr	r0, [r7, #16]
 80015fe:	f003 f9b6 	bl	800496e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7a5b      	ldrb	r3, [r3, #9]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d105      	bne.n	8001616 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fa74 	bl	8004afe <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f006 fab2 	bl	8007b80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fa2a 	bl	8004a7a <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001630:	d102      	bne.n	8001638 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 fca1 	bl	8002f7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fa1c 	bl	8004a7a <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b08      	cmp	r3, #8
 800164a:	d106      	bne.n	800165a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f006 fa7b 	bl	8007b48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2208      	movs	r2, #8
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fa0b 	bl	8004a7a <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800166e:	d139      	bne.n	80016e4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fa7f 	bl	8004b78 <USB_HC_ReadInterrupt>
 800167a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e025      	b.n	80016ce <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d018      	beq.n	80016c8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016ac:	d106      	bne.n	80016bc <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f859 	bl	800176c <HCD_HC_IN_IRQHandler>
 80016ba:	e005      	b.n	80016c8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 febb 	bl	800243e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d3d3      	bcc.n	8001682 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f9c6 	bl	8004a7a <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d101      	bne.n	80016fc <HAL_HCD_IRQHandler+0x1ea>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_HCD_IRQHandler+0x1ec>
 80016fc:	2300      	movs	r3, #0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d014      	beq.n	800172c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0210 	bic.w	r2, r2, #16
 8001710:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 fb52 	bl	8002dbc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	e000      	b.n	800172c <HAL_HCD_IRQHandler+0x21a>
      return;
 800172a:	bf00      	nop
    }
  }
}
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_HCD_Stop+0x16>
 8001744:	2302      	movs	r3, #2
 8001746:	e00d      	b.n	8001764 <HAL_HCD_Stop+0x32>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fb40 	bl	8004dda <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f988 	bl	8004aa0 <USB_ReadChInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d11a      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017a6:	461a      	mov	r2, r3
 80017a8:	2304      	movs	r3, #4
 80017aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	334d      	adds	r3, #77	@ 0x4d
 80017bc:	2207      	movs	r2, #7
 80017be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f9e6 	bl	8004b9a <USB_HC_Halt>
 80017ce:	e09e      	b.n	800190e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 f961 	bl	8004aa0 <USB_ReadChInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e8:	d11b      	bne.n	8001822 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017f6:	461a      	mov	r2, r3
 80017f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	334d      	adds	r3, #77	@ 0x4d
 800180e:	2208      	movs	r2, #8
 8001810:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f9bd 	bl	8004b9a <USB_HC_Halt>
 8001820:	e075      	b.n	800190e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f003 f938 	bl	8004aa0 <USB_ReadChInterrupts>
 8001830:	4603      	mov	r3, r0
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11a      	bne.n	8001870 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001846:	461a      	mov	r2, r3
 8001848:	2308      	movs	r3, #8
 800184a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	334d      	adds	r3, #77	@ 0x4d
 800185c:	2206      	movs	r2, #6
 800185e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f996 	bl	8004b9a <USB_HC_Halt>
 800186e:	e04e      	b.n	800190e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f911 	bl	8004aa0 <USB_ReadChInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001888:	d11b      	bne.n	80018c2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4413      	add	r3, r2
 8001892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001896:	461a      	mov	r2, r3
 8001898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	334d      	adds	r3, #77	@ 0x4d
 80018ae:	2209      	movs	r2, #9
 80018b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 f96d 	bl	8004b9a <USB_HC_Halt>
 80018c0:	e025      	b.n	800190e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 f8e8 	bl	8004aa0 <USB_ReadChInterrupts>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d6:	2b80      	cmp	r3, #128	@ 0x80
 80018d8:	d119      	bne.n	800190e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018e6:	461a      	mov	r2, r3
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	334d      	adds	r3, #77	@ 0x4d
 80018fc:	2207      	movs	r2, #7
 80018fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f003 f946 	bl	8004b9a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f8c2 	bl	8004aa0 <USB_ReadChInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d112      	bne.n	800194e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f932 	bl	8004b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4413      	add	r3, r2
 800193e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001948:	6093      	str	r3, [r2, #8]
 800194a:	f000 bd75 	b.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f8a2 	bl	8004aa0 <USB_ReadChInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 8128 	bne.w	8001bb8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001974:	461a      	mov	r2, r3
 8001976:	2320      	movs	r3, #32
 8001978:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	331b      	adds	r3, #27
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d119      	bne.n	80019c4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	331b      	adds	r3, #27
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	0151      	lsls	r1, r2, #5
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	440a      	add	r2, r1
 80019ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	799b      	ldrb	r3, [r3, #6]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3330      	adds	r3, #48	@ 0x30
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	1ac9      	subs	r1, r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4403      	add	r3, r0
 8001a00:	3338      	adds	r3, #56	@ 0x38
 8001a02:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	334d      	adds	r3, #77	@ 0x4d
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3344      	adds	r3, #68	@ 0x44
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3326      	adds	r3, #38	@ 0x26
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3326      	adds	r3, #38	@ 0x26
 8001a64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d110      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 f891 	bl	8004b9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a84:	461a      	mov	r2, r3
 8001a86:	2310      	movs	r3, #16
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	e03d      	b.n	8001b08 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3326      	adds	r3, #38	@ 0x26
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d00a      	beq.n	8001ab8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3326      	adds	r3, #38	@ 0x26
 8001ab2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d127      	bne.n	8001b08 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	0151      	lsls	r1, r2, #5
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	440a      	add	r2, r1
 8001ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ad2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ad6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	334c      	adds	r3, #76	@ 0x4c
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	334c      	adds	r3, #76	@ 0x4c
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f006 f84a 	bl	8007b9c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	799b      	ldrb	r3, [r3, #6]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d13b      	bne.n	8001b88 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3338      	adds	r3, #56	@ 0x38
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4403      	add	r3, r0
 8001b30:	3328      	adds	r3, #40	@ 0x28
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	440b      	add	r3, r1
 8001b36:	1e59      	subs	r1, r3, #1
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	3328      	adds	r3, #40	@ 0x28
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8470 	beq.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	333c      	adds	r3, #60	@ 0x3c
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2d8      	uxtb	r0, r3
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	@ 0x3c
 8001b80:	4602      	mov	r2, r0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	f000 bc58 	b.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	333c      	adds	r3, #60	@ 0x3c
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2d8      	uxtb	r0, r3
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	333c      	adds	r3, #60	@ 0x3c
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	f000 bc40 	b.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 ff6d 	bl	8004aa0 <USB_ReadChInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d131      	bne.n	8001c34 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2320      	movs	r3, #32
 8001be0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	331a      	adds	r3, #26
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	f040 841f 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	331b      	adds	r3, #27
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	334d      	adds	r3, #77	@ 0x4d
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ffb5 	bl	8004b9a <USB_HC_Halt>
 8001c30:	f000 bc02 	b.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 ff2f 	bl	8004aa0 <USB_ReadChInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	f040 8305 	bne.w	8002258 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	334d      	adds	r3, #77	@ 0x4d
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d114      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	334d      	adds	r3, #77	@ 0x4d
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	334c      	adds	r3, #76	@ 0x4c
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	e2cc      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	334d      	adds	r3, #77	@ 0x4d
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d114      	bne.n	8001ce0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	334d      	adds	r3, #77	@ 0x4d
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	334c      	adds	r3, #76	@ 0x4c
 8001cda:	2205      	movs	r2, #5
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e2ac      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	334d      	adds	r3, #77	@ 0x4d
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d00b      	beq.n	8001d0e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	334d      	adds	r3, #77	@ 0x4d
 8001d06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	f040 80a6 	bne.w	8001e5a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	334d      	adds	r3, #77	@ 0x4d
 8001d1e:	2202      	movs	r2, #2
 8001d20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3344      	adds	r3, #68	@ 0x44
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4403      	add	r3, r0
 8001d42:	3344      	adds	r3, #68	@ 0x44
 8001d44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3344      	adds	r3, #68	@ 0x44
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d943      	bls.n	8001de4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3344      	adds	r3, #68	@ 0x44
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	331a      	adds	r3, #26
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d123      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	331b      	adds	r3, #27
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	331c      	adds	r3, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	0151      	lsls	r1, r2, #5
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	440a      	add	r2, r1
 8001dc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	334c      	adds	r3, #76	@ 0x4c
 8001dde:	2204      	movs	r2, #4
 8001de0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001de2:	e229      	b.n	8002238 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	334c      	adds	r3, #76	@ 0x4c
 8001df4:	2202      	movs	r2, #2
 8001df6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3326      	adds	r3, #38	@ 0x26
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3326      	adds	r3, #38	@ 0x26
 8001e1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	f040 8209 	bne.w	8002238 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e58:	e1ee      	b.n	8002238 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	334d      	adds	r3, #77	@ 0x4d
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	f040 80c8 	bne.w	8002002 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	334d      	adds	r3, #77	@ 0x4d
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	331b      	adds	r3, #27
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f040 81ce 	bne.w	800223a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3326      	adds	r3, #38	@ 0x26
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d16b      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3348      	adds	r3, #72	@ 0x48
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	1c59      	adds	r1, r3, #1
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4403      	add	r3, r0
 8001ed4:	3348      	adds	r3, #72	@ 0x48
 8001ed6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3348      	adds	r3, #72	@ 0x48
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d943      	bls.n	8001f76 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3348      	adds	r3, #72	@ 0x48
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	331b      	adds	r3, #27
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3344      	adds	r3, #68	@ 0x44
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d809      	bhi.n	8001f40 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	331c      	adds	r3, #28
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	0151      	lsls	r1, r2, #5
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	440a      	add	r2, r1
 8001f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	334c      	adds	r3, #76	@ 0x4c
 8001f70:	2204      	movs	r2, #4
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e014      	b.n	8001fa0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	334c      	adds	r3, #76	@ 0x4c
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e009      	b.n	8001fa0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	334c      	adds	r3, #76	@ 0x4c
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3326      	adds	r3, #38	@ 0x26
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3326      	adds	r3, #38	@ 0x26
 8001fc6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f040 8136 	bne.w	800223a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001fe4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e11b      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	334d      	adds	r3, #77	@ 0x4d
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b03      	cmp	r3, #3
 8002016:	f040 8081 	bne.w	800211c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	334d      	adds	r3, #77	@ 0x4d
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	331b      	adds	r3, #27
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 80fa 	bne.w	800223a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334c      	adds	r3, #76	@ 0x4c
 8002056:	2202      	movs	r2, #2
 8002058:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	0151      	lsls	r1, r2, #5
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	440a      	add	r2, r1
 8002070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	0151      	lsls	r1, r2, #5
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	440a      	add	r2, r1
 8002090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002098:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020b4:	f023 0320 	bic.w	r3, r3, #32
 80020b8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3326      	adds	r3, #38	@ 0x26
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3326      	adds	r3, #38	@ 0x26
 80020e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 80a9 	bne.w	800223a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002106:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e08e      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	334d      	adds	r3, #77	@ 0x4d
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d143      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	334d      	adds	r3, #77	@ 0x4d
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334c      	adds	r3, #76	@ 0x4c
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3326      	adds	r3, #38	@ 0x26
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3326      	adds	r3, #38	@ 0x26
 8002180:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002182:	2b02      	cmp	r3, #2
 8002184:	d159      	bne.n	800223a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800219c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021a4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e03f      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	334d      	adds	r3, #77	@ 0x4d
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d126      	bne.n	800221e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	334d      	adds	r3, #77	@ 0x4d
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3344      	adds	r3, #68	@ 0x44
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	3344      	adds	r3, #68	@ 0x44
 8002206:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	334c      	adds	r3, #76	@ 0x4c
 8002218:	2204      	movs	r2, #4
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e00d      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	334d      	adds	r3, #77	@ 0x4d
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f000 8100 	beq.w	8002436 <HCD_HC_IN_IRQHandler+0xcca>
 8002236:	e000      	b.n	800223a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002238:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334c      	adds	r3, #76	@ 0x4c
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f005 fca3 	bl	8007b9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002256:	e0ef      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fc1d 	bl	8004aa0 <USB_ReadChInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b40      	cmp	r3, #64	@ 0x40
 800226e:	d12f      	bne.n	80022d0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	@ 0x4d
 8002292:	2205      	movs	r2, #5
 8002294:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	331a      	adds	r3, #26
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3344      	adds	r3, #68	@ 0x44
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fc66 	bl	8004b9a <USB_HC_Halt>
 80022ce:	e0b3      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 fbe1 	bl	8004aa0 <USB_ReadChInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	f040 80a7 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3326      	adds	r3, #38	@ 0x26
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d11b      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3344      	adds	r3, #68	@ 0x44
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334d      	adds	r3, #77	@ 0x4d
 8002324:	2204      	movs	r2, #4
 8002326:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f002 fc32 	bl	8004b9a <USB_HC_Halt>
 8002336:	e03f      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3326      	adds	r3, #38	@ 0x26
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3326      	adds	r3, #38	@ 0x26
 800235e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002360:	2b02      	cmp	r3, #2
 8002362:	d129      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3344      	adds	r3, #68	@ 0x44
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	799b      	ldrb	r3, [r3, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HCD_HC_IN_IRQHandler+0xc2a>
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	331b      	adds	r3, #27
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d110      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334d      	adds	r3, #77	@ 0x4d
 80023a6:	2204      	movs	r2, #4
 80023a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fbf1 	bl	8004b9a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	331b      	adds	r3, #27
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d129      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	331b      	adds	r3, #27
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	0151      	lsls	r1, r2, #5
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	440a      	add	r2, r1
 80023f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002400:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	440a      	add	r2, r1
 8002418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242e:	461a      	mov	r2, r3
 8002430:	2310      	movs	r3, #16
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	e000      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002436:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fb1f 	bl	8004aa0 <USB_ReadChInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2304      	movs	r3, #4
 800247c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	334d      	adds	r3, #77	@ 0x4d
 800248e:	2207      	movs	r2, #7
 8002490:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fb7d 	bl	8004b9a <USB_HC_Halt>
 80024a0:	f000 bc89 	b.w	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 faf7 	bl	8004aa0 <USB_ReadChInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	f040 8082 	bne.w	80025c2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2320      	movs	r3, #32
 80024ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3319      	adds	r3, #25
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d124      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3319      	adds	r3, #25
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334c      	adds	r3, #76	@ 0x4c
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	334d      	adds	r3, #77	@ 0x4d
 800251e:	2203      	movs	r2, #3
 8002520:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fb35 	bl	8004b9a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	331a      	adds	r3, #26
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 8437 	bne.w	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	331b      	adds	r3, #27
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 842b 	bne.w	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3326      	adds	r3, #38	@ 0x26
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d009      	beq.n	800258a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	331b      	adds	r3, #27
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	334d      	adds	r3, #77	@ 0x4d
 800259a:	2203      	movs	r2, #3
 800259c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 faf7 	bl	8004b9a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3344      	adds	r3, #68	@ 0x44
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e3f9      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fa68 	bl	8004aa0 <USB_ReadChInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025da:	d111      	bne.n	8002600 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 face 	bl	8004b9a <USB_HC_Halt>
 80025fe:	e3da      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fa49 	bl	8004aa0 <USB_ReadChInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d168      	bne.n	80026ea <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3344      	adds	r3, #68	@ 0x44
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fa33 	bl	8004aa0 <USB_ReadChInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d112      	bne.n	800266a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3319      	adds	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2340      	movs	r3, #64	@ 0x40
 8002668:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	331b      	adds	r3, #27
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d019      	beq.n	80026b4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	331b      	adds	r3, #27
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	334d      	adds	r3, #77	@ 0x4d
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fa59 	bl	8004b9a <USB_HC_Halt>
 80026e8:	e365      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 f9d4 	bl	8004aa0 <USB_ReadChInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b40      	cmp	r3, #64	@ 0x40
 8002700:	d139      	bne.n	8002776 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	334d      	adds	r3, #77	@ 0x4d
 8002712:	2205      	movs	r2, #5
 8002714:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	331a      	adds	r3, #26
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3319      	adds	r3, #25
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3344      	adds	r3, #68	@ 0x44
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fa1c 	bl	8004b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2340      	movs	r3, #64	@ 0x40
 8002772:	6093      	str	r3, [r2, #8]
 8002774:	e31f      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f002 f98e 	bl	8004aa0 <USB_ReadChInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11a      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334d      	adds	r3, #77	@ 0x4d
 80027b0:	2206      	movs	r2, #6
 80027b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 f9ec 	bl	8004b9a <USB_HC_Halt>
 80027c2:	e2f8      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 f967 	bl	8004aa0 <USB_ReadChInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d144      	bne.n	8002866 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3344      	adds	r3, #68	@ 0x44
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	334d      	adds	r3, #77	@ 0x4d
 8002800:	2204      	movs	r2, #4
 8002802:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3319      	adds	r3, #25
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3318      	adds	r3, #24
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3319      	adds	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f002 f9a4 	bl	8004b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	461a      	mov	r2, r3
 8002860:	2310      	movs	r3, #16
 8002862:	6093      	str	r3, [r2, #8]
 8002864:	e2a7      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f002 f916 	bl	8004aa0 <USB_ReadChInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287a:	2b80      	cmp	r3, #128	@ 0x80
 800287c:	f040 8083 	bne.w	8002986 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334d      	adds	r3, #77	@ 0x4d
 8002898:	2207      	movs	r2, #7
 800289a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 f978 	bl	8004b9a <USB_HC_Halt>
 80028aa:	e062      	b.n	8002972 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3344      	adds	r3, #68	@ 0x44
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4403      	add	r3, r0
 80028cc:	3344      	adds	r3, #68	@ 0x44
 80028ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3344      	adds	r3, #68	@ 0x44
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d922      	bls.n	800292c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3344      	adds	r3, #68	@ 0x44
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	334c      	adds	r3, #76	@ 0x4c
 800290a:	2204      	movs	r2, #4
 800290c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	334c      	adds	r3, #76	@ 0x4c
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f005 f939 	bl	8007b9c <HAL_HCD_HC_NotifyURBChange_Callback>
 800292a:	e022      	b.n	8002972 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334c      	adds	r3, #76	@ 0x4c
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002956:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800295e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	6093      	str	r3, [r2, #8]
 8002984:	e217      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f002 f886 	bl	8004aa0 <USB_ReadChInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d11b      	bne.n	80029d8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334d      	adds	r3, #77	@ 0x4d
 80029b0:	2209      	movs	r2, #9
 80029b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 f8ec 	bl	8004b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d4:	6093      	str	r3, [r2, #8]
 80029d6:	e1ee      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 f85d 	bl	8004aa0 <USB_ReadChInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f040 81df 	bne.w	8002db0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2302      	movs	r3, #2
 8002a02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334d      	adds	r3, #77	@ 0x4d
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 8093 	bne.w	8002b42 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	@ 0x4c
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3326      	adds	r3, #38	@ 0x26
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d00b      	beq.n	8002a72 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3326      	adds	r3, #38	@ 0x26
 8002a6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	f040 8190 	bne.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	333d      	adds	r3, #61	@ 0x3d
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2d8      	uxtb	r0, r3
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	333d      	adds	r3, #61	@ 0x3d
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	799b      	ldrb	r3, [r3, #6]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 8171 	bne.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3334      	adds	r3, #52	@ 0x34
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8165 	beq.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3334      	adds	r3, #52	@ 0x34
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	3328      	adds	r3, #40	@ 0x28
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	440b      	add	r3, r1
 8002aee:	1e59      	subs	r1, r3, #1
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4403      	add	r3, r0
 8002afe:	3328      	adds	r3, #40	@ 0x28
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b06:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 813f 	beq.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	333d      	adds	r3, #61	@ 0x3d
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2d8      	uxtb	r0, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	333d      	adds	r3, #61	@ 0x3d
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e127      	b.n	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	334d      	adds	r3, #77	@ 0x4d
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d120      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	334d      	adds	r3, #77	@ 0x4d
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	f040 8107 	bne.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334c      	adds	r3, #76	@ 0x4c
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e0fb      	b.n	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	334d      	adds	r3, #77	@ 0x4d
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d13a      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334d      	adds	r3, #77	@ 0x4d
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	@ 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	331b      	adds	r3, #27
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 80d1 	bne.w	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	331b      	adds	r3, #27
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	0151      	lsls	r1, r2, #5
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	440a      	add	r2, r1
 8002c1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c22:	6053      	str	r3, [r2, #4]
 8002c24:	e0b5      	b.n	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	334d      	adds	r3, #77	@ 0x4d
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d114      	bne.n	8002c66 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	@ 0x4c
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e095      	b.n	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	334d      	adds	r3, #77	@ 0x4d
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d114      	bne.n	8002ca6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334c      	adds	r3, #76	@ 0x4c
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e075      	b.n	8002d92 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	334d      	adds	r3, #77	@ 0x4d
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d00a      	beq.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334d      	adds	r3, #77	@ 0x4d
 8002ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	d170      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334d      	adds	r3, #77	@ 0x4d
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	@ 0x44
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4403      	add	r3, r0
 8002d06:	3344      	adds	r3, #68	@ 0x44
 8002d08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3344      	adds	r3, #68	@ 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d914      	bls.n	8002d4a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3344      	adds	r3, #68	@ 0x44
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	334c      	adds	r3, #76	@ 0x4c
 8002d44:	2204      	movs	r2, #4
 8002d46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d48:	e022      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334c      	adds	r3, #76	@ 0x4c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d90:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	334c      	adds	r3, #76	@ 0x4c
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f004 fef7 	bl	8007b9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002dae:	e002      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002db4:	bf00      	nop
  }
}
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	0c5b      	lsrs	r3, r3, #17
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d004      	beq.n	8002e02 <HCD_RXQLVL_IRQHandler+0x46>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	f000 80b6 	beq.w	8002f6c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e00:	e0b7      	b.n	8002f72 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80b3 	beq.w	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	332c      	adds	r3, #44	@ 0x2c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a7 	beq.w	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3338      	adds	r3, #56	@ 0x38
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	18d1      	adds	r1, r2, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	3334      	adds	r3, #52	@ 0x34
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4299      	cmp	r1, r3
 8002e4c:	f200 8083 	bhi.w	8002f56 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	332c      	adds	r3, #44	@ 0x2c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f001 fdad 	bl	80049ca <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	332c      	adds	r3, #44	@ 0x2c
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	18d1      	adds	r1, r2, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4403      	add	r3, r0
 8002e94:	332c      	adds	r3, #44	@ 0x2c
 8002e96:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3338      	adds	r3, #56	@ 0x38
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	18d1      	adds	r1, r2, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4403      	add	r3, r0
 8002ebc:	3338      	adds	r3, #56	@ 0x38
 8002ebe:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	0cdb      	lsrs	r3, r3, #19
 8002ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3328      	adds	r3, #40	@ 0x28
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d13f      	bne.n	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03c      	beq.n	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f0c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f14:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	333c      	adds	r3, #60	@ 0x3c
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2d8      	uxtb	r0, r3
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333c      	adds	r3, #60	@ 0x3c
 8002f50:	4602      	mov	r2, r0
 8002f52:	701a      	strb	r2, [r3, #0]
      break;
 8002f54:	e00c      	b.n	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334c      	adds	r3, #76	@ 0x4c
 8002f66:	2204      	movs	r2, #4
 8002f68:	701a      	strb	r2, [r3, #0]
      break;
 8002f6a:	e001      	b.n	8002f70 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002f70:	bf00      	nop
  }
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	@ 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002fa6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d10b      	bne.n	8002fca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f004 fdd1 	bl	8007b64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d132      	bne.n	800303a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d126      	bne.n	8003034 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7a5b      	ldrb	r3, [r3, #9]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d113      	bne.n	8003016 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002ff4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ff8:	d106      	bne.n	8003008 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f001 fd7c 	bl	8004afe <USB_InitFSLSPClkSel>
 8003006:	e011      	b.n	800302c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f001 fd75 	bl	8004afe <USB_InitFSLSPClkSel>
 8003014:	e00a      	b.n	800302c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	79db      	ldrb	r3, [r3, #7]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d106      	bne.n	800302c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003024:	461a      	mov	r2, r3
 8003026:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800302a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f004 fdc7 	bl	8007bc0 <HAL_HCD_PortEnabled_Callback>
 8003032:	e002      	b.n	800303a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f004 fdd1 	bl	8007bdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d103      	bne.n	800304c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e12b      	b.n	80032ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fd86 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	@ 0x24
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c4:	f001 fa20 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80030c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a81      	ldr	r2, [pc, #516]	@ (80032d4 <HAL_I2C_Init+0x274>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d807      	bhi.n	80030e4 <HAL_I2C_Init+0x84>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a80      	ldr	r2, [pc, #512]	@ (80032d8 <HAL_I2C_Init+0x278>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e006      	b.n	80030f2 <HAL_I2C_Init+0x92>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a7d      	ldr	r2, [pc, #500]	@ (80032dc <HAL_I2C_Init+0x27c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bf94      	ite	ls
 80030ec:	2301      	movls	r3, #1
 80030ee:	2300      	movhi	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0e7      	b.n	80032ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a78      	ldr	r2, [pc, #480]	@ (80032e0 <HAL_I2C_Init+0x280>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a6a      	ldr	r2, [pc, #424]	@ (80032d4 <HAL_I2C_Init+0x274>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d802      	bhi.n	8003134 <HAL_I2C_Init+0xd4>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	e009      	b.n	8003148 <HAL_I2C_Init+0xe8>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a69      	ldr	r2, [pc, #420]	@ (80032e4 <HAL_I2C_Init+0x284>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	3301      	adds	r3, #1
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800315a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	495c      	ldr	r1, [pc, #368]	@ (80032d4 <HAL_I2C_Init+0x274>)
 8003164:	428b      	cmp	r3, r1
 8003166:	d819      	bhi.n	800319c <HAL_I2C_Init+0x13c>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e59      	subs	r1, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fbb1 f3f3 	udiv	r3, r1, r3
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800317c:	400b      	ands	r3, r1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_I2C_Init+0x138>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	e051      	b.n	800323c <HAL_I2C_Init+0x1dc>
 8003198:	2304      	movs	r3, #4
 800319a:	e04f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <HAL_I2C_Init+0x168>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e012      	b.n	80031ee <HAL_I2C_Init+0x18e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x196>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e022      	b.n	800323c <HAL_I2C_Init+0x1dc>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10e      	bne.n	800321c <HAL_I2C_Init+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e58      	subs	r0, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	440b      	add	r3, r1
 800320c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321a:	e00f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6809      	ldr	r1, [r1, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800326a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6911      	ldr	r1, [r2, #16]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	000186a0 	.word	0x000186a0
 80032d8:	001e847f 	.word	0x001e847f
 80032dc:	003d08ff 	.word	0x003d08ff
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e128      	b.n	800354c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a90      	ldr	r2, [pc, #576]	@ (8003554 <HAL_I2S_Init+0x26c>)
 8003312:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fd fc87 	bl	8000c28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003330:	f023 030f 	bic.w	r3, r3, #15
 8003334:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2202      	movs	r2, #2
 800333c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d060      	beq.n	8003408 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800334e:	2310      	movs	r3, #16
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e001      	b.n	8003358 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b20      	cmp	r3, #32
 800335e:	d802      	bhi.n	8003366 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003366:	2001      	movs	r0, #1
 8003368:	f001 f9c4 	bl	80046f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800336c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003376:	d125      	bne.n	80033c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	fbb2 f2f3 	udiv	r2, r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	461a      	mov	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	3305      	adds	r3, #5
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e01f      	b.n	80033e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	3305      	adds	r3, #5
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e00e      	b.n	80033e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	3305      	adds	r3, #5
 80033e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003558 <HAL_I2S_Init+0x270>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	08db      	lsrs	r3, r3, #3
 80033ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003408:	2302      	movs	r3, #2
 800340a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d902      	bls.n	800341c <HAL_I2S_Init+0x134>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	2bff      	cmp	r3, #255	@ 0xff
 800341a:	d907      	bls.n	800342c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e08f      	b.n	800354c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	430a      	orrs	r2, r1
 800343e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800344a:	f023 030f 	bic.w	r3, r3, #15
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6851      	ldr	r1, [r2, #4]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6892      	ldr	r2, [r2, #8]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68d2      	ldr	r2, [r2, #12]
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6992      	ldr	r2, [r2, #24]
 8003462:	430a      	orrs	r2, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800346e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d161      	bne.n	800353c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_I2S_Init+0x274>)
 800347c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_I2S_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_I2S_Init+0x1a4>
 8003488:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_I2S_Init+0x27c>)
 800348a:	e001      	b.n	8003490 <HAL_I2S_Init+0x1a8>
 800348c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4932      	ldr	r1, [pc, #200]	@ (8003560 <HAL_I2S_Init+0x278>)
 8003498:	428a      	cmp	r2, r1
 800349a:	d101      	bne.n	80034a0 <HAL_I2S_Init+0x1b8>
 800349c:	4a31      	ldr	r2, [pc, #196]	@ (8003564 <HAL_I2S_Init+0x27c>)
 800349e:	e001      	b.n	80034a4 <HAL_I2S_Init+0x1bc>
 80034a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80034a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <HAL_I2S_Init+0x278>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_I2S_Init+0x1d4>
 80034b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003564 <HAL_I2S_Init+0x27c>)
 80034ba:	e001      	b.n	80034c0 <HAL_I2S_Init+0x1d8>
 80034bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c0:	2202      	movs	r2, #2
 80034c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <HAL_I2S_Init+0x278>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_I2S_Init+0x1ea>
 80034ce:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_I2S_Init+0x27c>)
 80034d0:	e001      	b.n	80034d6 <HAL_I2S_Init+0x1ee>
 80034d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e2:	d003      	beq.n	80034ec <HAL_I2S_Init+0x204>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	e001      	b.n	80034f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003502:	4313      	orrs	r3, r2
 8003504:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800350c:	4313      	orrs	r3, r2
 800350e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003516:	4313      	orrs	r3, r2
 8003518:	b29a      	uxth	r2, r3
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	4313      	orrs	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003524:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <HAL_I2S_Init+0x278>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_I2S_Init+0x24c>
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_I2S_Init+0x27c>)
 8003532:	e001      	b.n	8003538 <HAL_I2S_Init+0x250>
 8003534:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003538:	897a      	ldrh	r2, [r7, #10]
 800353a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	0800365f 	.word	0x0800365f
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	08003775 	.word	0x08003775
 8003560:	40003800 	.word	0x40003800
 8003564:	40003400 	.word	0x40003400

08003568 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10e      	bne.n	80035f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffb8 	bl	8003568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003646:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff93 	bl	800357c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b04      	cmp	r3, #4
 8003678:	d13a      	bne.n	80036f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d109      	bne.n	8003698 <I2S_IRQHandler+0x3a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d102      	bne.n	8003698 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffb4 	bl	8003600 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b40      	cmp	r3, #64	@ 0x40
 80036a0:	d126      	bne.n	80036f0 <I2S_IRQHandler+0x92>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d11f      	bne.n	80036f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff50 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d136      	bne.n	800376a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d109      	bne.n	800371a <I2S_IRQHandler+0xbc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d102      	bne.n	800371a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff45 	bl	80035a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d122      	bne.n	800376a <I2S_IRQHandler+0x10c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d11b      	bne.n	800376a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003740:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff13 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a92      	ldr	r2, [pc, #584]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800378e:	4b92      	ldr	r3, [pc, #584]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003790:	e001      	b.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003792:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a8b      	ldr	r2, [pc, #556]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037ac:	4b8a      	ldr	r3, [pc, #552]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ae:	e001      	b.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c0:	d004      	beq.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f040 8099 	bne.w	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d107      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f925 	bl	8003a30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9c8 	bl	8003b90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d13a      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d035      	beq.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800381e:	4b6e      	ldr	r3, [pc, #440]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003820:	e001      	b.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4969      	ldr	r1, [pc, #420]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800382e:	428b      	cmp	r3, r1
 8003830:	d101      	bne.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003832:	4b69      	ldr	r3, [pc, #420]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003834:	e001      	b.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003836:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800383a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800383e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800384e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fe88 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	f040 80c3 	bne.w	8003a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80bd 	beq.w	8003a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a49      	ldr	r2, [pc, #292]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038b2:	4b49      	ldr	r3, [pc, #292]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b4:	e001      	b.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4944      	ldr	r1, [pc, #272]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c2:	428b      	cmp	r3, r1
 80038c4:	d101      	bne.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038c6:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c8:	e001      	b.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe4a 	bl	8003590 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038fc:	e089      	b.n	8003a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d107      	bne.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8be 	bl	8003a94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8fd 	bl	8003b2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d12f      	bne.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02a      	beq.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003954:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1e      	ldr	r2, [pc, #120]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003962:	e001      	b.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003964:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4919      	ldr	r1, [pc, #100]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003970:	428b      	cmp	r3, r1
 8003972:	d101      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003976:	e001      	b.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003978:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800397c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003980:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fdfa 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d136      	bne.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d031      	beq.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039ba:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039bc:	e001      	b.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4902      	ldr	r1, [pc, #8]	@ (80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ca:	428b      	cmp	r3, r1
 80039cc:	d106      	bne.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039ce:	4b02      	ldr	r3, [pc, #8]	@ (80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d0:	e006      	b.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039d2:	bf00      	nop
 80039d4:	40003800 	.word	0x40003800
 80039d8:	40003400 	.word	0x40003400
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0204 	orr.w	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fdc0 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a10:	e000      	b.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a12:	bf00      	nop
}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c99      	adds	r1, r3, #2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6251      	str	r1, [r2, #36]	@ 0x24
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d113      	bne.n	8003a8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ffc9 	bl	8003a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	1c99      	adds	r1, r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003aa6:	8819      	ldrh	r1, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <I2SEx_TxISR_I2SExt+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <I2SEx_TxISR_I2SExt+0x22>
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <I2SEx_TxISR_I2SExt+0x94>)
 8003ab4:	e001      	b.n	8003aba <I2SEx_TxISR_I2SExt+0x26>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aba:	460a      	mov	r2, r1
 8003abc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d121      	bne.n	8003b1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <I2SEx_TxISR_I2SExt+0x90>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <I2SEx_TxISR_I2SExt+0x50>
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <I2SEx_TxISR_I2SExt+0x94>)
 8003ae2:	e001      	b.n	8003ae8 <I2SEx_TxISR_I2SExt+0x54>
 8003ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	490d      	ldr	r1, [pc, #52]	@ (8003b24 <I2SEx_TxISR_I2SExt+0x90>)
 8003af0:	428b      	cmp	r3, r1
 8003af2:	d101      	bne.n	8003af8 <I2SEx_TxISR_I2SExt+0x64>
 8003af4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <I2SEx_TxISR_I2SExt+0x94>)
 8003af6:	e001      	b.n	8003afc <I2SEx_TxISR_I2SExt+0x68>
 8003af8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003afc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff81 	bl	8003a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40003800 	.word	0x40003800
 8003b28:	40003400 	.word	0x40003400

08003b2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68d8      	ldr	r0, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	1c99      	adds	r1, r3, #2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003b44:	b282      	uxth	r2, r0
 8003b46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d113      	bne.n	8003b88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ff4a 	bl	8003a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	@ (8003c20 <I2SEx_RxISR_I2SExt+0x90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <I2SEx_RxISR_I2SExt+0x16>
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <I2SEx_RxISR_I2SExt+0x94>)
 8003ba4:	e001      	b.n	8003baa <I2SEx_RxISR_I2SExt+0x1a>
 8003ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003baa:	68d8      	ldr	r0, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	1c99      	adds	r1, r3, #2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003bb6:	b282      	uxth	r2, r0
 8003bb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d121      	bne.n	8003c16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <I2SEx_RxISR_I2SExt+0x90>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <I2SEx_RxISR_I2SExt+0x50>
 8003bdc:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <I2SEx_RxISR_I2SExt+0x94>)
 8003bde:	e001      	b.n	8003be4 <I2SEx_RxISR_I2SExt+0x54>
 8003be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	490d      	ldr	r1, [pc, #52]	@ (8003c20 <I2SEx_RxISR_I2SExt+0x90>)
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d101      	bne.n	8003bf4 <I2SEx_RxISR_I2SExt+0x64>
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <I2SEx_RxISR_I2SExt+0x94>)
 8003bf2:	e001      	b.n	8003bf8 <I2SEx_RxISR_I2SExt+0x68>
 8003bf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bf8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff03 	bl	8003a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40003800 	.word	0x40003800
 8003c24:	40003400 	.word	0x40003400

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e267      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d075      	beq.n	8003d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c46:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b85      	ldr	r3, [pc, #532]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b82      	ldr	r3, [pc, #520]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05b      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d157      	bne.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e242      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x74>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003cc0:	4b69      	ldr	r3, [pc, #420]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a68      	ldr	r2, [pc, #416]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f93e 	bl	8000f60 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fd f93a 	bl	8000f60 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e207      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd f92a 	bl	8000f60 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fd f926 	bl	8000f60 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1f3      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d56:	4b44      	ldr	r3, [pc, #272]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1c7      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4937      	ldr	r1, [pc, #220]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e03a      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd f8df 	bl	8000f60 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fd f8db 	bl	8000f60 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1a8      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4925      	ldr	r1, [pc, #148]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd f8be 	bl	8000f60 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fd f8ba 	bl	8000f60 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e187      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d036      	beq.n	8003e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd f89e 	bl	8000f60 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fd f89a 	bl	8000f60 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e167      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x200>
 8003e46:	e01b      	b.n	8003e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd f887 	bl	8000f60 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00e      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fd f883 	bl	8000f60 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d907      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e150      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	42470000 	.word	0x42470000
 8003e70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b88      	ldr	r3, [pc, #544]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ea      	bne.n	8003e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8097 	beq.w	8003fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b81      	ldr	r3, [pc, #516]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eae:	4b7a      	ldr	r3, [pc, #488]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b77      	ldr	r3, [pc, #476]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b74      	ldr	r3, [pc, #464]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a73      	ldr	r2, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd f843 	bl	8000f60 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fd f83f 	bl	8000f60 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e10c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ea>
 8003f04:	4b64      	ldr	r3, [pc, #400]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	4a63      	ldr	r2, [pc, #396]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x30c>
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f26:	4b5c      	ldr	r3, [pc, #368]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f34:	4b58      	ldr	r3, [pc, #352]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	4a57      	ldr	r2, [pc, #348]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f40:	4b55      	ldr	r3, [pc, #340]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fd f804 	bl	8000f60 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fd f800 	bl	8000f60 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0cb      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b49      	ldr	r3, [pc, #292]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fc ffee 	bl	8000f60 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fc ffea 	bl	8000f60 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0b5      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	4a38      	ldr	r2, [pc, #224]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a1 	beq.w	8004108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d05c      	beq.n	800408c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d141      	bne.n	800405e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fc ffbe 	bl	8000f60 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fc ffba 	bl	8000f60 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e087      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	491b      	ldr	r1, [pc, #108]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fc ff93 	bl	8000f60 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fc ff8f 	bl	8000f60 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x416>
 800405c:	e054      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fc ff7c 	bl	8000f60 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fc ff78 	bl	8000f60 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e038      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_RCC_OscConfig+0x4ec>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d121      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cc      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d90c      	bls.n	8004154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b65      	ldr	r3, [pc, #404]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d044      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d119      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b3f      	ldr	r3, [pc, #252]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e06f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e067      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b37      	ldr	r3, [pc, #220]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4934      	ldr	r1, [pc, #208]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fc feaa 	bl	8000f60 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fc fea6 	bl	8000f60 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e04f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b25      	ldr	r3, [pc, #148]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d20c      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fe0a 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08007d64 	.word	0x08007d64
 80042dc:	20000000 	.word	0x20000000
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b094      	sub	sp, #80	@ 0x50
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b79      	ldr	r3, [pc, #484]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80e1 	bhi.w	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e0db      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b73      	ldr	r3, [pc, #460]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800431c:	e0db      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b73      	ldr	r3, [pc, #460]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b6f      	ldr	r3, [pc, #444]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432e:	4b6d      	ldr	r3, [pc, #436]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d063      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	633b      	str	r3, [r7, #48]	@ 0x30
 800434e:	2300      	movs	r3, #0
 8004350:	637b      	str	r3, [r7, #52]	@ 0x34
 8004352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4621      	mov	r1, r4
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	6139      	str	r1, [r7, #16]
 8004374:	4629      	mov	r1, r5
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	018b      	lsls	r3, r1, #6
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004392:	4651      	mov	r1, sl
 8004394:	018a      	lsls	r2, r1, #6
 8004396:	4651      	mov	r1, sl
 8004398:	ebb2 0801 	subs.w	r8, r2, r1
 800439c:	4659      	mov	r1, fp
 800439e:	eb63 0901 	sbc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	462b      	mov	r3, r5
 80043c4:	eb49 0303 	adc.w	r3, r9, r3
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043d6:	4629      	mov	r1, r5
 80043d8:	024b      	lsls	r3, r1, #9
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e0:	4621      	mov	r1, r4
 80043e2:	024a      	lsls	r2, r1, #9
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ea:	2200      	movs	r2, #0
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043f4:	f7fb feec 	bl	80001d0 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	e058      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b38      	ldr	r3, [pc, #224]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	4618      	mov	r0, r3
 800440c:	4611      	mov	r1, r2
 800440e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	2300      	movs	r3, #0
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
 8004418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	0159      	lsls	r1, r3, #5
 800442a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442e:	0150      	lsls	r0, r2, #5
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4641      	mov	r1, r8
 8004436:	ebb2 0a01 	subs.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800444c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004454:	ebb2 040a 	subs.w	r4, r2, sl
 8004458:	eb63 050b 	sbc.w	r5, r3, fp
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	00eb      	lsls	r3, r5, #3
 8004466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446a:	00e2      	lsls	r2, r4, #3
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	4643      	mov	r3, r8
 8004472:	18e3      	adds	r3, r4, r3
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	464b      	mov	r3, r9
 8004478:	eb45 0303 	adc.w	r3, r5, r3
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448a:	4629      	mov	r1, r5
 800448c:	028b      	lsls	r3, r1, #10
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004494:	4621      	mov	r1, r4
 8004496:	028a      	lsls	r2, r1, #10
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	61fa      	str	r2, [r7, #28]
 80044a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a8:	f7fb fe92 	bl	80001d0 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ce:	e002      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3750      	adds	r7, #80	@ 0x50
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000000 	.word	0x20000000

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a9b      	lsrs	r3, r3, #10
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	@ (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	08007d74 	.word	0x08007d74

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004554:	2b00      	cmp	r3, #0
 8004556:	d035      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004558:	4b62      	ldr	r3, [pc, #392]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800455e:	f7fc fcff 	bl	8000f60 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004566:	f7fc fcfb 	bl	8000f60 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0b0      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004578:	4b5b      	ldr	r3, [pc, #364]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	019a      	lsls	r2, r3, #6
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	071b      	lsls	r3, r3, #28
 8004590:	4955      	ldr	r1, [pc, #340]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004598:	4b52      	ldr	r3, [pc, #328]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800459e:	f7fc fcdf 	bl	8000f60 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a6:	f7fc fcdb 	bl	8000f60 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e090      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b8:	4b4b      	ldr	r3, [pc, #300]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b44      	ldr	r3, [pc, #272]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	4a43      	ldr	r2, [pc, #268]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e2:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045fa:	f7fc fcb1 	bl	8000f60 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fc fcad 	bl	8000f60 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e062      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004614:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004620:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004628:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02f      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d028      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800463e:	4b2a      	ldr	r3, [pc, #168]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004646:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004654:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800465a:	4b23      	ldr	r3, [pc, #140]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d114      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004666:	f7fc fc7b 	bl	8000f60 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fc fc77 	bl	8000f60 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e02a      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b18      	ldr	r3, [pc, #96]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469c:	d10d      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80046ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b2:	490d      	ldr	r1, [pc, #52]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]
 80046b8:	e005      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4a0a      	ldr	r2, [pc, #40]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80046c4:	6093      	str	r3, [r2, #8]
 80046c6:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d2:	4905      	ldr	r1, [pc, #20]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	42470068 	.word	0x42470068
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40007000 	.word	0x40007000
 80046f0:	42470e40 	.word	0x42470e40

080046f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d13f      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004728:	d12f      	bne.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800472a:	4b1f      	ldr	r3, [pc, #124]	@ (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800472c:	617b      	str	r3, [r7, #20]
          break;
 800472e:	e02f      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004730:	4b1c      	ldr	r3, [pc, #112]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800473c:	d108      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800473e:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004746:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e007      	b.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004758:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004760:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477a:	0f1b      	lsrs	r3, r3, #28
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	617b      	str	r3, [r7, #20]
          break;
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
          break;
 800478e:	bf00      	nop
        }
      }
      break;
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004792:	bf00      	nop
    }
  }
  return frequency;
 8004794:	697b      	ldr	r3, [r7, #20]
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00bb8000 	.word	0x00bb8000
 80047ac:	007a1200 	.word	0x007a1200
 80047b0:	00f42400 	.word	0x00f42400

080047b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e07b      	b.n	80048be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047d6:	d009      	beq.n	80047ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
 80047de:	e005      	b.n	80047ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc fa8e 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004870:	ea42 0103 	orr.w	r1, r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f003 0104 	and.w	r1, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	f003 0210 	and.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 0201 	bic.w	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004924:	d901      	bls.n	800492a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e01b      	b.n	8004962 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	daf2      	bge.n	8004918 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494e:	d901      	bls.n	8004954 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e006      	b.n	8004962 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d0f0      	beq.n	8004942 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004986:	d901      	bls.n	800498c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e018      	b.n	80049be <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	daf2      	bge.n	800497a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2210      	movs	r2, #16
 800499c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049aa:	d901      	bls.n	80049b0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e006      	b.n	80049be <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d0f0      	beq.n	800499e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b08b      	sub	sp, #44	@ 0x2c
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	e014      	b.n	8004a20 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	3301      	adds	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	3301      	adds	r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3e6      	bcc.n	80049f6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a28:	8bfb      	ldrh	r3, [r7, #30]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01e      	beq.n	8004a6c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f107 0310 	add.w	r3, r7, #16
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	701a      	strb	r2, [r3, #0]
      i++;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	3301      	adds	r3, #1
 8004a58:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004a60:	8bfb      	ldrh	r3, [r7, #30]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a66:	8bfb      	ldrh	r3, [r7, #30]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ea      	bne.n	8004a42 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	372c      	adds	r7, #44	@ 0x2c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0301 	and.w	r3, r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d107      	bne.n	8004b50 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b46:	461a      	mov	r2, r3
 8004b48:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b4c:	6053      	str	r3, [r2, #4]
 8004b4e:	e00c      	b.n	8004b6a <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d107      	bne.n	8004b66 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004b62:	6053      	str	r3, [r2, #4]
 8004b64:	e001      	b.n	8004b6a <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	b29b      	uxth	r3, r3
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b089      	sub	sp, #36	@ 0x24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	0c9b      	lsrs	r3, r3, #18
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	0fdb      	lsrs	r3, r3, #31
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0fdb      	lsrs	r3, r3, #31
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d10d      	bne.n	8004c1c <USB_HC_Halt+0x82>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <USB_HC_Halt+0x82>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d002      	beq.n	8004c18 <USB_HC_Halt+0x7e>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d101      	bne.n	8004c1c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e0d8      	b.n	8004dce <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <USB_HC_Halt+0x8e>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d173      	bne.n	8004d10 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d14a      	bne.n	8004cea <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d133      	bne.n	8004cc8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c9e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cac:	d82e      	bhi.n	8004d0c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc4:	d0ec      	beq.n	8004ca0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004cc6:	e081      	b.n	8004dcc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ce6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ce8:	e070      	b.n	8004dcc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d08:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d0a:	e05f      	b.n	8004dcc <USB_HC_Halt+0x232>
            break;
 8004d0c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d0e:	e05d      	b.n	8004dcc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d133      	bne.n	8004da8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d7e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d8c:	d81d      	bhi.n	8004dca <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004da4:	d0ec      	beq.n	8004d80 <USB_HC_Halt+0x1e6>
 8004da6:	e011      	b.n	8004dcc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	e000      	b.n	8004dcc <USB_HC_Halt+0x232>
          break;
 8004dca:	bf00      	nop
    }
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	@ 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b088      	sub	sp, #32
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fd7a 	bl	80048e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004df4:	2110      	movs	r1, #16
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fd87 	bl	800490a <USB_FlushTxFifo>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fdb1 	bl	800496e <USB_FlushRxFifo>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e01f      	b.n	8004e5c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e32:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e3a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e42:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d9dc      	bls.n	8004e1c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e034      	b.n	8004ed2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e7e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e86:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e8e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eae:	d80c      	bhi.n	8004eca <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec6:	d0ec      	beq.n	8004ea2 <USB_StopHost+0xc8>
 8004ec8:	e000      	b.n	8004ecc <USB_StopHost+0xf2>
        break;
 8004eca:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d9c7      	bls.n	8004e68 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ee4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eec:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fce9 	bl	80048c6 <USB_EnableGlobalInt>

  return ret;
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f804 	bl	8004f22 <USBH_HandleSof>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b0b      	cmp	r3, #11
 8004f32:	d10a      	bne.n	8004f4a <USBH_HandleSof+0x28>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004f76:	2300      	movs	r3, #0
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f000 f8c1 	bl	8005100 <osMessageQueuePut>
#endif
#endif

  return;
 8004f7e:	bf00      	nop
}
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8004f96:	bf00      	nop
}
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f000 f891 	bl	8005100 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f002 fdf5 	bl	8007bf8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f830 	bl	800507a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f82a 	bl	800507a <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800503a:	2300      	movs	r3, #0
 800503c:	2200      	movs	r2, #0
 800503e:	f000 f85f 	bl	8005100 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8005068:	2300      	movs	r3, #0
 800506a:	2200      	movs	r2, #0
 800506c:	f000 f848 	bl	8005100 <osMessageQueuePut>
#endif

  return USBH_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d80d      	bhi.n	80050a8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	33e0      	adds	r3, #224	@ 0xe0
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	33e0      	adds	r3, #224	@ 0xe0
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	603b      	str	r3, [r7, #0]
  return(result);
 80050c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	e00c      	b.n	80050ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <osKernelInitialize+0x44>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <osKernelInitialize+0x44>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e002      	b.n	80050ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ec:	687b      	ldr	r3, [r7, #4]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000012c 	.word	0x2000012c

08005100 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005118:	f3ef 8305 	mrs	r3, IPSR
 800511c:	617b      	str	r3, [r7, #20]
  return(result);
 800511e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005120:	2b00      	cmp	r3, #0
 8005122:	d028      	beq.n	8005176 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <osMessageQueuePut+0x36>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <osMessageQueuePut+0x36>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005136:	f06f 0303 	mvn.w	r3, #3
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e038      	b.n	80051b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005142:	f107 0210 	add.w	r2, r7, #16
 8005146:	2300      	movs	r3, #0
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	69b8      	ldr	r0, [r7, #24]
 800514c:	f000 fb68 	bl	8005820 <xQueueGenericSendFromISR>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005156:	f06f 0302 	mvn.w	r3, #2
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e028      	b.n	80051b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d025      	beq.n	80051b0 <osMessageQueuePut+0xb0>
 8005164:	4b15      	ldr	r3, [pc, #84]	@ (80051bc <osMessageQueuePut+0xbc>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	e01c      	b.n	80051b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <osMessageQueuePut+0x82>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005182:	f06f 0303 	mvn.w	r3, #3
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e012      	b.n	80051b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800518a:	2300      	movs	r3, #0
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	69b8      	ldr	r0, [r7, #24]
 8005192:	f000 fa43 	bl	800561c <xQueueGenericSend>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d009      	beq.n	80051b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80051a2:	f06f 0301 	mvn.w	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e002      	b.n	80051b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80051aa:	f06f 0302 	mvn.w	r3, #2
 80051ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051b0:	69fb      	ldr	r3, [r7, #28]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a07      	ldr	r2, [pc, #28]	@ (80051ec <vApplicationGetIdleTaskMemory+0x2c>)
 80051d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a06      	ldr	r2, [pc, #24]	@ (80051f0 <vApplicationGetIdleTaskMemory+0x30>)
 80051d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000130 	.word	0x20000130
 80051f0:	2000018c 	.word	0x2000018c

080051f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a07      	ldr	r2, [pc, #28]	@ (8005220 <vApplicationGetTimerTaskMemory+0x2c>)
 8005204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a06      	ldr	r2, [pc, #24]	@ (8005224 <vApplicationGetTimerTaskMemory+0x30>)
 800520a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	2000038c 	.word	0x2000038c
 8005224:	200003e8 	.word	0x200003e8

08005228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e0:	d103      	bne.n	80052ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e00c      	b.n	8005304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3308      	adds	r3, #8
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e002      	b.n	80052f8 <vListInsert+0x2e>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d2f6      	bcs.n	80052f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6852      	ldr	r2, [r2, #4]
 800535c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	d103      	bne.n	8005370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053bc:	f002 f8b4 	bl	8007528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	3b01      	subs	r3, #1
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	441a      	add	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	22ff      	movs	r2, #255	@ 0xff
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	22ff      	movs	r2, #255	@ 0xff
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d114      	bne.n	800543c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01a      	beq.n	8005450 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3310      	adds	r3, #16
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f956 	bl	80066d0 <xTaskRemoveFromEventList>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d012      	beq.n	8005450 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800542a:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <xQueueGenericReset+0xd0>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	e009      	b.n	8005450 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3310      	adds	r3, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fef1 	bl	8005228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3324      	adds	r3, #36	@ 0x24
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff feec 	bl	8005228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005450:	f002 f89c 	bl	800758c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005454:	2301      	movs	r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	@ 0x38
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <xQueueGenericCreateStatic+0x56>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <xQueueGenericCreateStatic+0x5a>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueGenericCreateStatic+0x5c>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	623b      	str	r3, [r7, #32]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <xQueueGenericCreateStatic+0x84>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueGenericCreateStatic+0x88>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xQueueGenericCreateStatic+0x8a>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	61fb      	str	r3, [r7, #28]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800550a:	2350      	movs	r3, #80	@ 0x50
 800550c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b50      	cmp	r3, #80	@ 0x50
 8005512:	d00b      	beq.n	800552c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61bb      	str	r3, [r7, #24]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800552c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005540:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f840 	bl	80055d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005556:	4618      	mov	r0, r3
 8005558:	3730      	adds	r7, #48	@ 0x30
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	@ 0x28
 8005562:	af02      	add	r7, sp, #8
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	613b      	str	r3, [r7, #16]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3350      	adds	r3, #80	@ 0x50
 8005598:	4618      	mov	r0, r3
 800559a:	f002 f8e7 	bl	800776c <pvPortMalloc>
 800559e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3350      	adds	r3, #80	@ 0x50
 80055ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b8:	79fa      	ldrb	r2, [r7, #7]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f805 	bl	80055d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ca:	69bb      	ldr	r3, [r7, #24]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005602:	2101      	movs	r1, #1
 8005604:	69b8      	ldr	r0, [r7, #24]
 8005606:	f7ff fec3 	bl	8005390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	@ 0x38
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <xQueueGenericSend+0x34>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x42>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xQueueGenericSend+0x46>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSend+0x48>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <xQueueGenericSend+0x64>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d103      	bne.n	800568e <xQueueGenericSend+0x72>
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <xQueueGenericSend+0x76>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericSend+0x78>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <xQueueGenericSend+0x94>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	623b      	str	r3, [r7, #32]
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056b0:	f001 f9ce 	bl	8006a50 <xTaskGetSchedulerState>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <xQueueGenericSend+0xa4>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSend+0xa8>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <xQueueGenericSend+0xaa>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	61fb      	str	r3, [r7, #28]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056e2:	f001 ff21 	bl	8007528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <xQueueGenericSend+0xdc>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d129      	bne.n	800574c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fe:	f000 fa0f 	bl	8005b20 <prvCopyDataToQueue>
 8005702:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	3324      	adds	r3, #36	@ 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f000 ffdd 	bl	80066d0 <xTaskRemoveFromEventList>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800571c:	4b3f      	ldr	r3, [pc, #252]	@ (800581c <xQueueGenericSend+0x200>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e00a      	b.n	8005744 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005734:	4b39      	ldr	r3, [pc, #228]	@ (800581c <xQueueGenericSend+0x200>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005744:	f001 ff22 	bl	800758c <vPortExitCritical>
				return pdPASS;
 8005748:	2301      	movs	r3, #1
 800574a:	e063      	b.n	8005814 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005752:	f001 ff1b 	bl	800758c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005756:	2300      	movs	r3, #0
 8005758:	e05c      	b.n	8005814 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005760:	f107 0314 	add.w	r3, r7, #20
 8005764:	4618      	mov	r0, r3
 8005766:	f001 f817 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576e:	f001 ff0d 	bl	800758c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005772:	f000 fd87 	bl	8006284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005776:	f001 fed7 	bl	8007528 <vPortEnterCritical>
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005780:	b25b      	sxtb	r3, r3
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005786:	d103      	bne.n	8005790 <xQueueGenericSend+0x174>
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005796:	b25b      	sxtb	r3, r3
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x18a>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a6:	f001 fef1 	bl	800758c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057aa:	1d3a      	adds	r2, r7, #4
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4611      	mov	r1, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 f806 	bl	80067c4 <xTaskCheckForTimeOut>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d124      	bne.n	8005808 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057c0:	f000 faa6 	bl	8005d10 <prvIsQueueFull>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	3310      	adds	r3, #16
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 ff2a 	bl	800662c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057da:	f000 fa31 	bl	8005c40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057de:	f000 fd5f 	bl	80062a0 <xTaskResumeAll>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f47f af7c 	bne.w	80056e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057ea:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <xQueueGenericSend+0x200>)
 80057ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	e772      	b.n	80056e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fe:	f000 fa1f 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005802:	f000 fd4d 	bl	80062a0 <xTaskResumeAll>
 8005806:	e76c      	b.n	80056e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800580a:	f000 fa19 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580e:	f000 fd47 	bl	80062a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005812:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005814:	4618      	mov	r0, r3
 8005816:	3738      	adds	r7, #56	@ 0x38
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	@ 0x40
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <xQueueGenericSendFromISR+0x3e>
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <xQueueGenericSendFromISR+0x42>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <xQueueGenericSendFromISR+0x44>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d103      	bne.n	800588e <xQueueGenericSendFromISR+0x6e>
 8005886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <xQueueGenericSendFromISR+0x72>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueGenericSendFromISR+0x74>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	623b      	str	r3, [r7, #32]
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058b0:	f001 ff1a 	bl	80076e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058b4:	f3ef 8211 	mrs	r2, BASEPRI
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61fa      	str	r2, [r7, #28]
 80058ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xQueueGenericSendFromISR+0xc2>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d12f      	bne.n	8005942 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f8:	f000 f912 	bl	8005b20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005904:	d112      	bne.n	800592c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	3324      	adds	r3, #36	@ 0x24
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fedc 	bl	80066d0 <xTaskRemoveFromEventList>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e007      	b.n	800593c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800592c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005930:	3301      	adds	r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	b25a      	sxtb	r2, r3
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800593c:	2301      	movs	r3, #1
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005940:	e001      	b.n	8005946 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005942:	2300      	movs	r3, #0
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005948:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005954:	4618      	mov	r0, r3
 8005956:	3740      	adds	r7, #64	@ 0x40
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <xQueueReceive+0x32>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	623b      	str	r3, [r7, #32]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <xQueueReceive+0x40>
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueReceive+0x44>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueReceive+0x46>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueReceive+0x62>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fb      	str	r3, [r7, #28]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059be:	f001 f847 	bl	8006a50 <xTaskGetSchedulerState>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <xQueueReceive+0x72>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueReceive+0x76>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueReceive+0x78>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueReceive+0x94>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f0:	f001 fd9a 	bl	8007528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01f      	beq.n	8005a40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a04:	f000 f8f6 	bl	8005bf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00f      	beq.n	8005a38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	3310      	adds	r3, #16
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fe57 	bl	80066d0 <xTaskRemoveFromEventList>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <xQueueReceive+0x1c0>)
 8005a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a38:	f001 fda8 	bl	800758c <vPortExitCritical>
				return pdPASS;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e069      	b.n	8005b14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a46:	f001 fda1 	bl	800758c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e062      	b.n	8005b14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fe9d 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a62:	f001 fd93 	bl	800758c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a66:	f000 fc0d 	bl	8006284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6a:	f001 fd5d 	bl	8007528 <vPortEnterCritical>
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a7a:	d103      	bne.n	8005a84 <xQueueReceive+0x128>
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a90:	d103      	bne.n	8005a9a <xQueueReceive+0x13e>
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a9a:	f001 fd77 	bl	800758c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9e:	1d3a      	adds	r2, r7, #4
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe8c 	bl	80067c4 <xTaskCheckForTimeOut>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d123      	bne.n	8005afa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab4:	f000 f916 	bl	8005ce4 <prvIsQueueEmpty>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	3324      	adds	r3, #36	@ 0x24
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fdb0 	bl	800662c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ace:	f000 f8b7 	bl	8005c40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad2:	f000 fbe5 	bl	80062a0 <xTaskResumeAll>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d189      	bne.n	80059f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005adc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <xQueueReceive+0x1c0>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	e780      	b.n	80059f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af0:	f000 f8a6 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af4:	f000 fbd4 	bl	80062a0 <xTaskResumeAll>
 8005af8:	e77a      	b.n	80059f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005afc:	f000 f8a0 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b00:	f000 fbce 	bl	80062a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b06:	f000 f8ed 	bl	8005ce4 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f af6f 	beq.w	80059f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3730      	adds	r7, #48	@ 0x30
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d14d      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 ff9e 	bl	8006a8c <xTaskPriorityDisinherit>
 8005b50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e043      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d119      	bne.n	8005b94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	f002 f8b8 	bl	8007ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d32b      	bcc.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e026      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68d8      	ldr	r0, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f002 f89e 	bl	8007ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	425b      	negs	r3, r3
 8005bae:	441a      	add	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d207      	bcs.n	8005bd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	425b      	negs	r3, r3
 8005bca:	441a      	add	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d105      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005bea:	697b      	ldr	r3, [r7, #20]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	441a      	add	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d303      	bcc.n	8005c28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68d9      	ldr	r1, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	461a      	mov	r2, r3
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f002 f854 	bl	8007ce0 <memcpy>
	}
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c48:	f001 fc6e 	bl	8007528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c54:	e011      	b.n	8005c7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fd34 	bl	80066d0 <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c6e:	f000 fe0d 	bl	800688c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dce9      	bgt.n	8005c56 <prvUnlockQueue+0x16>
 8005c82:	e000      	b.n	8005c86 <prvUnlockQueue+0x46>
					break;
 8005c84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c8e:	f001 fc7d 	bl	800758c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c92:	f001 fc49 	bl	8007528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9e:	e011      	b.n	8005cc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fd0f 	bl	80066d0 <xTaskRemoveFromEventList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb8:	f000 fde8 	bl	800688c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dce9      	bgt.n	8005ca0 <prvUnlockQueue+0x60>
 8005ccc:	e000      	b.n	8005cd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	22ff      	movs	r2, #255	@ 0xff
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd8:	f001 fc58 	bl	800758c <vPortExitCritical>
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cec:	f001 fc1c 	bl	8007528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e001      	b.n	8005d02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 fc43 	bl	800758c <vPortExitCritical>

	return xReturn;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d18:	f001 fc06 	bl	8007528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d102      	bne.n	8005d2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e001      	b.n	8005d32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d32:	f001 fc2b 	bl	800758c <vPortExitCritical>

	return xReturn;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e014      	b.n	8005d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d50:	4a0f      	ldr	r2, [pc, #60]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d5c:	490c      	ldr	r1, [pc, #48]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d66:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d72:	e006      	b.n	8005d82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d9e7      	bls.n	8005d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	200007e8 	.word	0x200007e8

08005d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da4:	f001 fbc0 	bl	8007528 <vPortEnterCritical>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005db4:	d103      	bne.n	8005dbe <vQueueWaitForMessageRestricted+0x2a>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dca:	d103      	bne.n	8005dd4 <vQueueWaitForMessageRestricted+0x40>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd4:	f001 fbda 	bl	800758c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	3324      	adds	r3, #36	@ 0x24
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fc45 	bl	8006678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7ff ff26 	bl	8005c40 <prvUnlockQueue>
	}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61fb      	str	r3, [r7, #28]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e46:	235c      	movs	r3, #92	@ 0x5c
 8005e48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e4e:	d00b      	beq.n	8005e68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61bb      	str	r3, [r7, #24]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <xTaskCreateStatic+0xb2>
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f850 	bl	8005f46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ea8:	f000 f8de 	bl	8006068 <prvAddNewTaskToReadyList>
 8005eac:	e001      	b.n	8005eb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb2:	697b      	ldr	r3, [r7, #20]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	@ 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	@ 0x30
 8005ec0:	af04      	add	r7, sp, #16
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fc4b 	bl	800776c <pvPortMalloc>
 8005ed6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ede:	205c      	movs	r0, #92	@ 0x5c
 8005ee0:	f001 fc44 	bl	800776c <pvPortMalloc>
 8005ee4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ef2:	e005      	b.n	8005f00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef4:	6978      	ldr	r0, [r7, #20]
 8005ef6:	f001 fd07 	bl	8007908 <vPortFree>
 8005efa:	e001      	b.n	8005f00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	9302      	str	r3, [sp, #8]
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f80e 	bl	8005f46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f2a:	69f8      	ldr	r0, [r7, #28]
 8005f2c:	f000 f89c 	bl	8006068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e002      	b.n	8005f3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	21a5      	movs	r1, #165	@ 0xa5
 8005f60:	f001 fe92 	bl	8007c88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f023 0307 	bic.w	r3, r3, #7
 8005f7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	617b      	str	r3, [r7, #20]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01f      	beq.n	8005fe6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e012      	b.n	8005fd2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	7819      	ldrb	r1, [r3, #0]
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3334      	adds	r3, #52	@ 0x34
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2b0f      	cmp	r3, #15
 8005fd6:	d9e9      	bls.n	8005fac <prvInitialiseNewTask+0x66>
 8005fd8:	e000      	b.n	8005fdc <prvInitialiseNewTask+0x96>
			{
				break;
 8005fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fe4:	e003      	b.n	8005fee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	2b37      	cmp	r3, #55	@ 0x37
 8005ff2:	d901      	bls.n	8005ff8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff4:	2337      	movs	r3, #55	@ 0x37
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006002:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	2200      	movs	r2, #0
 8006008:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	3304      	adds	r3, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff f92a 	bl	8005268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff f925 	bl	8005268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	69b8      	ldr	r0, [r7, #24]
 8006048:	f001 f93e 	bl	80072c8 <pxPortInitialiseStack>
 800604c:	4602      	mov	r2, r0
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605e:	bf00      	nop
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006070:	f001 fa5a 	bl	8007528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006074:	4b2d      	ldr	r3, [pc, #180]	@ (800612c <prvAddNewTaskToReadyList+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a2c      	ldr	r2, [pc, #176]	@ (800612c <prvAddNewTaskToReadyList+0xc4>)
 800607c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800607e:	4b2c      	ldr	r3, [pc, #176]	@ (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006086:	4a2a      	ldr	r2, [pc, #168]	@ (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800608c:	4b27      	ldr	r3, [pc, #156]	@ (800612c <prvAddNewTaskToReadyList+0xc4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d110      	bne.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006094:	f000 fc1e 	bl	80068d4 <prvInitialiseTaskLists>
 8006098:	e00d      	b.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800609a:	4b26      	ldr	r3, [pc, #152]	@ (8006134 <prvAddNewTaskToReadyList+0xcc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060a2:	4b23      	ldr	r3, [pc, #140]	@ (8006130 <prvAddNewTaskToReadyList+0xc8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d802      	bhi.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <prvAddNewTaskToReadyList+0xc8>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060b6:	4b20      	ldr	r3, [pc, #128]	@ (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060cc:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <prvAddNewTaskToReadyList+0xd4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <prvAddNewTaskToReadyList+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	4a18      	ldr	r2, [pc, #96]	@ (800613c <prvAddNewTaskToReadyList+0xd4>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <prvAddNewTaskToReadyList+0xd8>)
 80060ea:	441a      	add	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7ff f8c5 	bl	8005282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060f8:	f001 fa48 	bl	800758c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <prvAddNewTaskToReadyList+0xcc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006104:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	429a      	cmp	r2, r3
 8006110:	d207      	bcs.n	8006122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006112:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <prvAddNewTaskToReadyList+0xdc>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000cfc 	.word	0x20000cfc
 8006130:	20000828 	.word	0x20000828
 8006134:	20000d08 	.word	0x20000d08
 8006138:	20000d18 	.word	0x20000d18
 800613c:	20000d04 	.word	0x20000d04
 8006140:	2000082c 	.word	0x2000082c
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800615a:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <vTaskDelay+0x64>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <vTaskDelay+0x32>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800617a:	f000 f883 	bl	8006284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800617e:	2100      	movs	r1, #0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fcf3 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006186:	f000 f88b 	bl	80062a0 <xTaskResumeAll>
 800618a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006192:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <vTaskDelay+0x68>)
 8006194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000d24 	.word	0x20000d24
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061c2:	463a      	mov	r2, r7
 80061c4:	1d39      	adds	r1, r7, #4
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fff8 	bl	80051c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	9202      	str	r2, [sp, #8]
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2300      	movs	r3, #0
 80061e0:	460a      	mov	r2, r1
 80061e2:	4922      	ldr	r1, [pc, #136]	@ (800626c <vTaskStartScheduler+0xb8>)
 80061e4:	4822      	ldr	r0, [pc, #136]	@ (8006270 <vTaskStartScheduler+0xbc>)
 80061e6:	f7ff fe09 	bl	8005dfc <xTaskCreateStatic>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <vTaskStartScheduler+0xc0>)
 80061ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061f0:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <vTaskStartScheduler+0xc0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e001      	b.n	8006202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d102      	bne.n	800620e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006208:	f000 fd04 	bl	8006c14 <xTimerCreateTimerTask>
 800620c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d116      	bne.n	8006242 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	613b      	str	r3, [r7, #16]
}
 8006226:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <vTaskStartScheduler+0xc4>)
 800622a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800622e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006230:	4b12      	ldr	r3, [pc, #72]	@ (800627c <vTaskStartScheduler+0xc8>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006236:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <vTaskStartScheduler+0xcc>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800623c:	f001 f8d0 	bl	80073e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006240:	e00f      	b.n	8006262 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006248:	d10b      	bne.n	8006262 <vTaskStartScheduler+0xae>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	60fb      	str	r3, [r7, #12]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <vTaskStartScheduler+0xaa>
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	08007d4c 	.word	0x08007d4c
 8006270:	080068a5 	.word	0x080068a5
 8006274:	20000d20 	.word	0x20000d20
 8006278:	20000d1c 	.word	0x20000d1c
 800627c:	20000d08 	.word	0x20000d08
 8006280:	20000d00 	.word	0x20000d00

08006284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006288:	4b04      	ldr	r3, [pc, #16]	@ (800629c <vTaskSuspendAll+0x18>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	4a03      	ldr	r2, [pc, #12]	@ (800629c <vTaskSuspendAll+0x18>)
 8006290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000d24 	.word	0x20000d24

080062a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ae:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <xTaskResumeAll+0x118>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <xTaskResumeAll+0x2e>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	603b      	str	r3, [r7, #0]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062ce:	f001 f92b 	bl	8007528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062d2:	4b39      	ldr	r3, [pc, #228]	@ (80063b8 <xTaskResumeAll+0x118>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	4a37      	ldr	r2, [pc, #220]	@ (80063b8 <xTaskResumeAll+0x118>)
 80062da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062dc:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <xTaskResumeAll+0x118>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d162      	bne.n	80063aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062e4:	4b35      	ldr	r3, [pc, #212]	@ (80063bc <xTaskResumeAll+0x11c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05e      	beq.n	80063aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ec:	e02f      	b.n	800634e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b34      	ldr	r3, [pc, #208]	@ (80063c0 <xTaskResumeAll+0x120>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3318      	adds	r3, #24
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff f81e 	bl	800533c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3304      	adds	r3, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff f819 	bl	800533c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4b2d      	ldr	r3, [pc, #180]	@ (80063c4 <xTaskResumeAll+0x124>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d903      	bls.n	800631e <xTaskResumeAll+0x7e>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <xTaskResumeAll+0x124>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a27      	ldr	r2, [pc, #156]	@ (80063c8 <xTaskResumeAll+0x128>)
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe ffa4 	bl	8005282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633e:	4b23      	ldr	r3, [pc, #140]	@ (80063cc <xTaskResumeAll+0x12c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006348:	4b21      	ldr	r3, [pc, #132]	@ (80063d0 <xTaskResumeAll+0x130>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634e:	4b1c      	ldr	r3, [pc, #112]	@ (80063c0 <xTaskResumeAll+0x120>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1cb      	bne.n	80062ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800635c:	f000 fb58 	bl	8006a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006360:	4b1c      	ldr	r3, [pc, #112]	@ (80063d4 <xTaskResumeAll+0x134>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800636c:	f000 f846 	bl	80063fc <xTaskIncrementTick>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006376:	4b16      	ldr	r3, [pc, #88]	@ (80063d0 <xTaskResumeAll+0x130>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f1      	bne.n	800636c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006388:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <xTaskResumeAll+0x134>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800638e:	4b10      	ldr	r3, [pc, #64]	@ (80063d0 <xTaskResumeAll+0x130>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800639a:	4b0f      	ldr	r3, [pc, #60]	@ (80063d8 <xTaskResumeAll+0x138>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063aa:	f001 f8ef 	bl	800758c <vPortExitCritical>

	return xAlreadyYielded;
 80063ae:	68bb      	ldr	r3, [r7, #8]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000d24 	.word	0x20000d24
 80063bc:	20000cfc 	.word	0x20000cfc
 80063c0:	20000cbc 	.word	0x20000cbc
 80063c4:	20000d04 	.word	0x20000d04
 80063c8:	2000082c 	.word	0x2000082c
 80063cc:	20000828 	.word	0x20000828
 80063d0:	20000d10 	.word	0x20000d10
 80063d4:	20000d0c 	.word	0x20000d0c
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063e2:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <xTaskGetTickCount+0x1c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063e8:	687b      	ldr	r3, [r7, #4]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000d00 	.word	0x20000d00

080063fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006406:	4b4f      	ldr	r3, [pc, #316]	@ (8006544 <xTaskIncrementTick+0x148>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8090 	bne.w	8006530 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006410:	4b4d      	ldr	r3, [pc, #308]	@ (8006548 <xTaskIncrementTick+0x14c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006418:	4a4b      	ldr	r2, [pc, #300]	@ (8006548 <xTaskIncrementTick+0x14c>)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d121      	bne.n	8006468 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006424:	4b49      	ldr	r3, [pc, #292]	@ (800654c <xTaskIncrementTick+0x150>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <xTaskIncrementTick+0x4a>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	603b      	str	r3, [r7, #0]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xTaskIncrementTick+0x46>
 8006446:	4b41      	ldr	r3, [pc, #260]	@ (800654c <xTaskIncrementTick+0x150>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	4b40      	ldr	r3, [pc, #256]	@ (8006550 <xTaskIncrementTick+0x154>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a3e      	ldr	r2, [pc, #248]	@ (800654c <xTaskIncrementTick+0x150>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4a3e      	ldr	r2, [pc, #248]	@ (8006550 <xTaskIncrementTick+0x154>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	4b3e      	ldr	r3, [pc, #248]	@ (8006554 <xTaskIncrementTick+0x158>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	4a3c      	ldr	r2, [pc, #240]	@ (8006554 <xTaskIncrementTick+0x158>)
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	f000 fad4 	bl	8006a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006468:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <xTaskIncrementTick+0x15c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	429a      	cmp	r2, r3
 8006470:	d349      	bcc.n	8006506 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006472:	4b36      	ldr	r3, [pc, #216]	@ (800654c <xTaskIncrementTick+0x150>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647c:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <xTaskIncrementTick+0x15c>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006482:	601a      	str	r2, [r3, #0]
					break;
 8006484:	e03f      	b.n	8006506 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006486:	4b31      	ldr	r3, [pc, #196]	@ (800654c <xTaskIncrementTick+0x150>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d203      	bcs.n	80064a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800649e:	4a2e      	ldr	r2, [pc, #184]	@ (8006558 <xTaskIncrementTick+0x15c>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064a4:	e02f      	b.n	8006506 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe ff46 	bl	800533c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	3318      	adds	r3, #24
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe ff3d 	bl	800533c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4b25      	ldr	r3, [pc, #148]	@ (800655c <xTaskIncrementTick+0x160>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <xTaskIncrementTick+0xda>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	4a22      	ldr	r2, [pc, #136]	@ (800655c <xTaskIncrementTick+0x160>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006560 <xTaskIncrementTick+0x164>)
 80064e4:	441a      	add	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe fec8 	bl	8005282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006564 <xTaskIncrementTick+0x168>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3b8      	bcc.n	8006472 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006504:	e7b5      	b.n	8006472 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006506:	4b17      	ldr	r3, [pc, #92]	@ (8006564 <xTaskIncrementTick+0x168>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650c:	4914      	ldr	r1, [pc, #80]	@ (8006560 <xTaskIncrementTick+0x164>)
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d901      	bls.n	8006522 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006522:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <xTaskIncrementTick+0x16c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e004      	b.n	800653a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006530:	4b0e      	ldr	r3, [pc, #56]	@ (800656c <xTaskIncrementTick+0x170>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a0d      	ldr	r2, [pc, #52]	@ (800656c <xTaskIncrementTick+0x170>)
 8006538:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800653a:	697b      	ldr	r3, [r7, #20]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000d24 	.word	0x20000d24
 8006548:	20000d00 	.word	0x20000d00
 800654c:	20000cb4 	.word	0x20000cb4
 8006550:	20000cb8 	.word	0x20000cb8
 8006554:	20000d14 	.word	0x20000d14
 8006558:	20000d1c 	.word	0x20000d1c
 800655c:	20000d04 	.word	0x20000d04
 8006560:	2000082c 	.word	0x2000082c
 8006564:	20000828 	.word	0x20000828
 8006568:	20000d10 	.word	0x20000d10
 800656c:	20000d0c 	.word	0x20000d0c

08006570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006576:	4b28      	ldr	r3, [pc, #160]	@ (8006618 <vTaskSwitchContext+0xa8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800657e:	4b27      	ldr	r3, [pc, #156]	@ (800661c <vTaskSwitchContext+0xac>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006584:	e042      	b.n	800660c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006586:	4b25      	ldr	r3, [pc, #148]	@ (800661c <vTaskSwitchContext+0xac>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800658c:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <vTaskSwitchContext+0xb0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e011      	b.n	80065b8 <vTaskSwitchContext+0x48>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	607b      	str	r3, [r7, #4]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <vTaskSwitchContext+0x3e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	491a      	ldr	r1, [pc, #104]	@ (8006624 <vTaskSwitchContext+0xb4>)
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0e3      	beq.n	8006594 <vTaskSwitchContext+0x24>
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a13      	ldr	r2, [pc, #76]	@ (8006624 <vTaskSwitchContext+0xb4>)
 80065d8:	4413      	add	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3308      	adds	r3, #8
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d104      	bne.n	80065fc <vTaskSwitchContext+0x8c>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <vTaskSwitchContext+0xb8>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4a06      	ldr	r2, [pc, #24]	@ (8006620 <vTaskSwitchContext+0xb0>)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20000d24 	.word	0x20000d24
 800661c:	20000d10 	.word	0x20000d10
 8006620:	20000d04 	.word	0x20000d04
 8006624:	2000082c 	.word	0x2000082c
 8006628:	20000828 	.word	0x20000828

0800662c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006654:	4b07      	ldr	r3, [pc, #28]	@ (8006674 <vTaskPlaceOnEventList+0x48>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3318      	adds	r3, #24
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe fe34 	bl	80052ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006662:	2101      	movs	r1, #1
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 fa81 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000828 	.word	0x20000828

08006678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	617b      	str	r3, [r7, #20]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <vTaskPlaceOnEventListRestricted+0x54>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3318      	adds	r3, #24
 80066a8:	4619      	mov	r1, r3
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7fe fde9 	bl	8005282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	68b8      	ldr	r0, [r7, #8]
 80066c0:	f000 fa54 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
	}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000828 	.word	0x20000828

080066d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60fb      	str	r3, [r7, #12]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3318      	adds	r3, #24
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fe1a 	bl	800533c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006708:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <xTaskRemoveFromEventList+0xb0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11d      	bne.n	800674c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fe11 	bl	800533c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671e:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <xTaskRemoveFromEventList+0xb4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d903      	bls.n	800672e <xTaskRemoveFromEventList+0x5e>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	4a16      	ldr	r2, [pc, #88]	@ (8006784 <xTaskRemoveFromEventList+0xb4>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4a13      	ldr	r2, [pc, #76]	@ (8006788 <xTaskRemoveFromEventList+0xb8>)
 800673c:	441a      	add	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe fd9c 	bl	8005282 <vListInsertEnd>
 800674a:	e005      	b.n	8006758 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3318      	adds	r3, #24
 8006750:	4619      	mov	r1, r3
 8006752:	480e      	ldr	r0, [pc, #56]	@ (800678c <xTaskRemoveFromEventList+0xbc>)
 8006754:	f7fe fd95 	bl	8005282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <xTaskRemoveFromEventList+0xc0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	429a      	cmp	r2, r3
 8006764:	d905      	bls.n	8006772 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800676a:	4b0a      	ldr	r3, [pc, #40]	@ (8006794 <xTaskRemoveFromEventList+0xc4>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e001      	b.n	8006776 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000d24 	.word	0x20000d24
 8006784:	20000d04 	.word	0x20000d04
 8006788:	2000082c 	.word	0x2000082c
 800678c:	20000cbc 	.word	0x20000cbc
 8006790:	20000828 	.word	0x20000828
 8006794:	20000d10 	.word	0x20000d10

08006798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <vTaskInternalSetTimeOutState+0x24>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <vTaskInternalSetTimeOutState+0x28>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	605a      	str	r2, [r3, #4]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20000d14 	.word	0x20000d14
 80067c0:	20000d00 	.word	0x20000d00

080067c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	613b      	str	r3, [r7, #16]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60fb      	str	r3, [r7, #12]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800680a:	f000 fe8d 	bl	8007528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800680e:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <xTaskCheckForTimeOut+0xc0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006826:	d102      	bne.n	800682e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e023      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b15      	ldr	r3, [pc, #84]	@ (8006888 <xTaskCheckForTimeOut+0xc4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d007      	beq.n	800684a <xTaskCheckForTimeOut+0x86>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e015      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	429a      	cmp	r2, r3
 8006852:	d20b      	bcs.n	800686c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff99 	bl	8006798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e004      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f000 fe89 	bl	800758c <vPortExitCritical>

	return xReturn;
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000d00 	.word	0x20000d00
 8006888:	20000d14 	.word	0x20000d14

0800688c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006890:	4b03      	ldr	r3, [pc, #12]	@ (80068a0 <vTaskMissedYield+0x14>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000d10 	.word	0x20000d10

080068a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068ac:	f000 f852 	bl	8006954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068b0:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <prvIdleTask+0x28>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d9f9      	bls.n	80068ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <prvIdleTask+0x2c>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068c8:	e7f0      	b.n	80068ac <prvIdleTask+0x8>
 80068ca:	bf00      	nop
 80068cc:	2000082c 	.word	0x2000082c
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	e00c      	b.n	80068fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4a12      	ldr	r2, [pc, #72]	@ (8006934 <prvInitialiseTaskLists+0x60>)
 80068ec:	4413      	add	r3, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fc9a 	bl	8005228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b37      	cmp	r3, #55	@ 0x37
 80068fe:	d9ef      	bls.n	80068e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006900:	480d      	ldr	r0, [pc, #52]	@ (8006938 <prvInitialiseTaskLists+0x64>)
 8006902:	f7fe fc91 	bl	8005228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006906:	480d      	ldr	r0, [pc, #52]	@ (800693c <prvInitialiseTaskLists+0x68>)
 8006908:	f7fe fc8e 	bl	8005228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800690c:	480c      	ldr	r0, [pc, #48]	@ (8006940 <prvInitialiseTaskLists+0x6c>)
 800690e:	f7fe fc8b 	bl	8005228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006912:	480c      	ldr	r0, [pc, #48]	@ (8006944 <prvInitialiseTaskLists+0x70>)
 8006914:	f7fe fc88 	bl	8005228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006918:	480b      	ldr	r0, [pc, #44]	@ (8006948 <prvInitialiseTaskLists+0x74>)
 800691a:	f7fe fc85 	bl	8005228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <prvInitialiseTaskLists+0x78>)
 8006920:	4a05      	ldr	r2, [pc, #20]	@ (8006938 <prvInitialiseTaskLists+0x64>)
 8006922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006924:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <prvInitialiseTaskLists+0x7c>)
 8006926:	4a05      	ldr	r2, [pc, #20]	@ (800693c <prvInitialiseTaskLists+0x68>)
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	2000082c 	.word	0x2000082c
 8006938:	20000c8c 	.word	0x20000c8c
 800693c:	20000ca0 	.word	0x20000ca0
 8006940:	20000cbc 	.word	0x20000cbc
 8006944:	20000cd0 	.word	0x20000cd0
 8006948:	20000ce8 	.word	0x20000ce8
 800694c:	20000cb4 	.word	0x20000cb4
 8006950:	20000cb8 	.word	0x20000cb8

08006954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800695a:	e019      	b.n	8006990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800695c:	f000 fde4 	bl	8007528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <prvCheckTasksWaitingTermination+0x50>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fce5 	bl	800533c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a0b      	ldr	r2, [pc, #44]	@ (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 800697a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006986:	f000 fe01 	bl	800758c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f810 	bl	80069b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e1      	bne.n	800695c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000cd0 	.word	0x20000cd0
 80069a8:	20000cfc 	.word	0x20000cfc
 80069ac:	20000ce4 	.word	0x20000ce4

080069b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 ff9e 	bl	8007908 <vPortFree>
				vPortFree( pxTCB );
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 ff9b 	bl	8007908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069d2:	e019      	b.n	8006a08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d103      	bne.n	80069e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 ff92 	bl	8007908 <vPortFree>
	}
 80069e4:	e010      	b.n	8006a08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d00b      	beq.n	8006a08 <prvDeleteTCB+0x58>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <prvDeleteTCB+0x54>
	}
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <prvResetNextTaskUnblockTime+0x38>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <prvResetNextTaskUnblockTime+0x3c>)
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a28:	e008      	b.n	8006a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2a:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <prvResetNextTaskUnblockTime+0x38>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <prvResetNextTaskUnblockTime+0x3c>)
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000cb4 	.word	0x20000cb4
 8006a4c:	20000d1c 	.word	0x20000d1c

08006a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <xTaskGetSchedulerState+0x34>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	e008      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <xTaskGetSchedulerState+0x38>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e001      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a76:	687b      	ldr	r3, [r7, #4]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000d08 	.word	0x20000d08
 8006a88:	20000d24 	.word	0x20000d24

08006a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d058      	beq.n	8006b54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b60 <xTaskPriorityDisinherit+0xd4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d00b      	beq.n	8006ac4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60bb      	str	r3, [r7, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d02c      	beq.n	8006b54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d128      	bne.n	8006b54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fc18 	bl	800533c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b24:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <xTaskPriorityDisinherit+0xd8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <xTaskPriorityDisinherit+0xa8>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	4a0c      	ldr	r2, [pc, #48]	@ (8006b64 <xTaskPriorityDisinherit+0xd8>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4a09      	ldr	r2, [pc, #36]	@ (8006b68 <xTaskPriorityDisinherit+0xdc>)
 8006b42:	441a      	add	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe fb99 	bl	8005282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b54:	697b      	ldr	r3, [r7, #20]
	}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000828 	.word	0x20000828
 8006b64:	20000d04 	.word	0x20000d04
 8006b68:	2000082c 	.word	0x2000082c

08006b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b76:	4b21      	ldr	r3, [pc, #132]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7c:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fbda 	bl	800533c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b8e:	d10a      	bne.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b96:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4819      	ldr	r0, [pc, #100]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ba0:	f7fe fb6f 	bl	8005282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ba4:	e026      	b.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bae:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d209      	bcs.n	8006bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bbe:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe fb7d 	bl	80052ca <vListInsert>
}
 8006bd0:	e010      	b.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fb73 	bl	80052ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006be4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d202      	bcs.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bee:	4a08      	ldr	r2, [pc, #32]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6013      	str	r3, [r2, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000d00 	.word	0x20000d00
 8006c00:	20000828 	.word	0x20000828
 8006c04:	20000ce8 	.word	0x20000ce8
 8006c08:	20000cb8 	.word	0x20000cb8
 8006c0c:	20000cb4 	.word	0x20000cb4
 8006c10:	20000d1c 	.word	0x20000d1c

08006c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	@ 0x28
 8006c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c1e:	f000 fb13 	bl	8007248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c22:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <xTimerCreateTimerTask+0x84>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d021      	beq.n	8006c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c32:	1d3a      	adds	r2, r7, #4
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fad9 	bl	80051f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	460a      	mov	r2, r1
 8006c54:	4911      	ldr	r1, [pc, #68]	@ (8006c9c <xTimerCreateTimerTask+0x88>)
 8006c56:	4812      	ldr	r0, [pc, #72]	@ (8006ca0 <xTimerCreateTimerTask+0x8c>)
 8006c58:	f7ff f8d0 	bl	8005dfc <xTaskCreateStatic>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4a11      	ldr	r2, [pc, #68]	@ (8006ca4 <xTimerCreateTimerTask+0x90>)
 8006c60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c62:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <xTimerCreateTimerTask+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c8c:	697b      	ldr	r3, [r7, #20]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000d58 	.word	0x20000d58
 8006c9c:	08007d54 	.word	0x08007d54
 8006ca0:	08006de1 	.word	0x08006de1
 8006ca4:	20000d5c 	.word	0x20000d5c

08006ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	@ 0x28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	623b      	str	r3, [r7, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cd8:	4b19      	ldr	r3, [pc, #100]	@ (8006d40 <xTimerGenericCommand+0x98>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d02a      	beq.n	8006d36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b05      	cmp	r3, #5
 8006cf0:	dc18      	bgt.n	8006d24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cf2:	f7ff fead 	bl	8006a50 <xTaskGetSchedulerState>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d109      	bne.n	8006d10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cfc:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <xTimerGenericCommand+0x98>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	f107 0110 	add.w	r1, r7, #16
 8006d04:	2300      	movs	r3, #0
 8006d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d08:	f7fe fc88 	bl	800561c <xQueueGenericSend>
 8006d0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d0e:	e012      	b.n	8006d36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <xTimerGenericCommand+0x98>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	f107 0110 	add.w	r1, r7, #16
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f7fe fc7e 	bl	800561c <xQueueGenericSend>
 8006d20:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d22:	e008      	b.n	8006d36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <xTimerGenericCommand+0x98>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	f107 0110 	add.w	r1, r7, #16
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	f7fe fd76 	bl	8005820 <xQueueGenericSendFromISR>
 8006d34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3728      	adds	r7, #40	@ 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000d58 	.word	0x20000d58

08006d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4e:	4b23      	ldr	r3, [pc, #140]	@ (8006ddc <prvProcessExpiredTimer+0x98>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe faed 	bl	800533c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d023      	beq.n	8006db8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	18d1      	adds	r1, r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	6978      	ldr	r0, [r7, #20]
 8006d7e:	f000 f8d5 	bl	8006f2c <prvInsertTimerInActiveList>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d020      	beq.n	8006dca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	2100      	movs	r1, #0
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7ff ff88 	bl	8006ca8 <xTimerGenericCommand>
 8006d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d114      	bne.n	8006dca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	6978      	ldr	r0, [r7, #20]
 8006dd0:	4798      	blx	r3
}
 8006dd2:	bf00      	nop
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000d50 	.word	0x20000d50

08006de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f859 	bl	8006ea4 <prvGetNextExpireTime>
 8006df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4619      	mov	r1, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f805 	bl	8006e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dfe:	f000 f8d7 	bl	8006fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e02:	bf00      	nop
 8006e04:	e7f0      	b.n	8006de8 <prvTimerTask+0x8>
	...

08006e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e12:	f7ff fa37 	bl	8006284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f866 	bl	8006eec <prvSampleTimeNow>
 8006e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d130      	bne.n	8006e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <prvProcessTimerOrBlockTask+0x3c>
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d806      	bhi.n	8006e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e36:	f7ff fa33 	bl	80062a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff81 	bl	8006d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e42:	e024      	b.n	8006e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e4a:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <prvProcessTimerOrBlockTask+0x90>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <prvProcessTimerOrBlockTask+0x50>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <prvProcessTimerOrBlockTask+0x52>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e9c <prvProcessTimerOrBlockTask+0x94>)
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f7fe ff93 	bl	8005d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e6e:	f7ff fa17 	bl	80062a0 <xTaskResumeAll>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e78:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <prvProcessTimerOrBlockTask+0x98>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
}
 8006e88:	e001      	b.n	8006e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e8a:	f7ff fa09 	bl	80062a0 <xTaskResumeAll>
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000d54 	.word	0x20000d54
 8006e9c:	20000d58 	.word	0x20000d58
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eac:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee8 <prvGetNextExpireTime+0x44>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <prvGetNextExpireTime+0x16>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	e000      	b.n	8006ebc <prvGetNextExpireTime+0x18>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ec8:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <prvGetNextExpireTime+0x44>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e001      	b.n	8006ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20000d50 	.word	0x20000d50

08006eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ef4:	f7ff fa72 	bl	80063dc <xTaskGetTickCount>
 8006ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <prvSampleTimeNow+0x3c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d205      	bcs.n	8006f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f04:	f000 f93a 	bl	800717c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e002      	b.n	8006f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f16:	4a04      	ldr	r2, [pc, #16]	@ (8006f28 <prvSampleTimeNow+0x3c>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000d60 	.word	0x20000d60

08006f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d812      	bhi.n	8006f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d302      	bcc.n	8006f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	e01b      	b.n	8006f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f66:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <prvInsertTimerInActiveList+0x7c>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7fe f9aa 	bl	80052ca <vListInsert>
 8006f76:	e012      	b.n	8006f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d206      	bcs.n	8006f8e <prvInsertTimerInActiveList+0x62>
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d302      	bcc.n	8006f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e007      	b.n	8006f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <prvInsertTimerInActiveList+0x80>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe f996 	bl	80052ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000d54 	.word	0x20000d54
 8006fac:	20000d50 	.word	0x20000d50

08006fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08e      	sub	sp, #56	@ 0x38
 8006fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fb6:	e0ce      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da19      	bge.n	8006ff2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	61fb      	str	r3, [r7, #28]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe8:	6850      	ldr	r0, [r2, #4]
 8006fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fec:	6892      	ldr	r2, [r2, #8]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f2c0 80ae 	blt.w	8007156 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe f996 	bl	800533c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007010:	463b      	mov	r3, r7
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ff6a 	bl	8006eec <prvSampleTimeNow>
 8007018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b09      	cmp	r3, #9
 800701e:	f200 8097 	bhi.w	8007150 <prvProcessReceivedCommands+0x1a0>
 8007022:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <prvProcessReceivedCommands+0x78>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007051 	.word	0x08007051
 800702c:	08007051 	.word	0x08007051
 8007030:	08007051 	.word	0x08007051
 8007034:	080070c7 	.word	0x080070c7
 8007038:	080070db 	.word	0x080070db
 800703c:	08007127 	.word	0x08007127
 8007040:	08007051 	.word	0x08007051
 8007044:	08007051 	.word	0x08007051
 8007048:	080070c7 	.word	0x080070c7
 800704c:	080070db 	.word	0x080070db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	18d1      	adds	r1, r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007070:	f7ff ff5c 	bl	8006f2c <prvInsertTimerInActiveList>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d06c      	beq.n	8007154 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d061      	beq.n	8007154 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	441a      	add	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	2300      	movs	r3, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a2:	f7ff fe01 	bl	8006ca8 <xTimerGenericCommand>
 80070a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d152      	bne.n	8007154 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	61bb      	str	r3, [r7, #24]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070d8:	e03d      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	617b      	str	r3, [r7, #20]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	18d1      	adds	r1, r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007120:	f7ff ff04 	bl	8006f2c <prvInsertTimerInActiveList>
					break;
 8007124:	e017      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007136:	f000 fbe7 	bl	8007908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800713a:	e00c      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800714e:	e002      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <prvProcessReceivedCommands+0x1a6>
					break;
 8007154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007156:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <prvProcessReceivedCommands+0x1c8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1d39      	adds	r1, r7, #4
 800715c:	2200      	movs	r2, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fbfc 	bl	800595c <xQueueReceive>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f af26 	bne.w	8006fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	3730      	adds	r7, #48	@ 0x30
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000d58 	.word	0x20000d58

0800717c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007182:	e049      	b.n	8007218 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007184:	4b2e      	ldr	r3, [pc, #184]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718e:	4b2c      	ldr	r3, [pc, #176]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe f8cd 	bl	800533c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02f      	beq.n	8007218 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4413      	add	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d90e      	bls.n	80071e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe f872 	bl	80052ca <vListInsert>
 80071e6:	e017      	b.n	8007218 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	2100      	movs	r1, #0
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fd58 	bl	8006ca8 <xTimerGenericCommand>
 80071f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	603b      	str	r3, [r7, #0]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1b0      	bne.n	8007184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007228:	4b06      	ldr	r3, [pc, #24]	@ (8007244 <prvSwitchTimerLists+0xc8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a04      	ldr	r2, [pc, #16]	@ (8007240 <prvSwitchTimerLists+0xc4>)
 800722e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007230:	4a04      	ldr	r2, [pc, #16]	@ (8007244 <prvSwitchTimerLists+0xc8>)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6013      	str	r3, [r2, #0]
}
 8007236:	bf00      	nop
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000d50 	.word	0x20000d50
 8007244:	20000d54 	.word	0x20000d54

08007248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800724e:	f000 f96b 	bl	8007528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007252:	4b15      	ldr	r3, [pc, #84]	@ (80072a8 <prvCheckForValidListAndQueue+0x60>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d120      	bne.n	800729c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800725a:	4814      	ldr	r0, [pc, #80]	@ (80072ac <prvCheckForValidListAndQueue+0x64>)
 800725c:	f7fd ffe4 	bl	8005228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007260:	4813      	ldr	r0, [pc, #76]	@ (80072b0 <prvCheckForValidListAndQueue+0x68>)
 8007262:	f7fd ffe1 	bl	8005228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007266:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <prvCheckForValidListAndQueue+0x6c>)
 8007268:	4a10      	ldr	r2, [pc, #64]	@ (80072ac <prvCheckForValidListAndQueue+0x64>)
 800726a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800726c:	4b12      	ldr	r3, [pc, #72]	@ (80072b8 <prvCheckForValidListAndQueue+0x70>)
 800726e:	4a10      	ldr	r2, [pc, #64]	@ (80072b0 <prvCheckForValidListAndQueue+0x68>)
 8007270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007272:	2300      	movs	r3, #0
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <prvCheckForValidListAndQueue+0x74>)
 8007278:	4a11      	ldr	r2, [pc, #68]	@ (80072c0 <prvCheckForValidListAndQueue+0x78>)
 800727a:	2110      	movs	r1, #16
 800727c:	200a      	movs	r0, #10
 800727e:	f7fe f8f1 	bl	8005464 <xQueueGenericCreateStatic>
 8007282:	4603      	mov	r3, r0
 8007284:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <prvCheckForValidListAndQueue+0x60>)
 8007286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007288:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <prvCheckForValidListAndQueue+0x60>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007290:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <prvCheckForValidListAndQueue+0x60>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	490b      	ldr	r1, [pc, #44]	@ (80072c4 <prvCheckForValidListAndQueue+0x7c>)
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fd52 	bl	8005d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800729c:	f000 f976 	bl	800758c <vPortExitCritical>
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000d58 	.word	0x20000d58
 80072ac:	20000d28 	.word	0x20000d28
 80072b0:	20000d3c 	.word	0x20000d3c
 80072b4:	20000d50 	.word	0x20000d50
 80072b8:	20000d54 	.word	0x20000d54
 80072bc:	20000e04 	.word	0x20000e04
 80072c0:	20000d64 	.word	0x20000d64
 80072c4:	08007d5c 	.word	0x08007d5c

080072c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b04      	subs	r3, #4
 80072d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072f8:	4a0c      	ldr	r2, [pc, #48]	@ (800732c <pxPortInitialiseStack+0x64>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b14      	subs	r3, #20
 8007302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b04      	subs	r3, #4
 800730e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f06f 0202 	mvn.w	r2, #2
 8007316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3b20      	subs	r3, #32
 800731c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800731e:	68fb      	ldr	r3, [r7, #12]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	08007331 	.word	0x08007331

08007330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800733a:	4b13      	ldr	r3, [pc, #76]	@ (8007388 <prvTaskExitError+0x58>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007342:	d00b      	beq.n	800735c <prvTaskExitError+0x2c>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <prvTaskExitError+0x28>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	60bb      	str	r3, [r7, #8]
}
 800736e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007370:	bf00      	nop
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0fc      	beq.n	8007372 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000000c 	.word	0x2000000c
 800738c:	00000000 	.word	0x00000000

08007390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007390:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <pxCurrentTCBConst2>)
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	6808      	ldr	r0, [r1, #0]
 8007396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739a:	f380 8809 	msr	PSP, r0
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8811 	msr	BASEPRI, r0
 80073aa:	4770      	bx	lr
 80073ac:	f3af 8000 	nop.w

080073b0 <pxCurrentTCBConst2>:
 80073b0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop

080073b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073b8:	4808      	ldr	r0, [pc, #32]	@ (80073dc <prvPortStartFirstTask+0x24>)
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	6800      	ldr	r0, [r0, #0]
 80073be:	f380 8808 	msr	MSP, r0
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8814 	msr	CONTROL, r0
 80073ca:	b662      	cpsie	i
 80073cc:	b661      	cpsie	f
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	df00      	svc	0
 80073d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073da:	bf00      	nop
 80073dc:	e000ed08 	.word	0xe000ed08

080073e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073e6:	4b47      	ldr	r3, [pc, #284]	@ (8007504 <xPortStartScheduler+0x124>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a47      	ldr	r2, [pc, #284]	@ (8007508 <xPortStartScheduler+0x128>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d10b      	bne.n	8007408 <xPortStartScheduler+0x28>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007408:	4b3e      	ldr	r3, [pc, #248]	@ (8007504 <xPortStartScheduler+0x124>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a3f      	ldr	r2, [pc, #252]	@ (800750c <xPortStartScheduler+0x12c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10b      	bne.n	800742a <xPortStartScheduler+0x4a>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800742a:	4b39      	ldr	r3, [pc, #228]	@ (8007510 <xPortStartScheduler+0x130>)
 800742c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	22ff      	movs	r2, #255	@ 0xff
 800743a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b31      	ldr	r3, [pc, #196]	@ (8007514 <xPortStartScheduler+0x134>)
 8007450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007452:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <xPortStartScheduler+0x138>)
 8007454:	2207      	movs	r2, #7
 8007456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007458:	e009      	b.n	800746e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800745a:	4b2f      	ldr	r3, [pc, #188]	@ (8007518 <xPortStartScheduler+0x138>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3b01      	subs	r3, #1
 8007460:	4a2d      	ldr	r2, [pc, #180]	@ (8007518 <xPortStartScheduler+0x138>)
 8007462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	b2db      	uxtb	r3, r3
 800746c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b80      	cmp	r3, #128	@ 0x80
 8007478:	d0ef      	beq.n	800745a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800747a:	4b27      	ldr	r3, [pc, #156]	@ (8007518 <xPortStartScheduler+0x138>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1c3 0307 	rsb	r3, r3, #7
 8007482:	2b04      	cmp	r3, #4
 8007484:	d00b      	beq.n	800749e <xPortStartScheduler+0xbe>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60bb      	str	r3, [r7, #8]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800749e:	4b1e      	ldr	r3, [pc, #120]	@ (8007518 <xPortStartScheduler+0x138>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007518 <xPortStartScheduler+0x138>)
 80074a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <xPortStartScheduler+0x138>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074b0:	4a19      	ldr	r2, [pc, #100]	@ (8007518 <xPortStartScheduler+0x138>)
 80074b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074bc:	4b17      	ldr	r3, [pc, #92]	@ (800751c <xPortStartScheduler+0x13c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a16      	ldr	r2, [pc, #88]	@ (800751c <xPortStartScheduler+0x13c>)
 80074c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074c8:	4b14      	ldr	r3, [pc, #80]	@ (800751c <xPortStartScheduler+0x13c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a13      	ldr	r2, [pc, #76]	@ (800751c <xPortStartScheduler+0x13c>)
 80074ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074d4:	f000 f8da 	bl	800768c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074d8:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <xPortStartScheduler+0x140>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074de:	f000 f8f9 	bl	80076d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074e2:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <xPortStartScheduler+0x144>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007524 <xPortStartScheduler+0x144>)
 80074e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074ee:	f7ff ff63 	bl	80073b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074f2:	f7ff f83d 	bl	8006570 <vTaskSwitchContext>
	prvTaskExitError();
 80074f6:	f7ff ff1b 	bl	8007330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	e000ed00 	.word	0xe000ed00
 8007508:	410fc271 	.word	0x410fc271
 800750c:	410fc270 	.word	0x410fc270
 8007510:	e000e400 	.word	0xe000e400
 8007514:	20000e54 	.word	0x20000e54
 8007518:	20000e58 	.word	0x20000e58
 800751c:	e000ed20 	.word	0xe000ed20
 8007520:	2000000c 	.word	0x2000000c
 8007524:	e000ef34 	.word	0xe000ef34

08007528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007542:	4b10      	ldr	r3, [pc, #64]	@ (8007584 <vPortEnterCritical+0x5c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a0e      	ldr	r2, [pc, #56]	@ (8007584 <vPortEnterCritical+0x5c>)
 800754a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800754c:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <vPortEnterCritical+0x5c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d110      	bne.n	8007576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007554:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <vPortEnterCritical+0x60>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <vPortEnterCritical+0x4e>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	603b      	str	r3, [r7, #0]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <vPortEnterCritical+0x4a>
	}
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000000c 	.word	0x2000000c
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007592:	4b12      	ldr	r3, [pc, #72]	@ (80075dc <vPortExitCritical+0x50>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <vPortExitCritical+0x26>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	607b      	str	r3, [r7, #4]
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	e7fd      	b.n	80075ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075b2:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <vPortExitCritical+0x50>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	4a08      	ldr	r2, [pc, #32]	@ (80075dc <vPortExitCritical+0x50>)
 80075ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075bc:	4b07      	ldr	r3, [pc, #28]	@ (80075dc <vPortExitCritical+0x50>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d105      	bne.n	80075d0 <vPortExitCritical+0x44>
 80075c4:	2300      	movs	r3, #0
 80075c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f383 8811 	msr	BASEPRI, r3
}
 80075ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	2000000c 	.word	0x2000000c

080075e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075e0:	f3ef 8009 	mrs	r0, PSP
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	4b15      	ldr	r3, [pc, #84]	@ (8007640 <pxCurrentTCBConst>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	f01e 0f10 	tst.w	lr, #16
 80075f0:	bf08      	it	eq
 80075f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	6010      	str	r0, [r2, #0]
 80075fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007604:	f380 8811 	msr	BASEPRI, r0
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f7fe ffae 	bl	8006570 <vTaskSwitchContext>
 8007614:	f04f 0000 	mov.w	r0, #0
 8007618:	f380 8811 	msr	BASEPRI, r0
 800761c:	bc09      	pop	{r0, r3}
 800761e:	6819      	ldr	r1, [r3, #0]
 8007620:	6808      	ldr	r0, [r1, #0]
 8007622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007626:	f01e 0f10 	tst.w	lr, #16
 800762a:	bf08      	it	eq
 800762c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007630:	f380 8809 	msr	PSP, r0
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	f3af 8000 	nop.w

08007640 <pxCurrentTCBConst>:
 8007640:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop

08007648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007662:	f7fe fecb 	bl	80063fc <xTaskIncrementTick>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800766c:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <xPortSysTickHandler+0x40>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f383 8811 	msr	BASEPRI, r3
}
 800767e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <vPortSetupTimerInterrupt+0x34>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007696:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <vPortSetupTimerInterrupt+0x38>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800769c:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <vPortSetupTimerInterrupt+0x3c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <vPortSetupTimerInterrupt+0x40>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	4a09      	ldr	r2, [pc, #36]	@ (80076d0 <vPortSetupTimerInterrupt+0x44>)
 80076aa:	3b01      	subs	r3, #1
 80076ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ae:	4b04      	ldr	r3, [pc, #16]	@ (80076c0 <vPortSetupTimerInterrupt+0x34>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	e000e010 	.word	0xe000e010
 80076c4:	e000e018 	.word	0xe000e018
 80076c8:	20000000 	.word	0x20000000
 80076cc:	10624dd3 	.word	0x10624dd3
 80076d0:	e000e014 	.word	0xe000e014

080076d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076e4 <vPortEnableVFP+0x10>
 80076d8:	6801      	ldr	r1, [r0, #0]
 80076da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80076de:	6001      	str	r1, [r0, #0]
 80076e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076e2:	bf00      	nop
 80076e4:	e000ed88 	.word	0xe000ed88

080076e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ee:	f3ef 8305 	mrs	r3, IPSR
 80076f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d915      	bls.n	8007726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076fa:	4a18      	ldr	r2, [pc, #96]	@ (800775c <vPortValidateInterruptPriority+0x74>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007704:	4b16      	ldr	r3, [pc, #88]	@ (8007760 <vPortValidateInterruptPriority+0x78>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	7afa      	ldrb	r2, [r7, #11]
 800770a:	429a      	cmp	r2, r3
 800770c:	d20b      	bcs.n	8007726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007726:	4b0f      	ldr	r3, [pc, #60]	@ (8007764 <vPortValidateInterruptPriority+0x7c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800772e:	4b0e      	ldr	r3, [pc, #56]	@ (8007768 <vPortValidateInterruptPriority+0x80>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d90b      	bls.n	800774e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	603b      	str	r3, [r7, #0]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vPortValidateInterruptPriority+0x62>
	}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	e000e3f0 	.word	0xe000e3f0
 8007760:	20000e54 	.word	0x20000e54
 8007764:	e000ed0c 	.word	0xe000ed0c
 8007768:	20000e58 	.word	0x20000e58

0800776c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	@ 0x28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007778:	f7fe fd84 	bl	8006284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800777c:	4b5c      	ldr	r3, [pc, #368]	@ (80078f0 <pvPortMalloc+0x184>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007784:	f000 f924 	bl	80079d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007788:	4b5a      	ldr	r3, [pc, #360]	@ (80078f4 <pvPortMalloc+0x188>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	f040 8095 	bne.w	80078c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01e      	beq.n	80077da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800779c:	2208      	movs	r2, #8
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d015      	beq.n	80077da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f023 0307 	bic.w	r3, r3, #7
 80077b4:	3308      	adds	r3, #8
 80077b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <pvPortMalloc+0x6e>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	617b      	str	r3, [r7, #20]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d06f      	beq.n	80078c0 <pvPortMalloc+0x154>
 80077e0:	4b45      	ldr	r3, [pc, #276]	@ (80078f8 <pvPortMalloc+0x18c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d86a      	bhi.n	80078c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ea:	4b44      	ldr	r3, [pc, #272]	@ (80078fc <pvPortMalloc+0x190>)
 80077ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077ee:	4b43      	ldr	r3, [pc, #268]	@ (80078fc <pvPortMalloc+0x190>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077f4:	e004      	b.n	8007800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <pvPortMalloc+0xa6>
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f1      	bne.n	80077f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007812:	4b37      	ldr	r3, [pc, #220]	@ (80078f0 <pvPortMalloc+0x184>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007818:	429a      	cmp	r2, r3
 800781a:	d051      	beq.n	80078c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2208      	movs	r2, #8
 8007822:	4413      	add	r3, r2
 8007824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	2308      	movs	r3, #8
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	429a      	cmp	r2, r3
 800783c:	d920      	bls.n	8007880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800783e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <pvPortMalloc+0xfc>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800787a:	69b8      	ldr	r0, [r7, #24]
 800787c:	f000 f90a 	bl	8007a94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007880:	4b1d      	ldr	r3, [pc, #116]	@ (80078f8 <pvPortMalloc+0x18c>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	4a1b      	ldr	r2, [pc, #108]	@ (80078f8 <pvPortMalloc+0x18c>)
 800788c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800788e:	4b1a      	ldr	r3, [pc, #104]	@ (80078f8 <pvPortMalloc+0x18c>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b1b      	ldr	r3, [pc, #108]	@ (8007900 <pvPortMalloc+0x194>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d203      	bcs.n	80078a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800789a:	4b17      	ldr	r3, [pc, #92]	@ (80078f8 <pvPortMalloc+0x18c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a18      	ldr	r2, [pc, #96]	@ (8007900 <pvPortMalloc+0x194>)
 80078a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <pvPortMalloc+0x188>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	431a      	orrs	r2, r3
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078b6:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <pvPortMalloc+0x198>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a11      	ldr	r2, [pc, #68]	@ (8007904 <pvPortMalloc+0x198>)
 80078be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078c0:	f7fe fcee 	bl	80062a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <pvPortMalloc+0x17a>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60fb      	str	r3, [r7, #12]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <pvPortMalloc+0x176>
	return pvReturn;
 80078e6:	69fb      	ldr	r3, [r7, #28]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3728      	adds	r7, #40	@ 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20004a64 	.word	0x20004a64
 80078f4:	20004a78 	.word	0x20004a78
 80078f8:	20004a68 	.word	0x20004a68
 80078fc:	20004a5c 	.word	0x20004a5c
 8007900:	20004a6c 	.word	0x20004a6c
 8007904:	20004a70 	.word	0x20004a70

08007908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d04f      	beq.n	80079ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800791a:	2308      	movs	r3, #8
 800791c:	425b      	negs	r3, r3
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4413      	add	r3, r2
 8007922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	4b25      	ldr	r3, [pc, #148]	@ (80079c4 <vPortFree+0xbc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <vPortFree+0x46>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00b      	beq.n	800796e <vPortFree+0x66>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60bb      	str	r3, [r7, #8]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	4b14      	ldr	r3, [pc, #80]	@ (80079c4 <vPortFree+0xbc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11a      	bne.n	80079ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4b0e      	ldr	r3, [pc, #56]	@ (80079c4 <vPortFree+0xbc>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	43db      	mvns	r3, r3
 800798e:	401a      	ands	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007994:	f7fe fc76 	bl	8006284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <vPortFree+0xc0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	4a09      	ldr	r2, [pc, #36]	@ (80079c8 <vPortFree+0xc0>)
 80079a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079a6:	6938      	ldr	r0, [r7, #16]
 80079a8:	f000 f874 	bl	8007a94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vPortFree+0xc4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	4a06      	ldr	r2, [pc, #24]	@ (80079cc <vPortFree+0xc4>)
 80079b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079b6:	f7fe fc73 	bl	80062a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ba:	bf00      	nop
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20004a78 	.word	0x20004a78
 80079c8:	20004a68 	.word	0x20004a68
 80079cc:	20004a74 	.word	0x20004a74

080079d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80079da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079dc:	4b27      	ldr	r3, [pc, #156]	@ (8007a7c <prvHeapInit+0xac>)
 80079de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00c      	beq.n	8007a04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3307      	adds	r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0307 	bic.w	r3, r3, #7
 80079f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	4a1f      	ldr	r2, [pc, #124]	@ (8007a7c <prvHeapInit+0xac>)
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a08:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <prvHeapInit+0xb0>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007a80 <prvHeapInit+0xb0>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0307 	bic.w	r3, r3, #7
 8007a2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <prvHeapInit+0xb4>)
 8007a30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a32:	4b14      	ldr	r3, [pc, #80]	@ (8007a84 <prvHeapInit+0xb4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a3a:	4b12      	ldr	r3, [pc, #72]	@ (8007a84 <prvHeapInit+0xb4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	1ad2      	subs	r2, r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a50:	4b0c      	ldr	r3, [pc, #48]	@ (8007a84 <prvHeapInit+0xb4>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a88 <prvHeapInit+0xb8>)
 8007a5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4a09      	ldr	r2, [pc, #36]	@ (8007a8c <prvHeapInit+0xbc>)
 8007a66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a68:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <prvHeapInit+0xc0>)
 8007a6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a6e:	601a      	str	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	20000e5c 	.word	0x20000e5c
 8007a80:	20004a5c 	.word	0x20004a5c
 8007a84:	20004a64 	.word	0x20004a64
 8007a88:	20004a6c 	.word	0x20004a6c
 8007a8c:	20004a68 	.word	0x20004a68
 8007a90:	20004a78 	.word	0x20004a78

08007a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <prvInsertBlockIntoFreeList+0xac>)
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e002      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x14>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d8f7      	bhi.n	8007aa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4413      	add	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d108      	bne.n	8007ad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	441a      	add	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d118      	bne.n	8007b1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b15      	ldr	r3, [pc, #84]	@ (8007b44 <prvInsertBlockIntoFreeList+0xb0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d00d      	beq.n	8007b12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e008      	b.n	8007b24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b12:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <prvInsertBlockIntoFreeList+0xb0>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e003      	b.n	8007b24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d002      	beq.n	8007b32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20004a5c 	.word	0x20004a5c
 8007b44:	20004a64 	.word	0x20004a64

08007b48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd f9d1 	bl	8004efe <USBH_LL_IncTimer>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fa15 	bl	8004fa2 <USBH_LL_Connect>
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fd fa2a 	bl	8004fe8 <USBH_LL_Disconnect>
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fa4a 	bl	800504c <USBH_LL_NotifyURBChange>
#endif
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fd f9bf 	bl	8004f52 <USBH_LL_PortEnabled>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd f9cb 	bl	8004f86 <USBH_LL_PortDisabled>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 fd8f 	bl	8001732 <HAL_HCD_Stop>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f808 	bl	8007c30 <USBH_Get_USB_Status>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d817      	bhi.n	8007c74 <USBH_Get_USB_Status+0x44>
 8007c44:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <USBH_Get_USB_Status+0x1c>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c5d 	.word	0x08007c5d
 8007c50:	08007c63 	.word	0x08007c63
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c6f 	.word	0x08007c6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c60:	e00b      	b.n	8007c7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c62:	2302      	movs	r3, #2
 8007c64:	73fb      	strb	r3, [r7, #15]
    break;
 8007c66:	e008      	b.n	8007c7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6c:	e005      	b.n	8007c7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	73fb      	strb	r3, [r7, #15]
    break;
 8007c72:	e002      	b.n	8007c7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	73fb      	strb	r3, [r7, #15]
    break;
 8007c78:	bf00      	nop
  }
  return usb_status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <memset>:
 8007c88:	4402      	add	r2, r0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <memset+0xa>
 8007c90:	4770      	bx	lr
 8007c92:	f803 1b01 	strb.w	r1, [r3], #1
 8007c96:	e7f9      	b.n	8007c8c <memset+0x4>

08007c98 <__libc_init_array>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd0 <__libc_init_array+0x38>)
 8007c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd4 <__libc_init_array+0x3c>)
 8007c9e:	1b64      	subs	r4, r4, r5
 8007ca0:	10a4      	asrs	r4, r4, #2
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	d109      	bne.n	8007cbc <__libc_init_array+0x24>
 8007ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd8 <__libc_init_array+0x40>)
 8007caa:	4c0c      	ldr	r4, [pc, #48]	@ (8007cdc <__libc_init_array+0x44>)
 8007cac:	f000 f826 	bl	8007cfc <_init>
 8007cb0:	1b64      	subs	r4, r4, r5
 8007cb2:	10a4      	asrs	r4, r4, #2
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	42a6      	cmp	r6, r4
 8007cb8:	d105      	bne.n	8007cc6 <__libc_init_array+0x2e>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc0:	4798      	blx	r3
 8007cc2:	3601      	adds	r6, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__libc_init_array+0xc>
 8007cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cca:	4798      	blx	r3
 8007ccc:	3601      	adds	r6, #1
 8007cce:	e7f2      	b.n	8007cb6 <__libc_init_array+0x1e>
 8007cd0:	08007d84 	.word	0x08007d84
 8007cd4:	08007d84 	.word	0x08007d84
 8007cd8:	08007d84 	.word	0x08007d84
 8007cdc:	08007d88 	.word	0x08007d88

08007ce0 <memcpy>:
 8007ce0:	440a      	add	r2, r1
 8007ce2:	4291      	cmp	r1, r2
 8007ce4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ce8:	d100      	bne.n	8007cec <memcpy+0xc>
 8007cea:	4770      	bx	lr
 8007cec:	b510      	push	{r4, lr}
 8007cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cf6:	4291      	cmp	r1, r2
 8007cf8:	d1f9      	bne.n	8007cee <memcpy+0xe>
 8007cfa:	bd10      	pop	{r4, pc}

08007cfc <_init>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr

08007d08 <_fini>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr
