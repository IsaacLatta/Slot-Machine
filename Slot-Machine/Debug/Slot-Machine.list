
Slot-Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08009234  08009234  0000a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009378  08009378  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009378  08009378  0000a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009380  08009380  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009380  08009380  0000a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009388  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004f9c  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005008  20005008  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb07  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004443  00000000  00000000  00026ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  0002afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ac  00000000  00000000  0002c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e90  00000000  00000000  0002daec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb40  00000000  00000000  0003397c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6dd1  00000000  00000000  000504bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012728d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007024  00000000  00000000  001272d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0012e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800921c 	.word	0x0800921c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800921c 	.word	0x0800921c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 ff41 	bl	80013ec <HAL_Init>

  /* USER CODE BEGIN Init */
  srand((unsigned int) xTaskGetTickCount());
 800056a:	f006 f9e3 	bl	8006934 <xTaskGetTickCount>
 800056e:	4603      	mov	r3, r0
 8000570:	4618      	mov	r0, r3
 8000572:	f007 feef 	bl	8008354 <srand>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f857 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f953 	bl	8000824 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057e:	f000 f8bd 	bl	80006fc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000582:	f000 f8e9 	bl	8000758 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000586:	f000 f917 	bl	80007b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058a:	f005 f841 	bl	8005610 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	200a      	movs	r0, #10
 8000594:	f005 fa8f 	bl	8005ab6 <xQueueGenericCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <main+0xa8>)
 800059c:	6013      	str	r3, [r2, #0]
  xAnimationQueue = xQueueCreate(5, sizeof(Animation_t));
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	2005      	movs	r0, #5
 80005a4:	f005 fa87 	bl	8005ab6 <xQueueGenericCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a18      	ldr	r2, [pc, #96]	@ (800060c <main+0xac>)
 80005ac:	6013      	str	r3, [r2, #0]
  if(xEventQueue == NULL || xAnimationQueue == NULL) {
 80005ae:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <main+0xa8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <main+0x5e>
 80005b6:	4b15      	ldr	r3, [pc, #84]	@ (800060c <main+0xac>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <main+0x62>
	  Error_Handler();
 80005be:	f000 fc85 	bl	8000ecc <Error_Handler>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(AnimateTask, "Animator", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	4910      	ldr	r1, [pc, #64]	@ (8000610 <main+0xb0>)
 80005d0:	4810      	ldr	r0, [pc, #64]	@ (8000614 <main+0xb4>)
 80005d2:	f005 ff1f 	bl	8006414 <xTaskCreate>
  xTaskCreate(PollButtonTask, "PollButton", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +1, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	490d      	ldr	r1, [pc, #52]	@ (8000618 <main+0xb8>)
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <main+0xbc>)
 80005e6:	f005 ff15 	bl	8006414 <xTaskCreate>
  xTaskCreate(StateMachineTask, "HandleStateLogic", configMINIMAL_STACK_SIZE, 128, tskIDLE_PRIORITY +2, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	490a      	ldr	r1, [pc, #40]	@ (8000620 <main+0xc0>)
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <main+0xc4>)
 80005fa:	f005 ff0b 	bl	8006414 <xTaskCreate>
  vTaskStartScheduler();
 80005fe:	f006 f885 	bl	800670c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <main+0xa2>
 8000606:	bf00      	nop
 8000608:	2000017c 	.word	0x2000017c
 800060c:	20000180 	.word	0x20000180
 8000610:	08009234 	.word	0x08009234
 8000614:	08000c59 	.word	0x08000c59
 8000618:	08009240 	.word	0x08009240
 800061c:	08000ca9 	.word	0x08000ca9
 8000620:	0800924c 	.word	0x0800924c
 8000624:	08000ddd 	.word	0x08000ddd

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fffd 	bl	8008636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fd66 	bl	8004180 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 fc07 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ffc7 	bl	8004670 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 fbf0 	bl	8000ecc <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	@ 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 ff3d 	bl	80035b8 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fbc2 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000088 	.word	0x20000088
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_I2S3_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <MX_I2S3_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_I2S3_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000798:	f003 f852 	bl	8003840 <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 fb93 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	40003c00 	.word	0x40003c00
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_SPI1_Init+0x64>)
 800080a:	f004 fa7f 	bl	8004d0c <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 fb5a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000124 	.word	0x20000124
 8000820:	40013000 	.word	0x40013000

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4b71      	ldr	r3, [pc, #452]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a70      	ldr	r2, [pc, #448]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b6e      	ldr	r3, [pc, #440]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a69      	ldr	r2, [pc, #420]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b67      	ldr	r3, [pc, #412]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b63      	ldr	r3, [pc, #396]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a62      	ldr	r2, [pc, #392]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b60      	ldr	r3, [pc, #384]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b5c      	ldr	r3, [pc, #368]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a5b      	ldr	r2, [pc, #364]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b59      	ldr	r3, [pc, #356]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b55      	ldr	r3, [pc, #340]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a54      	ldr	r2, [pc, #336]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b52      	ldr	r3, [pc, #328]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a04 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4848      	ldr	r0, [pc, #288]	@ (8000a08 <MX_GPIO_Init+0x1e4>)
 80008e8:	f001 f88c 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4846      	ldr	r0, [pc, #280]	@ (8000a0c <MX_GPIO_Init+0x1e8>)
 80008f2:	f001 f887 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008fc:	4844      	ldr	r0, [pc, #272]	@ (8000a10 <MX_GPIO_Init+0x1ec>)
 80008fe:	f001 f881 	bl	8001a04 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483b      	ldr	r0, [pc, #236]	@ (8000a08 <MX_GPIO_Init+0x1e4>)
 800091a:	f000 febf 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4835      	ldr	r0, [pc, #212]	@ (8000a0c <MX_GPIO_Init+0x1e8>)
 8000936:	f000 feb1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	482d      	ldr	r0, [pc, #180]	@ (8000a0c <MX_GPIO_Init+0x1e8>)
 8000956:	f000 fea1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_GPIO_Init+0x1f0>)
 800096e:	f000 fe95 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000972:	2304      	movs	r3, #4
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x1f4>)
 8000986:	f000 fe89 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099c:	2305      	movs	r3, #5
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <MX_GPIO_Init+0x1f4>)
 80009a8:	f000 fe78 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ac:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4812      	ldr	r0, [pc, #72]	@ (8000a10 <MX_GPIO_Init+0x1ec>)
 80009c6:	f000 fe69 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_GPIO_Init+0x1ec>)
 80009de:	f000 fe5d 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_GPIO_Init+0x1e4>)
 80009f8:	f000 fe50 	bl	800169c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	@ 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <writeAllLeds>:

/* USER CODE BEGIN 4 */

// green, orange, red, blue

static void writeAllLeds(GPIO_PinState state) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 4; ++i) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e00b      	b.n	8000a44 <writeAllLeds+0x28>
		HAL_GPIO_WritePin(LED_PORT, LEDS[i], state);
 8000a2c:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <writeAllLeds+0x38>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <writeAllLeds+0x3c>)
 8000a3a:	f000 ffe3 	bl	8001a04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	ddf0      	ble.n	8000a2c <writeAllLeds+0x10>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08009278 	.word	0x08009278
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <wheelAnimation>:
	static int toggle = 0;
	writeAllLeds(toggle ? GPIO_PIN_SET : GPIO_PIN_RESET);
	toggle = !toggle;
}

static void wheelAnimation(void* arg) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	int* finalIndex = (int*)arg;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	61bb      	str	r3, [r7, #24]
	const int spins = 5;
 8000a68:	2305      	movs	r3, #5
 8000a6a:	617b      	str	r3, [r7, #20]
	const int totalSpins = (spins*4) + *finalIndex + 1;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	009a      	lsls	r2, r3, #2
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]

	const TickType_t delayMs_inc = 20;
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	60fb      	str	r3, [r7, #12]
	TickType_t delayMs = 50;
 8000a7e:	2332      	movs	r3, #50	@ 0x32
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
	int current_i = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	e028      	b.n	8000ade <wheelAnimation+0x82>
		writeAllLeds(GPIO_PIN_RESET);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ffc5 	bl	8000a1c <writeAllLeds>

		HAL_GPIO_WritePin(LED_PORT, LEDS[current_i], GPIO_PIN_SET);
 8000a92:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <wheelAnimation+0xac>)
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481b      	ldr	r0, [pc, #108]	@ (8000b0c <wheelAnimation+0xb0>)
 8000aa0:	f000 ffb0 	bl	8001a04 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(delayMs));
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	4a18      	ldr	r2, [pc, #96]	@ (8000b10 <wheelAnimation+0xb4>)
 8000ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab4:	099b      	lsrs	r3, r3, #6
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fdf2 	bl	80066a0 <vTaskDelay>
		delayMs += delayMs_inc;
 8000abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
		current_i = (current_i + 1) % 4;
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	425a      	negs	r2, r3
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	f002 0203 	and.w	r2, r2, #3
 8000ad2:	bf58      	it	pl
 8000ad4:	4253      	negpl	r3, r2
 8000ad6:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < totalSpins; ++i) {
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	3301      	adds	r3, #1
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbd2      	blt.n	8000a8c <wheelAnimation+0x30>
	}
	writeAllLeds(GPIO_PIN_RESET);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ff98 	bl	8000a1c <writeAllLeds>
	HAL_GPIO_WritePin(LED_PORT, LEDS[*finalIndex], GPIO_PIN_SET);
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <wheelAnimation+0xac>)
 8000af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <wheelAnimation+0xb0>)
 8000afc:	f000 ff82 	bl	8001a04 <HAL_GPIO_WritePin>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	@ 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08009278 	.word	0x08009278
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	10624dd3 	.word	0x10624dd3

08000b14 <collectedAnimation>:


static void collectedAnimation(void* args) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	int* collectedMask = (int*)args;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]
	for(int j = 0; j < 4; ++j) {
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e026      	b.n	8000b74 <collectedAnimation+0x60>
		for(int i = 0; i < 4; ++i) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	e014      	b.n	8000b56 <collectedAnimation+0x42>
			if(*collectedMask & (1 << i)) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	fa42 f303 	asr.w	r3, r2, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <collectedAnimation+0x3c>
				HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000b3e:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <collectedAnimation+0x70>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <collectedAnimation+0x74>)
 8000b4c:	f000 ff5a 	bl	8001a04 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; ++i) {
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	3301      	adds	r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dde7      	ble.n	8000b2c <collectedAnimation+0x18>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 8000b5c:	20c8      	movs	r0, #200	@ 0xc8
 8000b5e:	f005 fd9f 	bl	80066a0 <vTaskDelay>
		writeAllLeds(GPIO_PIN_RESET);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ff5a 	bl	8000a1c <writeAllLeds>
		vTaskDelay(pdMS_TO_TICKS(200));
 8000b68:	20c8      	movs	r0, #200	@ 0xc8
 8000b6a:	f005 fd99 	bl	80066a0 <vTaskDelay>
	for(int j = 0; j < 4; ++j) {
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	ddd5      	ble.n	8000b26 <collectedAnimation+0x12>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08009278 	.word	0x08009278
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <loseAnimation>:

static void loseAnimation(void* args) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e014      	b.n	8000bc4 <loseAnimation+0x38>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba0:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <loseAnimation+0x58>)
 8000ba2:	f000 ff2f 	bl	8001a04 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000ba6:	20fa      	movs	r0, #250	@ 0xfa
 8000ba8:	f005 fd7a 	bl	80066a0 <vTaskDelay>
		HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <loseAnimation+0x58>)
 8000bb4:	f000 ff26 	bl	8001a04 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000bb8:	20fa      	movs	r0, #250	@ 0xfa
 8000bba:	f005 fd71 	bl	80066a0 <vTaskDelay>
	for (int i = 0; i < 3; i++) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	dde7      	ble.n	8000b9a <loseAnimation+0xe>
	}

	writeAllLeds(GPIO_PIN_SET);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff26 	bl	8000a1c <writeAllLeds>
	vTaskDelay(pdMS_TO_TICKS(200));
 8000bd0:	20c8      	movs	r0, #200	@ 0xc8
 8000bd2:	f005 fd65 	bl	80066a0 <vTaskDelay>
	writeAllLeds(GPIO_PIN_RESET);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff20 	bl	8000a1c <writeAllLeds>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <winningAnimation>:

static void winningAnimation(void* args) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    for (int cycle = 0; cycle < 3; cycle++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e01a      	b.n	8000c2c <winningAnimation+0x44>
        for (int i = 0; i < 4; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	e011      	b.n	8000c20 <winningAnimation+0x38>
            writeAllLeds(GPIO_PIN_RESET);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff ff0d 	bl	8000a1c <writeAllLeds>
            HAL_GPIO_WritePin(LED_PORT, LEDS[i], GPIO_PIN_SET);
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <winningAnimation+0x68>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <winningAnimation+0x6c>)
 8000c10:	f000 fef8 	bl	8001a04 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(150));
 8000c14:	2096      	movs	r0, #150	@ 0x96
 8000c16:	f005 fd43 	bl	80066a0 <vTaskDelay>
        for (int i = 0; i < 4; i++) {
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	ddea      	ble.n	8000bfc <winningAnimation+0x14>
    for (int cycle = 0; cycle < 3; cycle++) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	dde1      	ble.n	8000bf6 <winningAnimation+0xe>
        }
    }

    writeAllLeds(GPIO_PIN_SET);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fef2 	bl	8000a1c <writeAllLeds>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3c:	f005 fd30 	bl	80066a0 <vTaskDelay>
    writeAllLeds(GPIO_PIN_RESET);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff feeb 	bl	8000a1c <writeAllLeds>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08009278 	.word	0x08009278
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <AnimateTask>:

void AnimateTask(void *args) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	Animation_t next;
	SystemEvent_t evt;
	for(;;) {
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <AnimateTask+0x48>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f107 0110 	add.w	r1, r7, #16
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 f921 	bl	8005eb4 <xQueueReceive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d10f      	bne.n	8000c98 <AnimateTask+0x40>
			next.animation(next.args);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4798      	blx	r3

			evt.type = EVT_ANIM_COMPLETE;
 8000c80:	2302      	movs	r3, #2
 8000c82:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
			xQueueSend(xEventQueue, &evt, 0);
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <AnimateTask+0x4c>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	f107 0108 	add.w	r1, r7, #8
 8000c90:	2300      	movs	r3, #0
 8000c92:	2200      	movs	r2, #0
 8000c94:	f004 ff6e 	bl	8005b74 <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8000c98:	2032      	movs	r0, #50	@ 0x32
 8000c9a:	f005 fd01 	bl	80066a0 <vTaskDelay>
		if(xQueueReceive(xAnimationQueue, &next, portMAX_DELAY) == pdTRUE) {
 8000c9e:	e7df      	b.n	8000c60 <AnimateTask+0x8>
 8000ca0:	20000180 	.word	0x20000180
 8000ca4:	2000017c 	.word	0x2000017c

08000ca8 <PollButtonTask>:
	}
}

void PollButtonTask(void *args) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	for(;;) {
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <PollButtonTask+0x3c>)
 8000cb4:	f000 fe8e 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d10e      	bne.n	8000cdc <PollButtonTask+0x34>
			evt.type = EVT_BUTTON_PRESS;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	723b      	strb	r3, [r7, #8]
			evt.args = NULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]

			xQueueSend(xEventQueue, &evt, 0);
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <PollButtonTask+0x40>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	f107 0108 	add.w	r1, r7, #8
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f004 ff4f 	bl	8005b74 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(200)); // Debounce
 8000cd6:	20c8      	movs	r0, #200	@ 0xc8
 8000cd8:	f005 fce2 	bl	80066a0 <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(50));
 8000cdc:	2032      	movs	r0, #50	@ 0x32
 8000cde:	f005 fcdf 	bl	80066a0 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET) {
 8000ce2:	e7e5      	b.n	8000cb0 <PollButtonTask+0x8>
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	2000017c 	.word	0x2000017c

08000cec <spin>:
	}
}

void spin(Animation_t* anim, int* colorBit, int* winningNum) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
	*winningNum = rand() % 4;
 8000cf8:	f007 fb5a 	bl	80083b0 <rand>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	425a      	negs	r2, r3
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	bf58      	it	pl
 8000d0a:	4253      	negpl	r3, r2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]
	*colorBit = (1 << *winningNum);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2201      	movs	r2, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	601a      	str	r2, [r3, #0]
	anim->animation = wheelAnimation;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <spin+0x44>)
 8000d20:	605a      	str	r2, [r3, #4]
	anim->args = winningNum;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08000a5d 	.word	0x08000a5d

08000d34 <setNextAnimation>:

void setNextAnimation(Animation_t* nextAnim, State_t* state, int* pCollectedMask, int* colorBit)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
    switch (*state) {
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <setNextAnimation+0x22>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dd39      	ble.n	8000dc2 <setNextAnimation+0x8e>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d836      	bhi.n	8000dc2 <setNextAnimation+0x8e>
 8000d54:	e031      	b.n	8000dba <setNextAnimation+0x86>
        case SPINNING:
            if ((*pCollectedMask) & *colorBit) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d009      	beq.n	8000d78 <setNextAnimation+0x44>
            	*state = LOSE;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
            	(*pCollectedMask) = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
            	nextAnim->animation = loseAnimation;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <setNextAnimation+0x9c>)
 8000d74:	605a      	str	r2, [r3, #4]
                	*state = COLLECTING;
                    nextAnim->animation = collectedAnimation;
                    nextAnim->args = pCollectedMask;
                }
            }
            break;
 8000d76:	e024      	b.n	8000dc2 <setNextAnimation+0x8e>
                (*pCollectedMask) |= *colorBit;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
                if (((*pCollectedMask) & 0xF) == 0xF) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d109      	bne.n	8000da6 <setNextAnimation+0x72>
                    *state = WIN;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2203      	movs	r2, #3
 8000d96:	701a      	strb	r2, [r3, #0]
                    (*pCollectedMask) = 0;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
                    nextAnim->animation = winningAnimation;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <setNextAnimation+0xa0>)
 8000da2:	605a      	str	r2, [r3, #4]
            break;
 8000da4:	e00d      	b.n	8000dc2 <setNextAnimation+0x8e>
                	*state = COLLECTING;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2202      	movs	r2, #2
 8000daa:	701a      	strb	r2, [r3, #0]
                    nextAnim->animation = collectedAnimation;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <setNextAnimation+0xa4>)
 8000db0:	605a      	str	r2, [r3, #4]
                    nextAnim->args = pCollectedMask;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
            break;
 8000db8:	e003      	b.n	8000dc2 <setNextAnimation+0x8e>
        case LOSE:
        case COLLECTING:
        case WIN:
        	*state = IDLE;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
            break;
 8000dc0:	bf00      	nop
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	08000b8d 	.word	0x08000b8d
 8000dd4:	08000be9 	.word	0x08000be9
 8000dd8:	08000b15 	.word	0x08000b15

08000ddc <StateMachineTask>:

void StateMachineTask(void *args) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	SystemEvent_t evt;
	EventType_t next = EVT_ANY;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Animation_t nextAnim;
	State_t state = IDLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	76fb      	strb	r3, [r7, #27]

	nextAnim.animation = wheelAnimation;
 8000dee:	4b34      	ldr	r3, [pc, #208]	@ (8000ec0 <StateMachineTask+0xe4>)
 8000df0:	623b      	str	r3, [r7, #32]
	int next_number = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
	nextAnim.args = &next_number;
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	61fb      	str	r3, [r7, #28]

	int collectedMask = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
	int colorBit = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]

	for(;;) {
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <StateMachineTask+0xe8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 f84f 	bl	8005eb4 <xQueueReceive>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d1f3      	bne.n	8000e04 <StateMachineTask+0x28>
			if(next != EVT_ANY && next != evt.type) {
 8000e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <StateMachineTask+0x54>
 8000e24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e28:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d142      	bne.n	8000eb6 <StateMachineTask+0xda>
				continue; // Do not process
			}

			switch (evt.type) {
 8000e30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d002      	beq.n	8000e3e <StateMachineTask+0x62>
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d018      	beq.n	8000e6e <StateMachineTask+0x92>
				}
				else if (state == IDLE) {
					next = EVT_ANY;
				}
			default:
				break;
 8000e3c:	e03d      	b.n	8000eba <StateMachineTask+0xde>
				state = SPINNING;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	76fb      	strb	r3, [r7, #27]
				next = EVT_ANIM_COMPLETE;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				spin(&nextAnim, &colorBit, &next_number);
 8000e48:	f107 0214 	add.w	r2, r7, #20
 8000e4c:	f107 010c 	add.w	r1, r7, #12
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff49 	bl	8000cec <spin>
				xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <StateMachineTask+0xec>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	f107 011c 	add.w	r1, r7, #28
 8000e62:	2300      	movs	r3, #0
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e68:	f004 fe84 	bl	8005b74 <xQueueGenericSend>
				break;
 8000e6c:	e026      	b.n	8000ebc <StateMachineTask+0xe0>
				setNextAnimation(&nextAnim, &state, &collectedMask, &colorBit);
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	f107 0210 	add.w	r2, r7, #16
 8000e76:	f107 011b 	add.w	r1, r7, #27
 8000e7a:	f107 001c 	add.w	r0, r7, #28
 8000e7e:	f7ff ff59 	bl	8000d34 <setNextAnimation>
				if (state  == WIN || state == COLLECTING || state == LOSE) {
 8000e82:	7efb      	ldrb	r3, [r7, #27]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d005      	beq.n	8000e94 <StateMachineTask+0xb8>
 8000e88:	7efb      	ldrb	r3, [r7, #27]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d002      	beq.n	8000e94 <StateMachineTask+0xb8>
 8000e8e:	7efb      	ldrb	r3, [r7, #27]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d109      	bne.n	8000ea8 <StateMachineTask+0xcc>
					xQueueSend(xAnimationQueue, &nextAnim, portMAX_DELAY);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <StateMachineTask+0xec>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f107 011c 	add.w	r1, r7, #28
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea2:	f004 fe67 	bl	8005b74 <xQueueGenericSend>
				break;
 8000ea6:	e008      	b.n	8000eba <StateMachineTask+0xde>
				else if (state == IDLE) {
 8000ea8:	7efb      	ldrb	r3, [r7, #27]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <StateMachineTask+0xde>
					next = EVT_ANY;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8000eb4:	e001      	b.n	8000eba <StateMachineTask+0xde>
				continue; // Do not process
 8000eb6:	bf00      	nop
 8000eb8:	e7a4      	b.n	8000e04 <StateMachineTask+0x28>
				break;
 8000eba:	bf00      	nop
		if(xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdTRUE) {
 8000ebc:	e7a2      	b.n	8000e04 <StateMachineTask+0x28>
 8000ebe:	bf00      	nop
 8000ec0:	08000a5d 	.word	0x08000a5d
 8000ec4:	2000017c 	.word	0x2000017c
 8000ec8:	20000180 	.word	0x20000180

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000ed4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ed8:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <Error_Handler+0x3c>)
 8000eda:	f000 fdac 	bl	8001a36 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee4:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <Error_Handler+0x3c>)
 8000ee6:	f000 fd8d 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <Error_Handler+0x3c>)
 8000ef2:	f000 fd87 	bl	8001a04 <HAL_GPIO_WritePin>
   	  HAL_GPIO_WritePin(LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <Error_Handler+0x3c>)
 8000efe:	f000 fd81 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED_PORT, RED_LED_PIN);
 8000f02:	bf00      	nop
 8000f04:	e7e6      	b.n	8000ed4 <Error_Handler+0x8>
 8000f06:	bf00      	nop
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_MspInit+0x54>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
 8000f52:	f000 fb7a 	bl	800164a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_I2C_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <HAL_I2C_MspInit+0x8c>)
 8000fc0:	f000 fb6c 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000fce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_I2C_MspInit+0x88>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	@ 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a31      	ldr	r2, [pc, #196]	@ (80010e4 <HAL_I2S_MspInit+0xf0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d15a      	bne.n	80010da <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001028:	23c0      	movs	r3, #192	@ 0xc0
 800102a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f003 fd27 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001040:	f7ff ff44 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 800104e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4a1f      	ldr	r2, [pc, #124]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_I2S_MspInit+0xf4>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001098:	2310      	movs	r3, #16
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a8:	2306      	movs	r3, #6
 80010aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	480e      	ldr	r0, [pc, #56]	@ (80010ec <HAL_I2S_MspInit+0xf8>)
 80010b4:	f000 faf2 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010b8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ca:	2306      	movs	r3, #6
 80010cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <HAL_I2S_MspInit+0xfc>)
 80010d6:	f000 fae1 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	@ 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40003c00 	.word	0x40003c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020800 	.word	0x40020800

080010f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_SPI_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_SPI_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001120:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_SPI_MspInit+0x88>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800114e:	23e0      	movs	r3, #224	@ 0xe0
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_SPI_MspInit+0x8c>)
 800116a:	f000 fa97 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011be:	f000 f967 	bl	8001490 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011c2:	f005 fef1 	bl	8006fa8 <xTaskGetSchedulerState>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d001      	beq.n	80011d0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011cc:	f006 fcec 	bl	8007ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <OTG_FS_IRQHandler+0x10>)
 80011da:	f000 fc46 	bl	8001a6a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004adc 	.word	0x20004adc

080011e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_kill>:

int _kill(int pid, int sig)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001202:	f007 fa77 	bl	80086f4 <__errno>
 8001206:	4603      	mov	r3, r0
 8001208:	2216      	movs	r2, #22
 800120a:	601a      	str	r2, [r3, #0]
  return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_exit>:

void _exit (int status)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001220:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe7 	bl	80011f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800122a:	bf00      	nop
 800122c:	e7fd      	b.n	800122a <_exit+0x12>

0800122e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e00a      	b.n	8001256 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001240:	f3af 8000 	nop.w
 8001244:	4601      	mov	r1, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	b2ca      	uxtb	r2, r1
 800124e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbf0      	blt.n	8001240 <_read+0x12>
  }

  return len;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e009      	b.n	800128e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	dbf1      	blt.n	800127a <_write+0x12>
  }
  return len;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_close>:

int _close(int file)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c8:	605a      	str	r2, [r3, #4]
  return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_isatty>:

int _isatty(int file)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f007 f9dc 	bl	80086f4 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20020000 	.word	0x20020000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000184 	.word	0x20000184
 8001370:	20005008 	.word	0x20005008

08001374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800139c:	f7ff ffea 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f007 f99b 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff f8c9 	bl	8000560 <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013dc:	08009388 	.word	0x08009388
  ldr r2, =_sbss
 80013e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013e4:	20005008 	.word	0x20005008

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f0:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <HAL_Init+0x40>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_Init+0x40>)
 8001402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	@ (800142c <HAL_Init+0x40>)
 800140e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f90d 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff fd74 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f917 	bl	8001682 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800146c:	f000 f8ed 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	20000008 	.word	0x20000008
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000188 	.word	0x20000188

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000188 	.word	0x20000188

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	@ (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff47 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5c 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e16b      	b.n	8001990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 815a 	bne.w	800198a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80b4 	beq.w	800198a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b60      	ldr	r3, [pc, #384]	@ (80019a8 <HAL_GPIO_Init+0x30c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a5f      	ldr	r2, [pc, #380]	@ (80019a8 <HAL_GPIO_Init+0x30c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <HAL_GPIO_Init+0x30c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <HAL_GPIO_Init+0x310>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_GPIO_Init+0x314>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d02b      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	@ (80019b4 <HAL_GPIO_Init+0x318>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x222>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <HAL_GPIO_Init+0x31c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x21e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	@ (80019bc <HAL_GPIO_Init+0x320>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x21a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4e      	ldr	r2, [pc, #312]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x216>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4d      	ldr	r2, [pc, #308]	@ (80019c4 <HAL_GPIO_Init+0x328>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x212>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4c      	ldr	r2, [pc, #304]	@ (80019c8 <HAL_GPIO_Init+0x32c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x20e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4b      	ldr	r2, [pc, #300]	@ (80019cc <HAL_GPIO_Init+0x330>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x20a>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00e      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018a6:	2308      	movs	r3, #8
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	@ (80019ac <HAL_GPIO_Init+0x310>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a32      	ldr	r2, [pc, #200]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <HAL_GPIO_Init+0x334>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae90 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40021c00 	.word	0x40021c00
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	041a      	lsls	r2, r3, #16
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	400b      	ands	r3, r1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fada 	bl	800503a <USB_GetMode>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	f040 80fb 	bne.w	8001c84 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fa9d 	bl	8004fd2 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80f1 	beq.w	8001c82 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fa94 	bl	8004fd2 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ab4:	d104      	bne.n	8001ac0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001abe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fa84 	bl	8004fd2 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ad4:	d104      	bne.n	8001ae0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ade:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fa74 	bl	8004fd2 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001af4:	d104      	bne.n	8001b00 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001afe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fa64 	bl	8004fd2 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d103      	bne.n	8001b1c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fa56 	bl	8004fd2 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b30:	d120      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b3a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d113      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	6938      	ldr	r0, [r7, #16]
 8001b50:	f003 f987 	bl	8004e62 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b54:	6938      	ldr	r0, [r7, #16]
 8001b56:	f003 f9b6 	bl	8004ec6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a5b      	ldrb	r3, [r3, #9]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d105      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa74 	bl	8005056 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f006 fab6 	bl	80080e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fa2a 	bl	8004fd2 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b88:	d102      	bne.n	8001b90 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f001 fca1 	bl	80034d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fa1c 	bl	8004fd2 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d106      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fa7f 	bl	80080a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fa0b 	bl	8004fd2 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bc6:	d139      	bne.n	8001c3c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fa7f 	bl	80050d0 <USB_HC_ReadInterrupt>
 8001bd2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e025      	b.n	8001c26 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d018      	beq.n	8001c20 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f859 	bl	8001cc4 <HCD_HC_IN_IRQHandler>
 8001c12:	e005      	b.n	8001c20 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 febb 	bl	8002996 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	795b      	ldrb	r3, [r3, #5]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d3d3      	bcc.n	8001bda <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f9c6 	bl	8004fd2 <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d101      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x1ea>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_HCD_IRQHandler+0x1ec>
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d014      	beq.n	8001c84 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0210 	bic.w	r2, r2, #16
 8001c68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f001 fb52 	bl	8003314 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0210 	orr.w	r2, r2, #16
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	e000      	b.n	8001c84 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c82:	bf00      	nop
    }
  }
}
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_HCD_Stop+0x16>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e00d      	b.n	8001cbc <HAL_HCD_Stop+0x32>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fb40 	bl	8005332 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 f988 	bl	8004ff8 <USB_ReadChInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d11a      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2304      	movs	r3, #4
 8001d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	334d      	adds	r3, #77	@ 0x4d
 8001d14:	2207      	movs	r2, #7
 8001d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 f9e6 	bl	80050f2 <USB_HC_Halt>
 8001d26:	e09e      	b.n	8001e66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f961 	bl	8004ff8 <USB_ReadChInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d40:	d11b      	bne.n	8001d7a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	334d      	adds	r3, #77	@ 0x4d
 8001d66:	2208      	movs	r2, #8
 8001d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 f9bd 	bl	80050f2 <USB_HC_Halt>
 8001d78:	e075      	b.n	8001e66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f938 	bl	8004ff8 <USB_ReadChInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11a      	bne.n	8001dc8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2308      	movs	r3, #8
 8001da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	334d      	adds	r3, #77	@ 0x4d
 8001db4:	2206      	movs	r2, #6
 8001db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f996 	bl	80050f2 <USB_HC_Halt>
 8001dc6:	e04e      	b.n	8001e66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 f911 	bl	8004ff8 <USB_ReadChInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de0:	d11b      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	334d      	adds	r3, #77	@ 0x4d
 8001e06:	2209      	movs	r2, #9
 8001e08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f96d 	bl	80050f2 <USB_HC_Halt>
 8001e18:	e025      	b.n	8001e66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f8e8 	bl	8004ff8 <USB_ReadChInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d119      	bne.n	8001e66 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	334d      	adds	r3, #77	@ 0x4d
 8001e54:	2207      	movs	r2, #7
 8001e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 f946 	bl	80050f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f8c2 	bl	8004ff8 <USB_ReadChInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7e:	d112      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f932 	bl	80050f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea0:	6093      	str	r3, [r2, #8]
 8001ea2:	f000 bd75 	b.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f8a2 	bl	8004ff8 <USB_ReadChInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 8128 	bne.w	8002110 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2320      	movs	r3, #32
 8001ed0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	331b      	adds	r3, #27
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d119      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	0151      	lsls	r1, r2, #5
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	440a      	add	r2, r1
 8001f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	799b      	ldrb	r3, [r3, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3330      	adds	r3, #48	@ 0x30
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	1ac9      	subs	r1, r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4403      	add	r3, r0
 8001f58:	3338      	adds	r3, #56	@ 0x38
 8001f5a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334d      	adds	r3, #77	@ 0x4d
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3344      	adds	r3, #68	@ 0x44
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2301      	movs	r3, #1
 8001f94:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3326      	adds	r3, #38	@ 0x26
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3326      	adds	r3, #38	@ 0x26
 8001fbc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d110      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f891 	bl	80050f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2310      	movs	r3, #16
 8001fe0:	6093      	str	r3, [r2, #8]
 8001fe2:	e03d      	b.n	8002060 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3326      	adds	r3, #38	@ 0x26
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d00a      	beq.n	8002010 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3326      	adds	r3, #38	@ 0x26
 800200a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800200c:	2b01      	cmp	r3, #1
 800200e:	d127      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	0151      	lsls	r1, r2, #5
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	440a      	add	r2, r1
 8002026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800202a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800202e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	334c      	adds	r3, #76	@ 0x4c
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	334c      	adds	r3, #76	@ 0x4c
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f006 f84e 	bl	80080fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	799b      	ldrb	r3, [r3, #6]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d13b      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3338      	adds	r3, #56	@ 0x38
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4403      	add	r3, r0
 8002088:	3328      	adds	r3, #40	@ 0x28
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	440b      	add	r3, r1
 800208e:	1e59      	subs	r1, r3, #1
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4403      	add	r3, r0
 800209e:	3328      	adds	r3, #40	@ 0x28
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8470 	beq.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	333c      	adds	r3, #60	@ 0x3c
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2d8      	uxtb	r0, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	333c      	adds	r3, #60	@ 0x3c
 80020d8:	4602      	mov	r2, r0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	f000 bc58 	b.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	333c      	adds	r3, #60	@ 0x3c
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2d8      	uxtb	r0, r3
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	333c      	adds	r3, #60	@ 0x3c
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	f000 bc40 	b.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f002 ff6d 	bl	8004ff8 <USB_ReadChInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d131      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002134:	461a      	mov	r2, r3
 8002136:	2320      	movs	r3, #32
 8002138:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	331a      	adds	r3, #26
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 841f 	bne.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	331b      	adds	r3, #27
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	334d      	adds	r3, #77	@ 0x4d
 8002176:	2203      	movs	r2, #3
 8002178:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f002 ffb5 	bl	80050f2 <USB_HC_Halt>
 8002188:	f000 bc02 	b.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f002 ff2f 	bl	8004ff8 <USB_ReadChInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	f040 8305 	bne.w	80027b0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b2:	461a      	mov	r2, r3
 80021b4:	2302      	movs	r3, #2
 80021b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	334d      	adds	r3, #77	@ 0x4d
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d114      	bne.n	80021f8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334d      	adds	r3, #77	@ 0x4d
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	334c      	adds	r3, #76	@ 0x4c
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e2cc      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	334d      	adds	r3, #77	@ 0x4d
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b06      	cmp	r3, #6
 800220c:	d114      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	334d      	adds	r3, #77	@ 0x4d
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	334c      	adds	r3, #76	@ 0x4c
 8002232:	2205      	movs	r2, #5
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e2ac      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	334d      	adds	r3, #77	@ 0x4d
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d00b      	beq.n	8002266 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	@ 0x4d
 800225e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002260:	2b09      	cmp	r3, #9
 8002262:	f040 80a6 	bne.w	80023b2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	@ 0x4d
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3344      	adds	r3, #68	@ 0x44
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4403      	add	r3, r0
 800229a:	3344      	adds	r3, #68	@ 0x44
 800229c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3344      	adds	r3, #68	@ 0x44
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d943      	bls.n	800233c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3344      	adds	r3, #68	@ 0x44
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	331a      	adds	r3, #26
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d123      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	331b      	adds	r3, #27
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	331c      	adds	r3, #28
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	440a      	add	r2, r1
 800231c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002324:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	334c      	adds	r3, #76	@ 0x4c
 8002336:	2204      	movs	r2, #4
 8002338:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800233a:	e229      	b.n	8002790 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3326      	adds	r3, #38	@ 0x26
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3326      	adds	r3, #38	@ 0x26
 8002376:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002378:	2b02      	cmp	r3, #2
 800237a:	f040 8209 	bne.w	8002790 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002394:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800239c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023b0:	e1ee      	b.n	8002790 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	f040 80c8 	bne.w	800255a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	334d      	adds	r3, #77	@ 0x4d
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	331b      	adds	r3, #27
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 81ce 	bne.w	8002792 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3326      	adds	r3, #38	@ 0x26
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d16b      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3348      	adds	r3, #72	@ 0x48
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	3348      	adds	r3, #72	@ 0x48
 800242e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3348      	adds	r3, #72	@ 0x48
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d943      	bls.n	80024ce <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3348      	adds	r3, #72	@ 0x48
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	331b      	adds	r3, #27
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3344      	adds	r3, #68	@ 0x44
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d809      	bhi.n	8002498 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331c      	adds	r3, #28
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	0151      	lsls	r1, r2, #5
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	440a      	add	r2, r1
 80024ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2204      	movs	r2, #4
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e014      	b.n	80024f8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	@ 0x4c
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e009      	b.n	80024f8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	@ 0x4c
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3326      	adds	r3, #38	@ 0x26
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3326      	adds	r3, #38	@ 0x26
 800251e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 8136 	bne.w	8002792 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800253c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002544:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e11b      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	334d      	adds	r3, #77	@ 0x4d
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	f040 8081 	bne.w	8002674 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	334d      	adds	r3, #77	@ 0x4d
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	331b      	adds	r3, #27
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 80fa 	bne.w	8002792 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	334c      	adds	r3, #76	@ 0x4c
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	0151      	lsls	r1, r2, #5
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	440a      	add	r2, r1
 80025e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025f0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	0151      	lsls	r1, r2, #5
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	440a      	add	r2, r1
 8002608:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800260c:	f023 0320 	bic.w	r3, r3, #32
 8002610:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3326      	adds	r3, #38	@ 0x26
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3326      	adds	r3, #38	@ 0x26
 8002638:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 80a9 	bne.w	8002792 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002656:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800265e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e08e      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d143      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334d      	adds	r3, #77	@ 0x4d
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	@ 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d159      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e03f      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	334d      	adds	r3, #77	@ 0x4d
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d126      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334d      	adds	r3, #77	@ 0x4d
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3344      	adds	r3, #68	@ 0x44
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4403      	add	r3, r0
 800275c:	3344      	adds	r3, #68	@ 0x44
 800275e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334c      	adds	r3, #76	@ 0x4c
 8002770:	2204      	movs	r2, #4
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e00d      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334d      	adds	r3, #77	@ 0x4d
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	f000 8100 	beq.w	800298e <HCD_HC_IN_IRQHandler+0xcca>
 800278e:	e000      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002790:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	334c      	adds	r3, #76	@ 0x4c
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f005 fca7 	bl	80080fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80027ae:	e0ef      	b.n	8002990 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fc1d 	bl	8004ff8 <USB_ReadChInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d12f      	bne.n	8002828 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2340      	movs	r3, #64	@ 0x40
 80027d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	334d      	adds	r3, #77	@ 0x4d
 80027ea:	2205      	movs	r2, #5
 80027ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331a      	adds	r3, #26
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3344      	adds	r3, #68	@ 0x44
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fc66 	bl	80050f2 <USB_HC_Halt>
 8002826:	e0b3      	b.n	8002990 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fbe1 	bl	8004ff8 <USB_ReadChInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b10      	cmp	r3, #16
 800283e:	f040 80a7 	bne.w	8002990 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3326      	adds	r3, #38	@ 0x26
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d11b      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3344      	adds	r3, #68	@ 0x44
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	334d      	adds	r3, #77	@ 0x4d
 800287c:	2204      	movs	r2, #4
 800287e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fc32 	bl	80050f2 <USB_HC_Halt>
 800288e:	e03f      	b.n	8002910 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3326      	adds	r3, #38	@ 0x26
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3326      	adds	r3, #38	@ 0x26
 80028b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d129      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3344      	adds	r3, #68	@ 0x44
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	799b      	ldrb	r3, [r3, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HCD_HC_IN_IRQHandler+0xc2a>
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	331b      	adds	r3, #27
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d110      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	334d      	adds	r3, #77	@ 0x4d
 80028fe:	2204      	movs	r2, #4
 8002900:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fbf1 	bl	80050f2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	331b      	adds	r3, #27
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d129      	bne.n	800297a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	331b      	adds	r3, #27
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	0151      	lsls	r1, r2, #5
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	440a      	add	r2, r1
 8002950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002958:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	0151      	lsls	r1, r2, #5
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	440a      	add	r2, r1
 8002970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2310      	movs	r3, #16
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	e000      	b.n	8002990 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800298e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fb1f 	bl	8004ff8 <USB_ReadChInterrupts>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2304      	movs	r3, #4
 80029d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	334d      	adds	r3, #77	@ 0x4d
 80029e6:	2207      	movs	r2, #7
 80029e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fb7d 	bl	80050f2 <USB_HC_Halt>
 80029f8:	f000 bc89 	b.w	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 faf7 	bl	8004ff8 <USB_ReadChInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	f040 8082 	bne.w	8002b1a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2320      	movs	r3, #32
 8002a26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3319      	adds	r3, #25
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d124      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3319      	adds	r3, #25
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	334c      	adds	r3, #76	@ 0x4c
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	334d      	adds	r3, #77	@ 0x4d
 8002a76:	2203      	movs	r2, #3
 8002a78:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fb35 	bl	80050f2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	331a      	adds	r3, #26
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 8437 	bne.w	800330e <HCD_HC_OUT_IRQHandler+0x978>
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	331b      	adds	r3, #27
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 842b 	bne.w	800330e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3326      	adds	r3, #38	@ 0x26
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d009      	beq.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	331b      	adds	r3, #27
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	@ 0x4d
 8002af2:	2203      	movs	r2, #3
 8002af4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 faf7 	bl	80050f2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3344      	adds	r3, #68	@ 0x44
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e3f9      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fa68 	bl	8004ff8 <USB_ReadChInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b32:	d111      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b46:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 face 	bl	80050f2 <USB_HC_Halt>
 8002b56:	e3da      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fa49 	bl	8004ff8 <USB_ReadChInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d168      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3344      	adds	r3, #68	@ 0x44
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fa33 	bl	8004ff8 <USB_ReadChInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d112      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3319      	adds	r3, #25
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2340      	movs	r3, #64	@ 0x40
 8002bc0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	331b      	adds	r3, #27
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d019      	beq.n	8002c0c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	331b      	adds	r3, #27
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	0151      	lsls	r1, r2, #5
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	440a      	add	r2, r1
 8002c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334d      	adds	r3, #77	@ 0x4d
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fa59 	bl	80050f2 <USB_HC_Halt>
 8002c40:	e365      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 f9d4 	bl	8004ff8 <USB_ReadChInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c56:	2b40      	cmp	r3, #64	@ 0x40
 8002c58:	d139      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	334d      	adds	r3, #77	@ 0x4d
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	331a      	adds	r3, #26
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3319      	adds	r3, #25
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3344      	adds	r3, #68	@ 0x44
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fa1c 	bl	80050f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2340      	movs	r3, #64	@ 0x40
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	e31f      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 f98e 	bl	8004ff8 <USB_ReadChInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11a      	bne.n	8002d1c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334d      	adds	r3, #77	@ 0x4d
 8002d08:	2206      	movs	r2, #6
 8002d0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 f9ec 	bl	80050f2 <USB_HC_Halt>
 8002d1a:	e2f8      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 f967 	bl	8004ff8 <USB_ReadChInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d144      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3344      	adds	r3, #68	@ 0x44
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	334d      	adds	r3, #77	@ 0x4d
 8002d58:	2204      	movs	r2, #4
 8002d5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3319      	adds	r3, #25
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d114      	bne.n	8002d9c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3318      	adds	r3, #24
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3319      	adds	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 f9a4 	bl	80050f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2310      	movs	r3, #16
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	e2a7      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 f916 	bl	8004ff8 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b80      	cmp	r3, #128	@ 0x80
 8002dd4:	f040 8083 	bne.w	8002ede <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	799b      	ldrb	r3, [r3, #6]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	@ 0x4d
 8002df0:	2207      	movs	r2, #7
 8002df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 f978 	bl	80050f2 <USB_HC_Halt>
 8002e02:	e062      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	@ 0x44
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4403      	add	r3, r0
 8002e24:	3344      	adds	r3, #68	@ 0x44
 8002e26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3344      	adds	r3, #68	@ 0x44
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d922      	bls.n	8002e84 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	334c      	adds	r3, #76	@ 0x4c
 8002e62:	2204      	movs	r2, #4
 8002e64:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	@ 0x4c
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f005 f93d 	bl	80080fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e82:	e022      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	334c      	adds	r3, #76	@ 0x4c
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002eae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eb6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	e217      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 f886 	bl	8004ff8 <USB_ReadChInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d11b      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	@ 0x4d
 8002f08:	2209      	movs	r2, #9
 8002f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 f8ec 	bl	80050f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f2c:	6093      	str	r3, [r2, #8]
 8002f2e:	e1ee      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 f85d 	bl	8004ff8 <USB_ReadChInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	f040 81df 	bne.w	8003308 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2302      	movs	r3, #2
 8002f5a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 8093 	bne.w	800309a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334d      	adds	r3, #77	@ 0x4d
 8002f84:	2202      	movs	r2, #2
 8002f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334c      	adds	r3, #76	@ 0x4c
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3326      	adds	r3, #38	@ 0x26
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d00b      	beq.n	8002fca <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3326      	adds	r3, #38	@ 0x26
 8002fc2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	f040 8190 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	799b      	ldrb	r3, [r3, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d115      	bne.n	8002ffe <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	333d      	adds	r3, #61	@ 0x3d
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333d      	adds	r3, #61	@ 0x3d
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	799b      	ldrb	r3, [r3, #6]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 8171 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3334      	adds	r3, #52	@ 0x34
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8165 	beq.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3334      	adds	r3, #52	@ 0x34
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	3328      	adds	r3, #40	@ 0x28
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	440b      	add	r3, r1
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4403      	add	r3, r0
 8003056:	3328      	adds	r3, #40	@ 0x28
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 813f 	beq.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333d      	adds	r3, #61	@ 0x3d
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	333d      	adds	r3, #61	@ 0x3d
 8003094:	4602      	mov	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e127      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	@ 0x4d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d120      	bne.n	80030f2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334d      	adds	r3, #77	@ 0x4d
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	331b      	adds	r3, #27
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 8107 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e0fb      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334d      	adds	r3, #77	@ 0x4d
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d13a      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334d      	adds	r3, #77	@ 0x4d
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334c      	adds	r3, #76	@ 0x4c
 800312c:	2202      	movs	r2, #2
 800312e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	331b      	adds	r3, #27
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 80d1 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	331b      	adds	r3, #27
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	0151      	lsls	r1, r2, #5
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	440a      	add	r2, r1
 8003172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	6053      	str	r3, [r2, #4]
 800317c:	e0b5      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d114      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	@ 0x4c
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e095      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	334d      	adds	r3, #77	@ 0x4d
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d114      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	334d      	adds	r3, #77	@ 0x4d
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	334c      	adds	r3, #76	@ 0x4c
 80031f8:	2205      	movs	r2, #5
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e075      	b.n	80032ea <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b07      	cmp	r3, #7
 8003212:	d00a      	beq.n	800322a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334d      	adds	r3, #77	@ 0x4d
 8003224:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003226:	2b09      	cmp	r3, #9
 8003228:	d170      	bne.n	800330c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334d      	adds	r3, #77	@ 0x4d
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3344      	adds	r3, #68	@ 0x44
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	1c59      	adds	r1, r3, #1
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4403      	add	r3, r0
 800325e:	3344      	adds	r3, #68	@ 0x44
 8003260:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3344      	adds	r3, #68	@ 0x44
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d914      	bls.n	80032a2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3344      	adds	r3, #68	@ 0x44
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	334c      	adds	r3, #76	@ 0x4c
 800329c:	2204      	movs	r2, #4
 800329e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a0:	e022      	b.n	80032e8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	@ 0x4c
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032cc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032e8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f004 fefb 	bl	80080fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003306:	e002      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800330c:	bf00      	nop
  }
}
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	0c5b      	lsrs	r3, r3, #17
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003348:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d004      	beq.n	800335a <HCD_RXQLVL_IRQHandler+0x46>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b05      	cmp	r3, #5
 8003354:	f000 80b6 	beq.w	80034c4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003358:	e0b7      	b.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80b3 	beq.w	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	332c      	adds	r3, #44	@ 0x2c
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a7 	beq.w	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3338      	adds	r3, #56	@ 0x38
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	18d1      	adds	r1, r2, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3334      	adds	r3, #52	@ 0x34
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4299      	cmp	r1, r3
 80033a4:	f200 8083 	bhi.w	80034ae <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	332c      	adds	r3, #44	@ 0x2c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	b292      	uxth	r2, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f001 fdad 	bl	8004f22 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	332c      	adds	r3, #44	@ 0x2c
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	18d1      	adds	r1, r2, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	332c      	adds	r3, #44	@ 0x2c
 80033ee:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3338      	adds	r3, #56	@ 0x38
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	18d1      	adds	r1, r2, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	3338      	adds	r3, #56	@ 0x38
 8003416:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	0cdb      	lsrs	r3, r3, #19
 8003428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3328      	adds	r3, #40	@ 0x28
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4293      	cmp	r3, r2
 8003446:	d13f      	bne.n	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	4413      	add	r3, r2
 8003456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003464:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800346c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333c      	adds	r3, #60	@ 0x3c
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f083 0301 	eor.w	r3, r3, #1
 8003496:	b2d8      	uxtb	r0, r3
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	333c      	adds	r3, #60	@ 0x3c
 80034a8:	4602      	mov	r2, r0
 80034aa:	701a      	strb	r2, [r3, #0]
      break;
 80034ac:	e00c      	b.n	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	2204      	movs	r2, #4
 80034c0:	701a      	strb	r2, [r3, #0]
      break;
 80034c2:	e001      	b.n	80034c8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034c8:	bf00      	nop
  }
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	@ 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80034fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d10b      	bne.n	8003522 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f004 fdd5 	bl	80080c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d132      	bne.n	8003592 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d126      	bne.n	800358c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7a5b      	ldrb	r3, [r3, #9]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d113      	bne.n	800356e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800354c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003550:	d106      	bne.n	8003560 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fd7c 	bl	8005056 <USB_InitFSLSPClkSel>
 800355e:	e011      	b.n	8003584 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fd75 	bl	8005056 <USB_InitFSLSPClkSel>
 800356c:	e00a      	b.n	8003584 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	79db      	ldrb	r3, [r3, #7]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d106      	bne.n	8003584 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357c:	461a      	mov	r2, r3
 800357e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003582:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 fdcb 	bl	8008120 <HAL_HCD_PortEnabled_Callback>
 800358a:	e002      	b.n	8003592 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f004 fdd5 	bl	800813c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b20      	cmp	r3, #32
 800359a:	d103      	bne.n	80035a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f043 0320 	orr.w	r3, r3, #32
 80035a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	6013      	str	r3, [r2, #0]
}
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e12b      	b.n	8003822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fcc0 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	@ 0x24
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800361a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800361c:	f001 fa20 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8003620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a81      	ldr	r2, [pc, #516]	@ (800382c <HAL_I2C_Init+0x274>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d807      	bhi.n	800363c <HAL_I2C_Init+0x84>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a80      	ldr	r2, [pc, #512]	@ (8003830 <HAL_I2C_Init+0x278>)
 8003630:	4293      	cmp	r3, r2
 8003632:	bf94      	ite	ls
 8003634:	2301      	movls	r3, #1
 8003636:	2300      	movhi	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e006      	b.n	800364a <HAL_I2C_Init+0x92>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a7d      	ldr	r2, [pc, #500]	@ (8003834 <HAL_I2C_Init+0x27c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	bf94      	ite	ls
 8003644:	2301      	movls	r3, #1
 8003646:	2300      	movhi	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0e7      	b.n	8003822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a78      	ldr	r2, [pc, #480]	@ (8003838 <HAL_I2C_Init+0x280>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0c9b      	lsrs	r3, r3, #18
 800365c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a6a      	ldr	r2, [pc, #424]	@ (800382c <HAL_I2C_Init+0x274>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d802      	bhi.n	800368c <HAL_I2C_Init+0xd4>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	3301      	adds	r3, #1
 800368a:	e009      	b.n	80036a0 <HAL_I2C_Init+0xe8>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	4a69      	ldr	r2, [pc, #420]	@ (800383c <HAL_I2C_Init+0x284>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	3301      	adds	r3, #1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	495c      	ldr	r1, [pc, #368]	@ (800382c <HAL_I2C_Init+0x274>)
 80036bc:	428b      	cmp	r3, r1
 80036be:	d819      	bhi.n	80036f4 <HAL_I2C_Init+0x13c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e59      	subs	r1, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ce:	1c59      	adds	r1, r3, #1
 80036d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036d4:	400b      	ands	r3, r1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_I2C_Init+0x138>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e59      	subs	r1, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ee:	e051      	b.n	8003794 <HAL_I2C_Init+0x1dc>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e04f      	b.n	8003794 <HAL_I2C_Init+0x1dc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d111      	bne.n	8003720 <HAL_I2C_Init+0x168>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e012      	b.n	8003746 <HAL_I2C_Init+0x18e>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Init+0x196>
 800374a:	2301      	movs	r3, #1
 800374c:	e022      	b.n	8003794 <HAL_I2C_Init+0x1dc>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10e      	bne.n	8003774 <HAL_I2C_Init+0x1bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e58      	subs	r0, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	440b      	add	r3, r1
 8003764:	fbb0 f3f3 	udiv	r3, r0, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003772:	e00f      	b.n	8003794 <HAL_I2C_Init+0x1dc>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	0099      	lsls	r1, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	fbb0 f3f3 	udiv	r3, r0, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	6809      	ldr	r1, [r1, #0]
 8003798:	4313      	orrs	r3, r2
 800379a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6911      	ldr	r1, [r2, #16]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	000186a0 	.word	0x000186a0
 8003830:	001e847f 	.word	0x001e847f
 8003834:	003d08ff 	.word	0x003d08ff
 8003838:	431bde83 	.word	0x431bde83
 800383c:	10624dd3 	.word	0x10624dd3

08003840 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e128      	b.n	8003aa4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a90      	ldr	r2, [pc, #576]	@ (8003aac <HAL_I2S_Init+0x26c>)
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd fbc1 	bl	8000ff4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003888:	f023 030f 	bic.w	r3, r3, #15
 800388c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2202      	movs	r2, #2
 8003894:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d060      	beq.n	8003960 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038a6:	2310      	movs	r3, #16
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e001      	b.n	80038b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d802      	bhi.n	80038be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038be:	2001      	movs	r0, #1
 80038c0:	f001 f9c4 	bl	8004c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80038c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ce:	d125      	bne.n	800391c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	3305      	adds	r3, #5
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e01f      	b.n	800393a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	fbb2 f2f3 	udiv	r2, r2, r3
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	3305      	adds	r3, #5
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e00e      	b.n	800393a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	3305      	adds	r3, #5
 8003938:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab0 <HAL_I2S_Init+0x270>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	08db      	lsrs	r3, r3, #3
 8003944:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e003      	b.n	8003968 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003960:	2302      	movs	r3, #2
 8003962:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d902      	bls.n	8003974 <HAL_I2S_Init+0x134>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2bff      	cmp	r3, #255	@ 0xff
 8003972:	d907      	bls.n	8003984 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	f043 0210 	orr.w	r2, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e08f      	b.n	8003aa4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	ea42 0103 	orr.w	r1, r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	430a      	orrs	r2, r1
 8003996:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6851      	ldr	r1, [r2, #4]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68d2      	ldr	r2, [r2, #12]
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6992      	ldr	r2, [r2, #24]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d161      	bne.n	8003a94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a38      	ldr	r2, [pc, #224]	@ (8003ab4 <HAL_I2S_Init+0x274>)
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a37      	ldr	r2, [pc, #220]	@ (8003ab8 <HAL_I2S_Init+0x278>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_I2S_Init+0x1a4>
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_I2S_Init+0x27c>)
 80039e2:	e001      	b.n	80039e8 <HAL_I2S_Init+0x1a8>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	4932      	ldr	r1, [pc, #200]	@ (8003ab8 <HAL_I2S_Init+0x278>)
 80039f0:	428a      	cmp	r2, r1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2S_Init+0x1b8>
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <HAL_I2S_Init+0x27c>)
 80039f6:	e001      	b.n	80039fc <HAL_I2S_Init+0x1bc>
 80039f8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a00:	f023 030f 	bic.w	r3, r3, #15
 8003a04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab8 <HAL_I2S_Init+0x278>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2S_Init+0x1d4>
 8003a10:	4b2a      	ldr	r3, [pc, #168]	@ (8003abc <HAL_I2S_Init+0x27c>)
 8003a12:	e001      	b.n	8003a18 <HAL_I2S_Init+0x1d8>
 8003a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a18:	2202      	movs	r2, #2
 8003a1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a25      	ldr	r2, [pc, #148]	@ (8003ab8 <HAL_I2S_Init+0x278>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_I2S_Init+0x1ea>
 8003a26:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <HAL_I2S_Init+0x27c>)
 8003a28:	e001      	b.n	8003a2e <HAL_I2S_Init+0x1ee>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3a:	d003      	beq.n	8003a44 <HAL_I2S_Init+0x204>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e001      	b.n	8003a50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a64:	4313      	orrs	r3, r2
 8003a66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <HAL_I2S_Init+0x278>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_I2S_Init+0x24c>
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_I2S_Init+0x27c>)
 8003a8a:	e001      	b.n	8003a90 <HAL_I2S_Init+0x250>
 8003a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a90:	897a      	ldrh	r2, [r7, #10]
 8003a92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	08003bb7 	.word	0x08003bb7
 8003ab0:	cccccccd 	.word	0xcccccccd
 8003ab4:	08003ccd 	.word	0x08003ccd
 8003ab8:	40003800 	.word	0x40003800
 8003abc:	40003400 	.word	0x40003400

08003ac0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	881a      	ldrh	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffb8 	bl	8003ac0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10e      	bne.n	8003bae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff93 	bl	8003ad4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d13a      	bne.n	8003c48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d109      	bne.n	8003bf0 <I2S_IRQHandler+0x3a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d102      	bne.n	8003bf0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffb4 	bl	8003b58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d126      	bne.n	8003c48 <I2S_IRQHandler+0x92>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d11f      	bne.n	8003c48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff50 	bl	8003ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d136      	bne.n	8003cc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d109      	bne.n	8003c72 <I2S_IRQHandler+0xbc>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c68:	2b80      	cmp	r3, #128	@ 0x80
 8003c6a:	d102      	bne.n	8003c72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff45 	bl	8003afc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d122      	bne.n	8003cc2 <I2S_IRQHandler+0x10c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d11b      	bne.n	8003cc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff13 	bl	8003ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a92      	ldr	r2, [pc, #584]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ce6:	4b92      	ldr	r3, [pc, #584]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce8:	e001      	b.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a8b      	ldr	r2, [pc, #556]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d04:	4b8a      	ldr	r3, [pc, #552]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d06:	e001      	b.n	8003d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d18:	d004      	beq.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 8099 	bne.w	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d107      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f925 	bl	8003f88 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9c8 	bl	80040e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d13a      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d035      	beq.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a6e      	ldr	r2, [pc, #440]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d76:	4b6e      	ldr	r3, [pc, #440]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d78:	e001      	b.n	8003d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4969      	ldr	r1, [pc, #420]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d86:	428b      	cmp	r3, r1
 8003d88:	d101      	bne.n	8003d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d8a:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d8c:	e001      	b.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003da6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f043 0202 	orr.w	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fe88 	bl	8003ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	f040 80c3 	bne.w	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80bd 	beq.w	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a49      	ldr	r2, [pc, #292]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e0a:	4b49      	ldr	r3, [pc, #292]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e0c:	e001      	b.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4944      	ldr	r1, [pc, #272]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1a:	428b      	cmp	r3, r1
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e1e:	4b44      	ldr	r3, [pc, #272]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e20:	e001      	b.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fe4a 	bl	8003ae8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e54:	e089      	b.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d107      	bne.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8be 	bl	8003fec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8fd 	bl	8004084 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d12f      	bne.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4919      	ldr	r1, [pc, #100]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ecc:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ece:	e001      	b.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ed0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ed8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fdfa 	bl	8003ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d136      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d031      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4902      	ldr	r1, [pc, #8]	@ (8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f22:	428b      	cmp	r3, r1
 8003f24:	d106      	bne.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f26:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f28:	e006      	b.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f2a:	bf00      	nop
 8003f2c:	40003800 	.word	0x40003800
 8003f30:	40003400 	.word	0x40003400
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f043 0204 	orr.w	r2, r3, #4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fdc0 	bl	8003ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	e000      	b.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f6a:	bf00      	nop
}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	1c99      	adds	r1, r3, #2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d113      	bne.n	8003fe2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ffc9 	bl	8003f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	1c99      	adds	r1, r3, #2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ffe:	8819      	ldrh	r1, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <I2SEx_TxISR_I2SExt+0x90>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <I2SEx_TxISR_I2SExt+0x22>
 800400a:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <I2SEx_TxISR_I2SExt+0x94>)
 800400c:	e001      	b.n	8004012 <I2SEx_TxISR_I2SExt+0x26>
 800400e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004012:	460a      	mov	r2, r1
 8004014:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d121      	bne.n	8004072 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a12      	ldr	r2, [pc, #72]	@ (800407c <I2SEx_TxISR_I2SExt+0x90>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <I2SEx_TxISR_I2SExt+0x50>
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <I2SEx_TxISR_I2SExt+0x94>)
 800403a:	e001      	b.n	8004040 <I2SEx_TxISR_I2SExt+0x54>
 800403c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	490d      	ldr	r1, [pc, #52]	@ (800407c <I2SEx_TxISR_I2SExt+0x90>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d101      	bne.n	8004050 <I2SEx_TxISR_I2SExt+0x64>
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <I2SEx_TxISR_I2SExt+0x94>)
 800404e:	e001      	b.n	8004054 <I2SEx_TxISR_I2SExt+0x68>
 8004050:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004054:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004058:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff81 	bl	8003f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40003800 	.word	0x40003800
 8004080:	40003400 	.word	0x40003400

08004084 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68d8      	ldr	r0, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	1c99      	adds	r1, r3, #2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800409c:	b282      	uxth	r2, r0
 800409e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff4a 	bl	8003f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a20      	ldr	r2, [pc, #128]	@ (8004178 <I2SEx_RxISR_I2SExt+0x90>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <I2SEx_RxISR_I2SExt+0x16>
 80040fa:	4b20      	ldr	r3, [pc, #128]	@ (800417c <I2SEx_RxISR_I2SExt+0x94>)
 80040fc:	e001      	b.n	8004102 <I2SEx_RxISR_I2SExt+0x1a>
 80040fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004102:	68d8      	ldr	r0, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	1c99      	adds	r1, r3, #2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800410e:	b282      	uxth	r2, r0
 8004110:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <I2SEx_RxISR_I2SExt+0x90>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <I2SEx_RxISR_I2SExt+0x50>
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <I2SEx_RxISR_I2SExt+0x94>)
 8004136:	e001      	b.n	800413c <I2SEx_RxISR_I2SExt+0x54>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	490d      	ldr	r1, [pc, #52]	@ (8004178 <I2SEx_RxISR_I2SExt+0x90>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d101      	bne.n	800414c <I2SEx_RxISR_I2SExt+0x64>
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <I2SEx_RxISR_I2SExt+0x94>)
 800414a:	e001      	b.n	8004150 <I2SEx_RxISR_I2SExt+0x68>
 800414c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004150:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004154:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff03 	bl	8003f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40003800 	.word	0x40003800
 800417c:	40003400 	.word	0x40003400

08004180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e267      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d075      	beq.n	800428a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800419e:	4b88      	ldr	r3, [pc, #544]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b85      	ldr	r3, [pc, #532]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d112      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b6:	4b82      	ldr	r3, [pc, #520]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c2:	d10b      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	4b7e      	ldr	r3, [pc, #504]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d05b      	beq.n	8004288 <HAL_RCC_OscConfig+0x108>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d157      	bne.n	8004288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e242      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e4:	d106      	bne.n	80041f4 <HAL_RCC_OscConfig+0x74>
 80041e6:	4b76      	ldr	r3, [pc, #472]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a75      	ldr	r2, [pc, #468]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e01d      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x98>
 80041fe:	4b70      	ldr	r3, [pc, #448]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6f      	ldr	r2, [pc, #444]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b6d      	ldr	r3, [pc, #436]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a6c      	ldr	r2, [pc, #432]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 8004218:	4b69      	ldr	r3, [pc, #420]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a68      	ldr	r2, [pc, #416]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b66      	ldr	r3, [pc, #408]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800422e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd f93e 	bl	80014b8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd f93a 	bl	80014b8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	@ 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e207      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b5b      	ldr	r3, [pc, #364]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0xc0>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fd f92a 	bl	80014b8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd f926 	bl	80014b8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	@ 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1f3      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	4b51      	ldr	r3, [pc, #324]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0xe8>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d063      	beq.n	800435e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004296:	4b4a      	ldr	r3, [pc, #296]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d11c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e1c7      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d2:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4937      	ldr	r1, [pc, #220]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	e03a      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f0:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_RCC_OscConfig+0x244>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd f8df 	bl	80014b8 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fd f8db 	bl	80014b8 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1a8      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b28      	ldr	r3, [pc, #160]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4925      	ldr	r1, [pc, #148]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004332:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_RCC_OscConfig+0x244>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd f8be 	bl	80014b8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004340:	f7fd f8ba 	bl	80014b8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e187      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d036      	beq.n	80043d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004372:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <HAL_RCC_OscConfig+0x248>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fd f89e 	bl	80014b8 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004380:	f7fd f89a 	bl	80014b8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e167      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x200>
 800439e:	e01b      	b.n	80043d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_OscConfig+0x248>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a6:	f7fd f887 	bl	80014b8 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	e00e      	b.n	80043cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ae:	f7fd f883 	bl	80014b8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d907      	bls.n	80043cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e150      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470000 	.word	0x42470000
 80043c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ea      	bne.n	80043ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8097 	beq.w	8004514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b7d      	ldr	r3, [pc, #500]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	4a7c      	ldr	r2, [pc, #496]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	@ 0x40
 8004406:	4b7a      	ldr	r3, [pc, #488]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b77      	ldr	r3, [pc, #476]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004422:	4b74      	ldr	r3, [pc, #464]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a73      	ldr	r2, [pc, #460]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fd f843 	bl	80014b8 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd f83f 	bl	80014b8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e10c      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b6a      	ldr	r3, [pc, #424]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x2ea>
 800445c:	4b64      	ldr	r3, [pc, #400]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	4a63      	ldr	r2, [pc, #396]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	@ 0x70
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b05      	cmp	r3, #5
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x30c>
 8004472:	4b5f      	ldr	r3, [pc, #380]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a5e      	ldr	r2, [pc, #376]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
 800447e:	4b5c      	ldr	r3, [pc, #368]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	4a5b      	ldr	r2, [pc, #364]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	@ 0x70
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800448c:	4b58      	ldr	r3, [pc, #352]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a57      	ldr	r2, [pc, #348]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
 8004498:	4b55      	ldr	r3, [pc, #340]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd f804 	bl	80014b8 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd f800 	bl	80014b8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0cb      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ee      	beq.n	80044b4 <HAL_RCC_OscConfig+0x334>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fc ffee 	bl	80014b8 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fc ffea 	bl	80014b8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0b5      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	4b3e      	ldr	r3, [pc, #248]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ee      	bne.n	80044e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	4a38      	ldr	r2, [pc, #224]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a1 	beq.w	8004660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800451e:	4b34      	ldr	r3, [pc, #208]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b08      	cmp	r3, #8
 8004528:	d05c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d141      	bne.n	80045b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fc ffbe 	bl	80014b8 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fc ffba 	bl	80014b8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e087      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	491b      	ldr	r1, [pc, #108]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fc ff93 	bl	80014b8 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7fc ff8f 	bl	80014b8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e05c      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x416>
 80045b4:	e054      	b.n	8004660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fc ff7c 	bl	80014b8 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fc ff78 	bl	80014b8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e045      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x444>
 80045e2:	e03d      	b.n	8004660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e038      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000
 80045f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x4ec>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d028      	beq.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d121      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d11a      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004634:	4293      	cmp	r3, r2
 8004636:	d111      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	3b01      	subs	r3, #1
 8004646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0cc      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b68      	ldr	r3, [pc, #416]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90c      	bls.n	80046ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b65      	ldr	r3, [pc, #404]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b63      	ldr	r3, [pc, #396]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b8      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c4:	4b59      	ldr	r3, [pc, #356]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a58      	ldr	r2, [pc, #352]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046dc:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a52      	ldr	r2, [pc, #328]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	4b50      	ldr	r3, [pc, #320]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	494d      	ldr	r1, [pc, #308]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d044      	beq.n	8004790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b47      	ldr	r3, [pc, #284]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b3f      	ldr	r3, [pc, #252]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b3b      	ldr	r3, [pc, #236]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e067      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b37      	ldr	r3, [pc, #220]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4934      	ldr	r1, [pc, #208]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7fc feaa 	bl	80014b8 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fc fea6 	bl	80014b8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d20c      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e032      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4916      	ldr	r1, [pc, #88]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	490e      	ldr	r1, [pc, #56]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047f6:	f000 f821 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	490a      	ldr	r1, [pc, #40]	@ (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	5ccb      	ldrb	r3, [r1, r3]
 800480a:	fa22 f303 	lsr.w	r3, r2, r3
 800480e:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004812:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fc fe0a 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023c00 	.word	0x40023c00
 800482c:	40023800 	.word	0x40023800
 8004830:	08009280 	.word	0x08009280
 8004834:	20000000 	.word	0x20000000
 8004838:	20000004 	.word	0x20000004

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b094      	sub	sp, #80	@ 0x50
 8004842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004854:	4b79      	ldr	r3, [pc, #484]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d00d      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x40>
 8004860:	2b08      	cmp	r3, #8
 8004862:	f200 80e1 	bhi.w	8004a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x34>
 800486a:	2b04      	cmp	r3, #4
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x3a>
 800486e:	e0db      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b73      	ldr	r3, [pc, #460]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004874:	e0db      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004876:	4b73      	ldr	r3, [pc, #460]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800487a:	e0d8      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800487c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004886:	4b6d      	ldr	r3, [pc, #436]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d063      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004892:	4b6a      	ldr	r3, [pc, #424]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	2200      	movs	r2, #0
 800489a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800489c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a6:	2300      	movs	r3, #0
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048ae:	4622      	mov	r2, r4
 80048b0:	462b      	mov	r3, r5
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	0159      	lsls	r1, r3, #5
 80048bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c0:	0150      	lsls	r0, r2, #5
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4621      	mov	r1, r4
 80048c8:	1a51      	subs	r1, r2, r1
 80048ca:	6139      	str	r1, [r7, #16]
 80048cc:	4629      	mov	r1, r5
 80048ce:	eb63 0301 	sbc.w	r3, r3, r1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e0:	4659      	mov	r1, fp
 80048e2:	018b      	lsls	r3, r1, #6
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ea:	4651      	mov	r1, sl
 80048ec:	018a      	lsls	r2, r1, #6
 80048ee:	4651      	mov	r1, sl
 80048f0:	ebb2 0801 	subs.w	r8, r2, r1
 80048f4:	4659      	mov	r1, fp
 80048f6:	eb63 0901 	sbc.w	r9, r3, r1
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800490e:	4690      	mov	r8, r2
 8004910:	4699      	mov	r9, r3
 8004912:	4623      	mov	r3, r4
 8004914:	eb18 0303 	adds.w	r3, r8, r3
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	462b      	mov	r3, r5
 800491c:	eb49 0303 	adc.w	r3, r9, r3
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800492e:	4629      	mov	r1, r5
 8004930:	024b      	lsls	r3, r1, #9
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004938:	4621      	mov	r1, r4
 800493a:	024a      	lsls	r2, r1, #9
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004942:	2200      	movs	r2, #0
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800494c:	f7fb fc90 	bl	8000270 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004958:	e058      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495a:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	2200      	movs	r2, #0
 8004962:	4618      	mov	r0, r3
 8004964:	4611      	mov	r1, r2
 8004966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	f04f 0000 	mov.w	r0, #0
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	0159      	lsls	r1, r3, #5
 8004982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004986:	0150      	lsls	r0, r2, #5
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4641      	mov	r1, r8
 800498e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004992:	4649      	mov	r1, r9
 8004994:	eb63 0b01 	sbc.w	fp, r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049ac:	ebb2 040a 	subs.w	r4, r2, sl
 80049b0:	eb63 050b 	sbc.w	r5, r3, fp
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	00eb      	lsls	r3, r5, #3
 80049be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c2:	00e2      	lsls	r2, r4, #3
 80049c4:	4614      	mov	r4, r2
 80049c6:	461d      	mov	r5, r3
 80049c8:	4643      	mov	r3, r8
 80049ca:	18e3      	adds	r3, r4, r3
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	464b      	mov	r3, r9
 80049d0:	eb45 0303 	adc.w	r3, r5, r3
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049e2:	4629      	mov	r1, r5
 80049e4:	028b      	lsls	r3, r1, #10
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ec:	4621      	mov	r1, r4
 80049ee:	028a      	lsls	r2, r1, #10
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f6:	2200      	movs	r2, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	61fa      	str	r2, [r7, #28]
 80049fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a00:	f7fb fc36 	bl	8000270 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	3301      	adds	r3, #1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3750      	adds	r7, #80	@ 0x50
 8004a34:	46bd      	mov	sp, r7
 8004a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	007a1200 	.word	0x007a1200

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000000 	.word	0x20000000

08004a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a64:	f7ff fff0 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0a9b      	lsrs	r3, r3, #10
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	@ (8004a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08009290 	.word	0x08009290

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d035      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab0:	4b62      	ldr	r3, [pc, #392]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fcff 	bl	80014b8 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004abe:	f7fc fcfb 	bl	80014b8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0b0      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	071b      	lsls	r3, r3, #28
 8004ae8:	4955      	ldr	r1, [pc, #340]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af0:	4b52      	ldr	r3, [pc, #328]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fc fcdf 	bl	80014b8 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004afe:	f7fc fcdb 	bl	80014b8 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e090      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b10:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b44      	ldr	r3, [pc, #272]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	4a43      	ldr	r2, [pc, #268]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fcb1 	bl	80014b8 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fc fcad 	bl	80014b8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e062      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b6c:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b78:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b80:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b96:	4b2a      	ldr	r3, [pc, #168]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba0:	4b29      	ldr	r3, [pc, #164]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4b28      	ldr	r3, [pc, #160]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bac:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bb2:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d114      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fc7b 	bl	80014b8 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fc77 	bl	80014b8 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e02a      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	4b18      	ldr	r3, [pc, #96]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf4:	d10d      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0a:	490d      	ldr	r1, [pc, #52]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]
 8004c10:	e005      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c18:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2a:	4905      	ldr	r1, [pc, #20]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	42470068 	.word	0x42470068
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40007000 	.word	0x40007000
 8004c48:	42470e40 	.word	0x42470e40

08004c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d13f      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c80:	d12f      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c84:	617b      	str	r3, [r7, #20]
          break;
 8004c86:	e02f      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c88:	4b1c      	ldr	r3, [pc, #112]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c94:	d108      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c96:	4b19      	ldr	r3, [pc, #100]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c9e:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e007      	b.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ca8:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb0:	4a15      	ldr	r2, [pc, #84]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cb8:	4b10      	ldr	r3, [pc, #64]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	617b      	str	r3, [r7, #20]
          break;
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
          break;
 8004ce6:	bf00      	nop
        }
      }
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004cea:	bf00      	nop
    }
  }
  return frequency;
 8004cec:	697b      	ldr	r3, [r7, #20]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	00bb8000 	.word	0x00bb8000
 8004d04:	007a1200 	.word	0x007a1200
 8004d08:	00f42400 	.word	0x00f42400

08004d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07b      	b.n	8004e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d108      	bne.n	8004d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d2e:	d009      	beq.n	8004d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	61da      	str	r2, [r3, #28]
 8004d36:	e005      	b.n	8004d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc f9c8 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc8:	ea42 0103 	orr.w	r1, r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0104 	and.w	r1, r3, #4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0210 	and.w	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f043 0201 	orr.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f023 0201 	bic.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e7c:	d901      	bls.n	8004e82 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e01b      	b.n	8004eba <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	daf2      	bge.n	8004e70 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ea6:	d901      	bls.n	8004eac <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d0f0      	beq.n	8004e9a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ede:	d901      	bls.n	8004ee4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e018      	b.n	8004f16 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	daf2      	bge.n	8004ed2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f02:	d901      	bls.n	8004f08 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e006      	b.n	8004f16 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d0f0      	beq.n	8004ef6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b08b      	sub	sp, #44	@ 0x2c
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	e014      	b.n	8004f78 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	3301      	adds	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	3301      	adds	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	3301      	adds	r3, #1
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	6a3a      	ldr	r2, [r7, #32]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d3e6      	bcc.n	8004f4e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f80:	8bfb      	ldrh	r3, [r7, #30]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01e      	beq.n	8004fc4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f90:	461a      	mov	r2, r3
 8004f92:	f107 0310 	add.w	r3, r7, #16
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	701a      	strb	r2, [r3, #0]
      i++;
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004fb8:	8bfb      	ldrh	r3, [r7, #30]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fbe:	8bfb      	ldrh	r3, [r7, #30]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ea      	bne.n	8004f9a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	372c      	adds	r7, #44	@ 0x2c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fea:	68fb      	ldr	r3, [r7, #12]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800502c:	68bb      	ldr	r3, [r7, #8]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0301 	and.w	r3, r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800509e:	461a      	mov	r2, r3
 80050a0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	e00c      	b.n	80050c2 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d107      	bne.n	80050be <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050b4:	461a      	mov	r2, r3
 80050b6:	f241 7370 	movw	r3, #6000	@ 0x1770
 80050ba:	6053      	str	r3, [r2, #4]
 80050bc:	e001      	b.n	80050c2 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	b29b      	uxth	r3, r3
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b089      	sub	sp, #36	@ 0x24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	0c9b      	lsrs	r3, r3, #18
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	0fdb      	lsrs	r3, r3, #31
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0fdb      	lsrs	r3, r3, #31
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d10d      	bne.n	8005174 <USB_HC_Halt+0x82>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <USB_HC_Halt+0x82>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d002      	beq.n	8005170 <USB_HC_Halt+0x7e>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d101      	bne.n	8005174 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e0d8      	b.n	8005326 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <USB_HC_Halt+0x8e>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d173      	bne.n	8005268 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	440a      	add	r2, r1
 8005196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800519a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800519e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d14a      	bne.n	8005242 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d133      	bne.n	8005220 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005204:	d82e      	bhi.n	8005264 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521c:	d0ec      	beq.n	80051f8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800521e:	e081      	b.n	8005324 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800523a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800523e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005240:	e070      	b.n	8005324 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005260:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005262:	e05f      	b.n	8005324 <USB_HC_Halt+0x232>
            break;
 8005264:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005266:	e05d      	b.n	8005324 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005286:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d133      	bne.n	8005300 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	3301      	adds	r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052e4:	d81d      	bhi.n	8005322 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052fc:	d0ec      	beq.n	80052d8 <USB_HC_Halt+0x1e6>
 80052fe:	e011      	b.n	8005324 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	440a      	add	r2, r1
 8005316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800531a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e000      	b.n	8005324 <USB_HC_Halt+0x232>
          break;
 8005322:	bf00      	nop
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	@ 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fd7a 	bl	8004e40 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800534c:	2110      	movs	r1, #16
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fd87 	bl	8004e62 <USB_FlushTxFifo>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fdb1 	bl	8004ec6 <USB_FlushRxFifo>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e01f      	b.n	80053b4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800538a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005392:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800539a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	461a      	mov	r2, r3
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d9dc      	bls.n	8005374 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e034      	b.n	800542a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053d6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053e6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f4:	461a      	mov	r2, r3
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005406:	d80c      	bhi.n	8005422 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800541a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800541e:	d0ec      	beq.n	80053fa <USB_StopHost+0xc8>
 8005420:	e000      	b.n	8005424 <USB_StopHost+0xf2>
        break;
 8005422:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3301      	adds	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b0f      	cmp	r3, #15
 800542e:	d9c7      	bls.n	80053c0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800543c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005444:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fce9 	bl	8004e1e <USB_EnableGlobalInt>

  return ret;
 800544c:	7ffb      	ldrb	r3, [r7, #31]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f804 	bl	800547a <USBH_HandleSof>
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b0b      	cmp	r3, #11
 800548a:	d10a      	bne.n	80054a2 <USBH_HandleSof+0x28>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80054ce:	2300      	movs	r3, #0
 80054d0:	2200      	movs	r2, #0
 80054d2:	f000 f8c1 	bl	8005658 <osMessageQueuePut>
#endif
#endif

  return;
 80054d6:	bf00      	nop
}
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80054ee:	bf00      	nop
}
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800552e:	2300      	movs	r3, #0
 8005530:	2200      	movs	r2, #0
 8005532:	f000 f891 	bl	8005658 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f002 fdf9 	bl	8008158 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	791b      	ldrb	r3, [r3, #4]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f830 	bl	80055d2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	795b      	ldrb	r3, [r3, #5]
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f82a 	bl	80055d2 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	f000 f85f 	bl	8005658 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80055c0:	2300      	movs	r3, #0
 80055c2:	2200      	movs	r2, #0
 80055c4:	f000 f848 	bl	8005658 <osMessageQueuePut>
#endif

  return USBH_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	2b0f      	cmp	r3, #15
 80055e2:	d80d      	bhi.n	8005600 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	33e0      	adds	r3, #224	@ 0xe0
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	33e0      	adds	r3, #224	@ 0xe0
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005616:	f3ef 8305 	mrs	r3, IPSR
 800561a:	603b      	str	r3, [r7, #0]
  return(result);
 800561c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005622:	f06f 0305 	mvn.w	r3, #5
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e00c      	b.n	8005644 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <osKernelInitialize+0x44>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <osKernelInitialize+0x44>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005638:	2300      	movs	r3, #0
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	e002      	b.n	8005644 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005644:	687b      	ldr	r3, [r7, #4]
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000018c 	.word	0x2000018c

08005658 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005670:	f3ef 8305 	mrs	r3, IPSR
 8005674:	617b      	str	r3, [r7, #20]
  return(result);
 8005676:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005678:	2b00      	cmp	r3, #0
 800567a:	d028      	beq.n	80056ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <osMessageQueuePut+0x36>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <osMessageQueuePut+0x36>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800568e:	f06f 0303 	mvn.w	r3, #3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e038      	b.n	8005708 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800569a:	f107 0210 	add.w	r2, r7, #16
 800569e:	2300      	movs	r3, #0
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	69b8      	ldr	r0, [r7, #24]
 80056a4:	f000 fb68 	bl	8005d78 <xQueueGenericSendFromISR>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d003      	beq.n	80056b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80056ae:	f06f 0302 	mvn.w	r3, #2
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e028      	b.n	8005708 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d025      	beq.n	8005708 <osMessageQueuePut+0xb0>
 80056bc:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <osMessageQueuePut+0xbc>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	e01c      	b.n	8005708 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <osMessageQueuePut+0x82>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80056da:	f06f 0303 	mvn.w	r3, #3
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e012      	b.n	8005708 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056e2:	2300      	movs	r3, #0
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	69b8      	ldr	r0, [r7, #24]
 80056ea:	f000 fa43 	bl	8005b74 <xQueueGenericSend>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d009      	beq.n	8005708 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80056fa:	f06f 0301 	mvn.w	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e002      	b.n	8005708 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005702:	f06f 0302 	mvn.w	r3, #2
 8005706:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005708:	69fb      	ldr	r3, [r7, #28]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <vApplicationGetIdleTaskMemory+0x2c>)
 8005728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a06      	ldr	r2, [pc, #24]	@ (8005748 <vApplicationGetIdleTaskMemory+0x30>)
 800572e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2280      	movs	r2, #128	@ 0x80
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000190 	.word	0x20000190
 8005748:	200001ec 	.word	0x200001ec

0800574c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a07      	ldr	r2, [pc, #28]	@ (8005778 <vApplicationGetTimerTaskMemory+0x2c>)
 800575c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a06      	ldr	r2, [pc, #24]	@ (800577c <vApplicationGetTimerTaskMemory+0x30>)
 8005762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200003ec 	.word	0x200003ec
 800577c:	20000448 	.word	0x20000448

08005780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f103 0208 	add.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 0208 	add.w	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005838:	d103      	bne.n	8005842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e00c      	b.n	800585c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3308      	adds	r3, #8
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e002      	b.n	8005850 <vListInsert+0x2e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d2f6      	bcs.n	800584a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6892      	ldr	r2, [r2, #8]
 80058aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6852      	ldr	r2, [r2, #4]
 80058b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d103      	bne.n	80058c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005914:	f002 f8b8 	bl	8007a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	441a      	add	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005944:	3b01      	subs	r3, #1
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	441a      	add	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	22ff      	movs	r2, #255	@ 0xff
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	22ff      	movs	r2, #255	@ 0xff
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d114      	bne.n	8005994 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01a      	beq.n	80059a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3310      	adds	r3, #16
 8005976:	4618      	mov	r0, r3
 8005978:	f001 f956 	bl	8006c28 <xTaskRemoveFromEventList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d012      	beq.n	80059a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <xQueueGenericReset+0xd0>)
 8005984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	e009      	b.n	80059a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3310      	adds	r3, #16
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fef1 	bl	8005780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3324      	adds	r3, #36	@ 0x24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff feec 	bl	8005780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059a8:	f002 f8a0 	bl	8007aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059ac:	2301      	movs	r3, #1
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	@ 0x38
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <xQueueGenericCreateStatic+0x56>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <xQueueGenericCreateStatic+0x5a>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericCreateStatic+0x5c>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <xQueueGenericCreateStatic+0x84>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <xQueueGenericCreateStatic+0x88>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <xQueueGenericCreateStatic+0x8a>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	61fb      	str	r3, [r7, #28]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a62:	2350      	movs	r3, #80	@ 0x50
 8005a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b50      	cmp	r3, #80	@ 0x50
 8005a6a:	d00b      	beq.n	8005a84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	61bb      	str	r3, [r7, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f840 	bl	8005b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3730      	adds	r7, #48	@ 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	@ 0x28
 8005aba:	af02      	add	r7, sp, #8
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	613b      	str	r3, [r7, #16]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3350      	adds	r3, #80	@ 0x50
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f8eb 	bl	8007ccc <pvPortMalloc>
 8005af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d011      	beq.n	8005b22 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	3350      	adds	r3, #80	@ 0x50
 8005b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b10:	79fa      	ldrb	r2, [r7, #7]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f805 	bl	8005b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b22:	69bb      	ldr	r3, [r7, #24]
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e002      	b.n	8005b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f7ff fec3 	bl	80058e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	@ 0x38
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <xQueueGenericSend+0x34>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d103      	bne.n	8005bb6 <xQueueGenericSend+0x42>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xQueueGenericSend+0x46>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericSend+0x48>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <xQueueGenericSend+0x64>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x72>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <xQueueGenericSend+0x76>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <xQueueGenericSend+0x78>
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <xQueueGenericSend+0x94>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	623b      	str	r3, [r7, #32]
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c08:	f001 f9ce 	bl	8006fa8 <xTaskGetSchedulerState>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <xQueueGenericSend+0xa4>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <xQueueGenericSend+0xa8>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <xQueueGenericSend+0xaa>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <xQueueGenericSend+0xc6>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61fb      	str	r3, [r7, #28]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c3a:	f001 ff25 	bl	8007a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <xQueueGenericSend+0xdc>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d129      	bne.n	8005ca4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c56:	f000 fa0f 	bl	8006078 <prvCopyDataToQueue>
 8005c5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d010      	beq.n	8005c86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	3324      	adds	r3, #36	@ 0x24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 ffdd 	bl	8006c28 <xTaskRemoveFromEventList>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c74:	4b3f      	ldr	r3, [pc, #252]	@ (8005d74 <xQueueGenericSend+0x200>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	e00a      	b.n	8005c9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c8c:	4b39      	ldr	r3, [pc, #228]	@ (8005d74 <xQueueGenericSend+0x200>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c9c:	f001 ff26 	bl	8007aec <vPortExitCritical>
				return pdPASS;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e063      	b.n	8005d6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005caa:	f001 ff1f 	bl	8007aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e05c      	b.n	8005d6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 f817 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cc6:	f001 ff11 	bl	8007aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cca:	f000 fd87 	bl	80067dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cce:	f001 fedb 	bl	8007a88 <vPortEnterCritical>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd8:	b25b      	sxtb	r3, r3
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cde:	d103      	bne.n	8005ce8 <xQueueGenericSend+0x174>
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf4:	d103      	bne.n	8005cfe <xQueueGenericSend+0x18a>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cfe:	f001 fef5 	bl	8007aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d02:	1d3a      	adds	r2, r7, #4
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 f806 	bl	8006d1c <xTaskCheckForTimeOut>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d124      	bne.n	8005d60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d18:	f000 faa6 	bl	8006268 <prvIsQueueFull>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	3310      	adds	r3, #16
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ff2a 	bl	8006b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d32:	f000 fa31 	bl	8006198 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d36:	f000 fd5f 	bl	80067f8 <xTaskResumeAll>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f af7c 	bne.w	8005c3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d42:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <xQueueGenericSend+0x200>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	e772      	b.n	8005c3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d56:	f000 fa1f 	bl	8006198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d5a:	f000 fd4d 	bl	80067f8 <xTaskResumeAll>
 8005d5e:	e76c      	b.n	8005c3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d62:	f000 fa19 	bl	8006198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d66:	f000 fd47 	bl	80067f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3738      	adds	r7, #56	@ 0x38
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b090      	sub	sp, #64	@ 0x40
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <xQueueGenericSendFromISR+0x3e>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <xQueueGenericSendFromISR+0x42>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <xQueueGenericSendFromISR+0x44>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d103      	bne.n	8005de6 <xQueueGenericSendFromISR+0x6e>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <xQueueGenericSendFromISR+0x72>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xQueueGenericSendFromISR+0x74>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	623b      	str	r3, [r7, #32]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e08:	f001 ff1e 	bl	8007c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e0c:	f3ef 8211 	mrs	r2, BASEPRI
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	61fa      	str	r2, [r7, #28]
 8005e22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d302      	bcc.n	8005e3a <xQueueGenericSendFromISR+0xc2>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d12f      	bne.n	8005e9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e50:	f000 f912 	bl	8006078 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5c:	d112      	bne.n	8005e84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	3324      	adds	r3, #36	@ 0x24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fedc 	bl	8006c28 <xTaskRemoveFromEventList>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e007      	b.n	8005e94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e98:	e001      	b.n	8005e9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ea8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3740      	adds	r7, #64	@ 0x40
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08c      	sub	sp, #48	@ 0x30
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <xQueueReceive+0x32>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	623b      	str	r3, [r7, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <xQueueReceive+0x40>
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <xQueueReceive+0x44>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <xQueueReceive+0x46>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <xQueueReceive+0x62>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	61fb      	str	r3, [r7, #28]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f16:	f001 f847 	bl	8006fa8 <xTaskGetSchedulerState>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <xQueueReceive+0x72>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <xQueueReceive+0x76>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <xQueueReceive+0x78>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <xQueueReceive+0x94>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	61bb      	str	r3, [r7, #24]
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f48:	f001 fd9e 	bl	8007a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01f      	beq.n	8005f98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5c:	f000 f8f6 	bl	800614c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00f      	beq.n	8005f90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	3310      	adds	r3, #16
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fe57 	bl	8006c28 <xTaskRemoveFromEventList>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f80:	4b3c      	ldr	r3, [pc, #240]	@ (8006074 <xQueueReceive+0x1c0>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f90:	f001 fdac 	bl	8007aec <vPortExitCritical>
				return pdPASS;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e069      	b.n	800606c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9e:	f001 fda5 	bl	8007aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e062      	b.n	800606c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fe9d 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fba:	f001 fd97 	bl	8007aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fbe:	f000 fc0d 	bl	80067dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fc2:	f001 fd61 	bl	8007a88 <vPortEnterCritical>
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fd2:	d103      	bne.n	8005fdc <xQueueReceive+0x128>
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fe8:	d103      	bne.n	8005ff2 <xQueueReceive+0x13e>
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ff2:	f001 fd7b 	bl	8007aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff6:	1d3a      	adds	r2, r7, #4
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fe8c 	bl	8006d1c <xTaskCheckForTimeOut>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d123      	bne.n	8006052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800600a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600c:	f000 f916 	bl	800623c <prvIsQueueEmpty>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d017      	beq.n	8006046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	3324      	adds	r3, #36	@ 0x24
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fdb0 	bl	8006b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006026:	f000 f8b7 	bl	8006198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800602a:	f000 fbe5 	bl	80067f8 <xTaskResumeAll>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d189      	bne.n	8005f48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006034:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <xQueueReceive+0x1c0>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	e780      	b.n	8005f48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006048:	f000 f8a6 	bl	8006198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604c:	f000 fbd4 	bl	80067f8 <xTaskResumeAll>
 8006050:	e77a      	b.n	8005f48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006054:	f000 f8a0 	bl	8006198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006058:	f000 fbce 	bl	80067f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800605c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800605e:	f000 f8ed 	bl	800623c <prvIsQueueEmpty>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	f43f af6f 	beq.w	8005f48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800606a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800606c:	4618      	mov	r0, r3
 800606e:	3730      	adds	r7, #48	@ 0x30
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d14d      	bne.n	800613a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 ff9e 	bl	8006fe4 <xTaskPriorityDisinherit>
 80060a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	e043      	b.n	800613a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d119      	bne.n	80060ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6858      	ldr	r0, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	f002 fb43 	bl	800874e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d32b      	bcc.n	800613a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	e026      	b.n	800613a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68d8      	ldr	r0, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	461a      	mov	r2, r3
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	f002 fb29 	bl	800874e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	425b      	negs	r3, r3
 8006106:	441a      	add	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d207      	bcs.n	8006128 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	425b      	negs	r3, r3
 8006122:	441a      	add	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d105      	bne.n	800613a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	3b01      	subs	r3, #1
 8006138:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006142:	697b      	ldr	r3, [r7, #20]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	441a      	add	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	429a      	cmp	r2, r3
 8006176:	d303      	bcc.n	8006180 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68d9      	ldr	r1, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006188:	461a      	mov	r2, r3
 800618a:	6838      	ldr	r0, [r7, #0]
 800618c:	f002 fadf 	bl	800874e <memcpy>
	}
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061a0:	f001 fc72 	bl	8007a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061ac:	e011      	b.n	80061d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	@ 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fd34 	bl	8006c28 <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061c6:	f000 fe0d 	bl	8006de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dce9      	bgt.n	80061ae <prvUnlockQueue+0x16>
 80061da:	e000      	b.n	80061de <prvUnlockQueue+0x46>
					break;
 80061dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	22ff      	movs	r2, #255	@ 0xff
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80061e6:	f001 fc81 	bl	8007aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061ea:	f001 fc4d 	bl	8007a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061f6:	e011      	b.n	800621c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd0f 	bl	8006c28 <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006210:	f000 fde8 	bl	8006de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	3b01      	subs	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800621c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dce9      	bgt.n	80061f8 <prvUnlockQueue+0x60>
 8006224:	e000      	b.n	8006228 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006226:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	22ff      	movs	r2, #255	@ 0xff
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006230:	f001 fc5c 	bl	8007aec <vPortExitCritical>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006244:	f001 fc20 	bl	8007a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e001      	b.n	800625a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800625a:	f001 fc47 	bl	8007aec <vPortExitCritical>

	return xReturn;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006270:	f001 fc0a 	bl	8007a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	429a      	cmp	r2, r3
 800627e:	d102      	bne.n	8006286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e001      	b.n	800628a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800628a:	f001 fc2f 	bl	8007aec <vPortExitCritical>

	return xReturn;
 800628e:	68fb      	ldr	r3, [r7, #12]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e014      	b.n	80062d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062a8:	4a0f      	ldr	r2, [pc, #60]	@ (80062e8 <vQueueAddToRegistry+0x50>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062b4:	490c      	ldr	r1, [pc, #48]	@ (80062e8 <vQueueAddToRegistry+0x50>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062be:	4a0a      	ldr	r2, [pc, #40]	@ (80062e8 <vQueueAddToRegistry+0x50>)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062ca:	e006      	b.n	80062da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9e7      	bls.n	80062a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000848 	.word	0x20000848

080062ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062fc:	f001 fbc4 	bl	8007a88 <vPortEnterCritical>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800630c:	d103      	bne.n	8006316 <vQueueWaitForMessageRestricted+0x2a>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006322:	d103      	bne.n	800632c <vQueueWaitForMessageRestricted+0x40>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800632c:	f001 fbde 	bl	8007aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3324      	adds	r3, #36	@ 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fc45 	bl	8006bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff26 	bl	8006198 <prvUnlockQueue>
	}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	@ 0x38
 8006358:	af04      	add	r7, sp, #16
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61fb      	str	r3, [r7, #28]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800639e:	235c      	movs	r3, #92	@ 0x5c
 80063a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80063a6:	d00b      	beq.n	80063c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61bb      	str	r3, [r7, #24]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01e      	beq.n	8006406 <xTaskCreateStatic+0xb2>
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01b      	beq.n	8006406 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063e0:	2300      	movs	r3, #0
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	f107 0314 	add.w	r3, r7, #20
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f850 	bl	800649e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006400:	f000 f8de 	bl	80065c0 <prvAddNewTaskToReadyList>
 8006404:	e001      	b.n	800640a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800640a:	697b      	ldr	r3, [r7, #20]
	}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	@ 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	@ 0x30
 8006418:	af04      	add	r7, sp, #16
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fc4f 	bl	8007ccc <pvPortMalloc>
 800642e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006436:	205c      	movs	r0, #92	@ 0x5c
 8006438:	f001 fc48 	bl	8007ccc <pvPortMalloc>
 800643c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	631a      	str	r2, [r3, #48]	@ 0x30
 800644a:	e005      	b.n	8006458 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800644c:	6978      	ldr	r0, [r7, #20]
 800644e:	f001 fd0b 	bl	8007e68 <vPortFree>
 8006452:	e001      	b.n	8006458 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d017      	beq.n	800648e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	2300      	movs	r3, #0
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f80e 	bl	800649e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006482:	69f8      	ldr	r0, [r7, #28]
 8006484:	f000 f89c 	bl	80065c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006488:	2301      	movs	r3, #1
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e002      	b.n	8006494 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006492:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006494:	69bb      	ldr	r3, [r7, #24]
	}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b088      	sub	sp, #32
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	461a      	mov	r2, r3
 80064b6:	21a5      	movs	r1, #165	@ 0xa5
 80064b8:	f002 f8bd 	bl	8008636 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064c6:	3b01      	subs	r3, #1
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	617b      	str	r3, [r7, #20]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01f      	beq.n	800653e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e012      	b.n	800652a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	7819      	ldrb	r1, [r3, #0]
 800650c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	3334      	adds	r3, #52	@ 0x34
 8006514:	460a      	mov	r2, r1
 8006516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b0f      	cmp	r3, #15
 800652e:	d9e9      	bls.n	8006504 <prvInitialiseNewTask+0x66>
 8006530:	e000      	b.n	8006534 <prvInitialiseNewTask+0x96>
			{
				break;
 8006532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800653c:	e003      	b.n	8006546 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006548:	2b37      	cmp	r3, #55	@ 0x37
 800654a:	d901      	bls.n	8006550 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800654c:	2337      	movs	r3, #55	@ 0x37
 800654e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006554:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	2200      	movs	r2, #0
 8006560:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f92a 	bl	80057c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	3318      	adds	r3, #24
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff f925 	bl	80057c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800658a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	2200      	movs	r2, #0
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	69b8      	ldr	r0, [r7, #24]
 80065a0:	f001 f93e 	bl	8007820 <pxPortInitialiseStack>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b6:	bf00      	nop
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065c8:	f001 fa5e 	bl	8007a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006684 <prvAddNewTaskToReadyList+0xc4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <prvAddNewTaskToReadyList+0xc4>)
 80065d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006688 <prvAddNewTaskToReadyList+0xc8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065de:	4a2a      	ldr	r2, [pc, #168]	@ (8006688 <prvAddNewTaskToReadyList+0xc8>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065e4:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <prvAddNewTaskToReadyList+0xc4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d110      	bne.n	800660e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065ec:	f000 fc1e 	bl	8006e2c <prvInitialiseTaskLists>
 80065f0:	e00d      	b.n	800660e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065f2:	4b26      	ldr	r3, [pc, #152]	@ (800668c <prvAddNewTaskToReadyList+0xcc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065fa:	4b23      	ldr	r3, [pc, #140]	@ (8006688 <prvAddNewTaskToReadyList+0xc8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	429a      	cmp	r2, r3
 8006606:	d802      	bhi.n	800660e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006608:	4a1f      	ldr	r2, [pc, #124]	@ (8006688 <prvAddNewTaskToReadyList+0xc8>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800660e:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <prvAddNewTaskToReadyList+0xd0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a1e      	ldr	r2, [pc, #120]	@ (8006690 <prvAddNewTaskToReadyList+0xd0>)
 8006616:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006618:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <prvAddNewTaskToReadyList+0xd0>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006624:	4b1b      	ldr	r3, [pc, #108]	@ (8006694 <prvAddNewTaskToReadyList+0xd4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d903      	bls.n	8006634 <prvAddNewTaskToReadyList+0x74>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a18      	ldr	r2, [pc, #96]	@ (8006694 <prvAddNewTaskToReadyList+0xd4>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4a15      	ldr	r2, [pc, #84]	@ (8006698 <prvAddNewTaskToReadyList+0xd8>)
 8006642:	441a      	add	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7ff f8c5 	bl	80057da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006650:	f001 fa4c 	bl	8007aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006654:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <prvAddNewTaskToReadyList+0xcc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <prvAddNewTaskToReadyList+0xc8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	429a      	cmp	r2, r3
 8006668:	d207      	bcs.n	800667a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800666a:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <prvAddNewTaskToReadyList+0xdc>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000d5c 	.word	0x20000d5c
 8006688:	20000888 	.word	0x20000888
 800668c:	20000d68 	.word	0x20000d68
 8006690:	20000d78 	.word	0x20000d78
 8006694:	20000d64 	.word	0x20000d64
 8006698:	2000088c 	.word	0x2000088c
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066b2:	4b14      	ldr	r3, [pc, #80]	@ (8006704 <vTaskDelay+0x64>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <vTaskDelay+0x32>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60bb      	str	r3, [r7, #8]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066d2:	f000 f883 	bl	80067dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066d6:	2100      	movs	r1, #0
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fcf3 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066de:	f000 f88b 	bl	80067f8 <xTaskResumeAll>
 80066e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d107      	bne.n	80066fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066ea:	4b07      	ldr	r3, [pc, #28]	@ (8006708 <vTaskDelay+0x68>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000d84 	.word	0x20000d84
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	@ 0x28
 8006710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800671a:	463a      	mov	r2, r7
 800671c:	1d39      	adds	r1, r7, #4
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fff8 	bl	8005718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	9202      	str	r2, [sp, #8]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	2300      	movs	r3, #0
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	460a      	mov	r2, r1
 800673a:	4922      	ldr	r1, [pc, #136]	@ (80067c4 <vTaskStartScheduler+0xb8>)
 800673c:	4822      	ldr	r0, [pc, #136]	@ (80067c8 <vTaskStartScheduler+0xbc>)
 800673e:	f7ff fe09 	bl	8006354 <xTaskCreateStatic>
 8006742:	4603      	mov	r3, r0
 8006744:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <vTaskStartScheduler+0xc0>)
 8006746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006748:	4b20      	ldr	r3, [pc, #128]	@ (80067cc <vTaskStartScheduler+0xc0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006750:	2301      	movs	r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e001      	b.n	800675a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d102      	bne.n	8006766 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006760:	f000 fd04 	bl	800716c <xTimerCreateTimerTask>
 8006764:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d116      	bne.n	800679a <vTaskStartScheduler+0x8e>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006780:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <vTaskStartScheduler+0xc4>)
 8006782:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006786:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006788:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <vTaskStartScheduler+0xc8>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <vTaskStartScheduler+0xcc>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006794:	f001 f8d4 	bl	8007940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006798:	e00f      	b.n	80067ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067a0:	d10b      	bne.n	80067ba <vTaskStartScheduler+0xae>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <vTaskStartScheduler+0xaa>
}
 80067ba:	bf00      	nop
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08009260 	.word	0x08009260
 80067c8:	08006dfd 	.word	0x08006dfd
 80067cc:	20000d80 	.word	0x20000d80
 80067d0:	20000d7c 	.word	0x20000d7c
 80067d4:	20000d68 	.word	0x20000d68
 80067d8:	20000d60 	.word	0x20000d60

080067dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067e0:	4b04      	ldr	r3, [pc, #16]	@ (80067f4 <vTaskSuspendAll+0x18>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3301      	adds	r3, #1
 80067e6:	4a03      	ldr	r2, [pc, #12]	@ (80067f4 <vTaskSuspendAll+0x18>)
 80067e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20000d84 	.word	0x20000d84

080067f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006806:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <xTaskResumeAll+0x118>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <xTaskResumeAll+0x2e>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	603b      	str	r3, [r7, #0]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006826:	f001 f92f 	bl	8007a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800682a:	4b39      	ldr	r3, [pc, #228]	@ (8006910 <xTaskResumeAll+0x118>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3b01      	subs	r3, #1
 8006830:	4a37      	ldr	r2, [pc, #220]	@ (8006910 <xTaskResumeAll+0x118>)
 8006832:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006834:	4b36      	ldr	r3, [pc, #216]	@ (8006910 <xTaskResumeAll+0x118>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d162      	bne.n	8006902 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800683c:	4b35      	ldr	r3, [pc, #212]	@ (8006914 <xTaskResumeAll+0x11c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d05e      	beq.n	8006902 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006844:	e02f      	b.n	80068a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006846:	4b34      	ldr	r3, [pc, #208]	@ (8006918 <xTaskResumeAll+0x120>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3318      	adds	r3, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f81e 	bl	8005894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3304      	adds	r3, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff f819 	bl	8005894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	4b2d      	ldr	r3, [pc, #180]	@ (800691c <xTaskResumeAll+0x124>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d903      	bls.n	8006876 <xTaskResumeAll+0x7e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	4a2a      	ldr	r2, [pc, #168]	@ (800691c <xTaskResumeAll+0x124>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4a27      	ldr	r2, [pc, #156]	@ (8006920 <xTaskResumeAll+0x128>)
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fe ffa4 	bl	80057da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4b23      	ldr	r3, [pc, #140]	@ (8006924 <xTaskResumeAll+0x12c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	429a      	cmp	r2, r3
 800689e:	d302      	bcc.n	80068a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80068a0:	4b21      	ldr	r3, [pc, #132]	@ (8006928 <xTaskResumeAll+0x130>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <xTaskResumeAll+0x120>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1cb      	bne.n	8006846 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068b4:	f000 fb58 	bl	8006f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068b8:	4b1c      	ldr	r3, [pc, #112]	@ (800692c <xTaskResumeAll+0x134>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068c4:	f000 f846 	bl	8006954 <xTaskIncrementTick>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80068ce:	4b16      	ldr	r3, [pc, #88]	@ (8006928 <xTaskResumeAll+0x130>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f1      	bne.n	80068c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80068e0:	4b12      	ldr	r3, [pc, #72]	@ (800692c <xTaskResumeAll+0x134>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068e6:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <xTaskResumeAll+0x130>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006930 <xTaskResumeAll+0x138>)
 80068f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006902:	f001 f8f3 	bl	8007aec <vPortExitCritical>

	return xAlreadyYielded;
 8006906:	68bb      	ldr	r3, [r7, #8]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20000d84 	.word	0x20000d84
 8006914:	20000d5c 	.word	0x20000d5c
 8006918:	20000d1c 	.word	0x20000d1c
 800691c:	20000d64 	.word	0x20000d64
 8006920:	2000088c 	.word	0x2000088c
 8006924:	20000888 	.word	0x20000888
 8006928:	20000d70 	.word	0x20000d70
 800692c:	20000d6c 	.word	0x20000d6c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800693a:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <xTaskGetTickCount+0x1c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006940:	687b      	ldr	r3, [r7, #4]
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000d60 	.word	0x20000d60

08006954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800695e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a9c <xTaskIncrementTick+0x148>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 8090 	bne.w	8006a88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006968:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa0 <xTaskIncrementTick+0x14c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006970:	4a4b      	ldr	r2, [pc, #300]	@ (8006aa0 <xTaskIncrementTick+0x14c>)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d121      	bne.n	80069c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800697c:	4b49      	ldr	r3, [pc, #292]	@ (8006aa4 <xTaskIncrementTick+0x150>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	603b      	str	r3, [r7, #0]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <xTaskIncrementTick+0x46>
 800699e:	4b41      	ldr	r3, [pc, #260]	@ (8006aa4 <xTaskIncrementTick+0x150>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	4b40      	ldr	r3, [pc, #256]	@ (8006aa8 <xTaskIncrementTick+0x154>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x150>)
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa8 <xTaskIncrementTick+0x154>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <xTaskIncrementTick+0x158>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a3c      	ldr	r2, [pc, #240]	@ (8006aac <xTaskIncrementTick+0x158>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	f000 fad4 	bl	8006f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab0 <xTaskIncrementTick+0x15c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d349      	bcc.n	8006a5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ca:	4b36      	ldr	r3, [pc, #216]	@ (8006aa4 <xTaskIncrementTick+0x150>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	4b36      	ldr	r3, [pc, #216]	@ (8006ab0 <xTaskIncrementTick+0x15c>)
 80069d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069da:	601a      	str	r2, [r3, #0]
					break;
 80069dc:	e03f      	b.n	8006a5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b31      	ldr	r3, [pc, #196]	@ (8006aa4 <xTaskIncrementTick+0x150>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d203      	bcs.n	80069fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ab0 <xTaskIncrementTick+0x15c>)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069fc:	e02f      	b.n	8006a5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe ff46 	bl	8005894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3318      	adds	r3, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe ff3d 	bl	8005894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1e:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <xTaskIncrementTick+0x160>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d903      	bls.n	8006a2e <xTaskIncrementTick+0xda>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	4a22      	ldr	r2, [pc, #136]	@ (8006ab4 <xTaskIncrementTick+0x160>)
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <xTaskIncrementTick+0x164>)
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4619      	mov	r1, r3
 8006a44:	4610      	mov	r0, r2
 8006a46:	f7fe fec8 	bl	80057da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006abc <xTaskIncrementTick+0x168>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3b8      	bcc.n	80069ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5c:	e7b5      	b.n	80069ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a5e:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <xTaskIncrementTick+0x168>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a64:	4914      	ldr	r1, [pc, #80]	@ (8006ab8 <xTaskIncrementTick+0x164>)
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d901      	bls.n	8006a7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a76:	2301      	movs	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a7a:	4b11      	ldr	r3, [pc, #68]	@ (8006ac0 <xTaskIncrementTick+0x16c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e004      	b.n	8006a92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a88:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac4 <xTaskIncrementTick+0x170>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac4 <xTaskIncrementTick+0x170>)
 8006a90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a92:	697b      	ldr	r3, [r7, #20]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20000d84 	.word	0x20000d84
 8006aa0:	20000d60 	.word	0x20000d60
 8006aa4:	20000d14 	.word	0x20000d14
 8006aa8:	20000d18 	.word	0x20000d18
 8006aac:	20000d74 	.word	0x20000d74
 8006ab0:	20000d7c 	.word	0x20000d7c
 8006ab4:	20000d64 	.word	0x20000d64
 8006ab8:	2000088c 	.word	0x2000088c
 8006abc:	20000888 	.word	0x20000888
 8006ac0:	20000d70 	.word	0x20000d70
 8006ac4:	20000d6c 	.word	0x20000d6c

08006ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ace:	4b28      	ldr	r3, [pc, #160]	@ (8006b70 <vTaskSwitchContext+0xa8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ad6:	4b27      	ldr	r3, [pc, #156]	@ (8006b74 <vTaskSwitchContext+0xac>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006adc:	e042      	b.n	8006b64 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006ade:	4b25      	ldr	r3, [pc, #148]	@ (8006b74 <vTaskSwitchContext+0xac>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae4:	4b24      	ldr	r3, [pc, #144]	@ (8006b78 <vTaskSwitchContext+0xb0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e011      	b.n	8006b10 <vTaskSwitchContext+0x48>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <vTaskSwitchContext+0x42>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	607b      	str	r3, [r7, #4]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <vTaskSwitchContext+0x3e>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	491a      	ldr	r1, [pc, #104]	@ (8006b7c <vTaskSwitchContext+0xb4>)
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0e3      	beq.n	8006aec <vTaskSwitchContext+0x24>
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4a13      	ldr	r2, [pc, #76]	@ (8006b7c <vTaskSwitchContext+0xb4>)
 8006b30:	4413      	add	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3308      	adds	r3, #8
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d104      	bne.n	8006b54 <vTaskSwitchContext+0x8c>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	605a      	str	r2, [r3, #4]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vTaskSwitchContext+0xb8>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4a06      	ldr	r2, [pc, #24]	@ (8006b78 <vTaskSwitchContext+0xb0>)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6013      	str	r3, [r2, #0]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20000d84 	.word	0x20000d84
 8006b74:	20000d70 	.word	0x20000d70
 8006b78:	20000d64 	.word	0x20000d64
 8006b7c:	2000088c 	.word	0x2000088c
 8006b80:	20000888 	.word	0x20000888

08006b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <vTaskPlaceOnEventList+0x48>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3318      	adds	r3, #24
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fe fe34 	bl	8005822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bba:	2101      	movs	r1, #1
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f000 fa81 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000888 	.word	0x20000888

08006bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	617b      	str	r3, [r7, #20]
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	e7fd      	b.n	8006bf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3318      	adds	r3, #24
 8006c00:	4619      	mov	r1, r3
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7fe fde9 	bl	80057da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	68b8      	ldr	r0, [r7, #8]
 8006c18:	f000 fa54 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
	}
 8006c1c:	bf00      	nop
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000888 	.word	0x20000888

08006c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3318      	adds	r3, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fe1a 	bl	8005894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <xTaskRemoveFromEventList+0xb0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11d      	bne.n	8006ca4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fe11 	bl	8005894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d903      	bls.n	8006c86 <xTaskRemoveFromEventList+0x5e>
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <xTaskRemoveFromEventList+0xb8>)
 8006c94:	441a      	add	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe fd9c 	bl	80057da <vListInsertEnd>
 8006ca2:	e005      	b.n	8006cb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	480e      	ldr	r0, [pc, #56]	@ (8006ce4 <xTaskRemoveFromEventList+0xbc>)
 8006cac:	f7fe fd95 	bl	80057da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <xTaskRemoveFromEventList+0xc0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d905      	bls.n	8006cca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <xTaskRemoveFromEventList+0xc4>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e001      	b.n	8006cce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000d84 	.word	0x20000d84
 8006cdc:	20000d64 	.word	0x20000d64
 8006ce0:	2000088c 	.word	0x2000088c
 8006ce4:	20000d1c 	.word	0x20000d1c
 8006ce8:	20000888 	.word	0x20000888
 8006cec:	20000d70 	.word	0x20000d70

08006cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <vTaskInternalSetTimeOutState+0x24>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <vTaskInternalSetTimeOutState+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	20000d74 	.word	0x20000d74
 8006d18:	20000d60 	.word	0x20000d60

08006d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d62:	f000 fe91 	bl	8007a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <xTaskCheckForTimeOut+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d7e:	d102      	bne.n	8006d86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e023      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <xTaskCheckForTimeOut+0xc4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d007      	beq.n	8006da2 <xTaskCheckForTimeOut+0x86>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e015      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d20b      	bcs.n	8006dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff99 	bl	8006cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	e004      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dce:	f000 fe8d 	bl	8007aec <vPortExitCritical>

	return xReturn;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000d60 	.word	0x20000d60
 8006de0:	20000d74 	.word	0x20000d74

08006de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <vTaskMissedYield+0x14>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20000d70 	.word	0x20000d70

08006dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e04:	f000 f852 	bl	8006eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <prvIdleTask+0x28>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d9f9      	bls.n	8006e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <prvIdleTask+0x2c>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e20:	e7f0      	b.n	8006e04 <prvIdleTask+0x8>
 8006e22:	bf00      	nop
 8006e24:	2000088c 	.word	0x2000088c
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	e00c      	b.n	8006e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a12      	ldr	r2, [pc, #72]	@ (8006e8c <prvInitialiseTaskLists+0x60>)
 8006e44:	4413      	add	r3, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fc9a 	bl	8005780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b37      	cmp	r3, #55	@ 0x37
 8006e56:	d9ef      	bls.n	8006e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e58:	480d      	ldr	r0, [pc, #52]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e5a:	f7fe fc91 	bl	8005780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e5e:	480d      	ldr	r0, [pc, #52]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e60:	f7fe fc8e 	bl	8005780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e64:	480c      	ldr	r0, [pc, #48]	@ (8006e98 <prvInitialiseTaskLists+0x6c>)
 8006e66:	f7fe fc8b 	bl	8005780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e6a:	480c      	ldr	r0, [pc, #48]	@ (8006e9c <prvInitialiseTaskLists+0x70>)
 8006e6c:	f7fe fc88 	bl	8005780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e70:	480b      	ldr	r0, [pc, #44]	@ (8006ea0 <prvInitialiseTaskLists+0x74>)
 8006e72:	f7fe fc85 	bl	8005780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <prvInitialiseTaskLists+0x78>)
 8006e78:	4a05      	ldr	r2, [pc, #20]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <prvInitialiseTaskLists+0x7c>)
 8006e7e:	4a05      	ldr	r2, [pc, #20]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000088c 	.word	0x2000088c
 8006e90:	20000cec 	.word	0x20000cec
 8006e94:	20000d00 	.word	0x20000d00
 8006e98:	20000d1c 	.word	0x20000d1c
 8006e9c:	20000d30 	.word	0x20000d30
 8006ea0:	20000d48 	.word	0x20000d48
 8006ea4:	20000d14 	.word	0x20000d14
 8006ea8:	20000d18 	.word	0x20000d18

08006eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb2:	e019      	b.n	8006ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb4:	f000 fde8 	bl	8007a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <prvCheckTasksWaitingTermination+0x50>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fce5 	bl	8005894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4a0a      	ldr	r2, [pc, #40]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ede:	f000 fe05 	bl	8007aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f810 	bl	8006f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e1      	bne.n	8006eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000d30 	.word	0x20000d30
 8006f00:	20000d5c 	.word	0x20000d5c
 8006f04:	20000d44 	.word	0x20000d44

08006f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 ffa2 	bl	8007e68 <vPortFree>
				vPortFree( pxTCB );
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 ff9f 	bl	8007e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f2a:	e019      	b.n	8006f60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d103      	bne.n	8006f3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 ff96 	bl	8007e68 <vPortFree>
	}
 8006f3c:	e010      	b.n	8006f60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d00b      	beq.n	8006f60 <prvDeleteTCB+0x58>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <prvDeleteTCB+0x54>
	}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f80:	e008      	b.n	8006f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a04      	ldr	r2, [pc, #16]	@ (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f92:	6013      	str	r3, [r2, #0]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000d14 	.word	0x20000d14
 8006fa4:	20000d7c 	.word	0x20000d7c

08006fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fae:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <xTaskGetSchedulerState+0x34>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	e008      	b.n	8006fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fbc:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <xTaskGetSchedulerState+0x38>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e001      	b.n	8006fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fce:	687b      	ldr	r3, [r7, #4]
	}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000d68 	.word	0x20000d68
 8006fe0:	20000d84 	.word	0x20000d84

08006fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d058      	beq.n	80070ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80070b8 <xTaskPriorityDisinherit+0xd4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d00b      	beq.n	800701c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	60fb      	str	r3, [r7, #12]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60bb      	str	r3, [r7, #8]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704e:	429a      	cmp	r2, r3
 8007050:	d02c      	beq.n	80070ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007056:	2b00      	cmp	r3, #0
 8007058:	d128      	bne.n	80070ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3304      	adds	r3, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fc18 	bl	8005894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707c:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <xTaskPriorityDisinherit+0xd8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <xTaskPriorityDisinherit+0xa8>
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	4a0c      	ldr	r2, [pc, #48]	@ (80070bc <xTaskPriorityDisinherit+0xd8>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4a09      	ldr	r2, [pc, #36]	@ (80070c0 <xTaskPriorityDisinherit+0xdc>)
 800709a:	441a      	add	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fe fb99 	bl	80057da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ac:	697b      	ldr	r3, [r7, #20]
	}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000888 	.word	0x20000888
 80070bc:	20000d64 	.word	0x20000d64
 80070c0:	2000088c 	.word	0x2000088c

080070c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070ce:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <prvAddCurrentTaskToDelayedList+0x90>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d4:	4b20      	ldr	r3, [pc, #128]	@ (8007158 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fbda 	bl	8005894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070e6:	d10a      	bne.n	80070fe <prvAddCurrentTaskToDelayedList+0x3a>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007158 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4819      	ldr	r0, [pc, #100]	@ (800715c <prvAddCurrentTaskToDelayedList+0x98>)
 80070f8:	f7fe fb6f 	bl	80057da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070fc:	e026      	b.n	800714c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007106:	4b14      	ldr	r3, [pc, #80]	@ (8007158 <prvAddCurrentTaskToDelayedList+0x94>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	429a      	cmp	r2, r3
 8007114:	d209      	bcs.n	800712a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007116:	4b12      	ldr	r3, [pc, #72]	@ (8007160 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <prvAddCurrentTaskToDelayedList+0x94>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fb7d 	bl	8005822 <vListInsert>
}
 8007128:	e010      	b.n	800714c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <prvAddCurrentTaskToDelayedList+0xa0>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <prvAddCurrentTaskToDelayedList+0x94>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7fe fb73 	bl	8005822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800713c:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <prvAddCurrentTaskToDelayedList+0xa4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	d202      	bcs.n	800714c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007146:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000d60 	.word	0x20000d60
 8007158:	20000888 	.word	0x20000888
 800715c:	20000d48 	.word	0x20000d48
 8007160:	20000d18 	.word	0x20000d18
 8007164:	20000d14 	.word	0x20000d14
 8007168:	20000d7c 	.word	0x20000d7c

0800716c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007176:	f000 fb13 	bl	80077a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800717a:	4b1d      	ldr	r3, [pc, #116]	@ (80071f0 <xTimerCreateTimerTask+0x84>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d021      	beq.n	80071c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800718a:	1d3a      	adds	r2, r7, #4
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fad9 	bl	800574c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	9202      	str	r2, [sp, #8]
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	2302      	movs	r3, #2
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	460a      	mov	r2, r1
 80071ac:	4911      	ldr	r1, [pc, #68]	@ (80071f4 <xTimerCreateTimerTask+0x88>)
 80071ae:	4812      	ldr	r0, [pc, #72]	@ (80071f8 <xTimerCreateTimerTask+0x8c>)
 80071b0:	f7ff f8d0 	bl	8006354 <xTaskCreateStatic>
 80071b4:	4603      	mov	r3, r0
 80071b6:	4a11      	ldr	r2, [pc, #68]	@ (80071fc <xTimerCreateTimerTask+0x90>)
 80071b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071ba:	4b10      	ldr	r3, [pc, #64]	@ (80071fc <xTimerCreateTimerTask+0x90>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	613b      	str	r3, [r7, #16]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071e4:	697b      	ldr	r3, [r7, #20]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000db8 	.word	0x20000db8
 80071f4:	08009268 	.word	0x08009268
 80071f8:	08007339 	.word	0x08007339
 80071fc:	20000dbc 	.word	0x20000dbc

08007200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	@ 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800720e:	2300      	movs	r3, #0
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xTimerGenericCommand+0x30>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	623b      	str	r3, [r7, #32]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007230:	4b19      	ldr	r3, [pc, #100]	@ (8007298 <xTimerGenericCommand+0x98>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02a      	beq.n	800728e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b05      	cmp	r3, #5
 8007248:	dc18      	bgt.n	800727c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800724a:	f7ff fead 	bl	8006fa8 <xTaskGetSchedulerState>
 800724e:	4603      	mov	r3, r0
 8007250:	2b02      	cmp	r3, #2
 8007252:	d109      	bne.n	8007268 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007254:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <xTimerGenericCommand+0x98>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	f107 0110 	add.w	r1, r7, #16
 800725c:	2300      	movs	r3, #0
 800725e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007260:	f7fe fc88 	bl	8005b74 <xQueueGenericSend>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24
 8007266:	e012      	b.n	800728e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007268:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <xTimerGenericCommand+0x98>)
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	f107 0110 	add.w	r1, r7, #16
 8007270:	2300      	movs	r3, #0
 8007272:	2200      	movs	r2, #0
 8007274:	f7fe fc7e 	bl	8005b74 <xQueueGenericSend>
 8007278:	6278      	str	r0, [r7, #36]	@ 0x24
 800727a:	e008      	b.n	800728e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800727c:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <xTimerGenericCommand+0x98>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	f107 0110 	add.w	r1, r7, #16
 8007284:	2300      	movs	r3, #0
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	f7fe fd76 	bl	8005d78 <xQueueGenericSendFromISR>
 800728c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007290:	4618      	mov	r0, r3
 8007292:	3728      	adds	r7, #40	@ 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000db8 	.word	0x20000db8

0800729c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a6:	4b23      	ldr	r3, [pc, #140]	@ (8007334 <prvProcessExpiredTimer+0x98>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe faed 	bl	8005894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d023      	beq.n	8007310 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	18d1      	adds	r1, r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f000 f8d5 	bl	8007484 <prvInsertTimerInActiveList>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d020      	beq.n	8007322 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072e0:	2300      	movs	r3, #0
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	2100      	movs	r1, #0
 80072ea:	6978      	ldr	r0, [r7, #20]
 80072ec:	f7ff ff88 	bl	8007200 <xTimerGenericCommand>
 80072f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d114      	bne.n	8007322 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60fb      	str	r3, [r7, #12]
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	b2da      	uxtb	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	4798      	blx	r3
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000db0 	.word	0x20000db0

08007338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007340:	f107 0308 	add.w	r3, r7, #8
 8007344:	4618      	mov	r0, r3
 8007346:	f000 f859 	bl	80073fc <prvGetNextExpireTime>
 800734a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4619      	mov	r1, r3
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f805 	bl	8007360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007356:	f000 f8d7 	bl	8007508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800735a:	bf00      	nop
 800735c:	e7f0      	b.n	8007340 <prvTimerTask+0x8>
	...

08007360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800736a:	f7ff fa37 	bl	80067dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f866 	bl	8007444 <prvSampleTimeNow>
 8007378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d130      	bne.n	80073e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <prvProcessTimerOrBlockTask+0x3c>
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	429a      	cmp	r2, r3
 800738c:	d806      	bhi.n	800739c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800738e:	f7ff fa33 	bl	80067f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff81 	bl	800729c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800739a:	e024      	b.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073a2:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <prvProcessTimerOrBlockTask+0x90>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <prvProcessTimerOrBlockTask+0x50>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <prvProcessTimerOrBlockTask+0x52>
 80073b0:	2300      	movs	r3, #0
 80073b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <prvProcessTimerOrBlockTask+0x94>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	f7fe ff93 	bl	80062ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073c6:	f7ff fa17 	bl	80067f8 <xTaskResumeAll>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073d0:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <prvProcessTimerOrBlockTask+0x98>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
}
 80073e0:	e001      	b.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073e2:	f7ff fa09 	bl	80067f8 <xTaskResumeAll>
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000db4 	.word	0x20000db4
 80073f4:	20000db8 	.word	0x20000db8
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007404:	4b0e      	ldr	r3, [pc, #56]	@ (8007440 <prvGetNextExpireTime+0x44>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <prvGetNextExpireTime+0x16>
 800740e:	2201      	movs	r2, #1
 8007410:	e000      	b.n	8007414 <prvGetNextExpireTime+0x18>
 8007412:	2200      	movs	r2, #0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007420:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <prvGetNextExpireTime+0x44>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e001      	b.n	8007430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000db0 	.word	0x20000db0

08007444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800744c:	f7ff fa72 	bl	8006934 <xTaskGetTickCount>
 8007450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007452:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <prvSampleTimeNow+0x3c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	429a      	cmp	r2, r3
 800745a:	d205      	bcs.n	8007468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800745c:	f000 f93a 	bl	80076d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	e002      	b.n	800746e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800746e:	4a04      	ldr	r2, [pc, #16]	@ (8007480 <prvSampleTimeNow+0x3c>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000dc0 	.word	0x20000dc0

08007484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d812      	bhi.n	80074d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d302      	bcc.n	80074be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e01b      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <prvInsertTimerInActiveList+0x7c>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fe f9aa 	bl	8005822 <vListInsert>
 80074ce:	e012      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d206      	bcs.n	80074e6 <prvInsertTimerInActiveList+0x62>
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d302      	bcc.n	80074e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	e007      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074e6:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <prvInsertTimerInActiveList+0x80>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f7fe f996 	bl	8005822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000db4 	.word	0x20000db4
 8007504:	20000db0 	.word	0x20000db0

08007508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08e      	sub	sp, #56	@ 0x38
 800750c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800750e:	e0ce      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da19      	bge.n	800754a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007516:	1d3b      	adds	r3, r7, #4
 8007518:	3304      	adds	r3, #4
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	61fb      	str	r3, [r7, #28]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007540:	6850      	ldr	r0, [r2, #4]
 8007542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007544:	6892      	ldr	r2, [r2, #8]
 8007546:	4611      	mov	r1, r2
 8007548:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f2c0 80ae 	blt.w	80076ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe f996 	bl	8005894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007568:	463b      	mov	r3, r7
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff6a 	bl	8007444 <prvSampleTimeNow>
 8007570:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b09      	cmp	r3, #9
 8007576:	f200 8097 	bhi.w	80076a8 <prvProcessReceivedCommands+0x1a0>
 800757a:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <prvProcessReceivedCommands+0x78>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	0800761f 	.word	0x0800761f
 8007590:	08007633 	.word	0x08007633
 8007594:	0800767f 	.word	0x0800767f
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	0800761f 	.word	0x0800761f
 80075a4:	08007633 	.word	0x08007633
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	18d1      	adds	r1, r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c8:	f7ff ff5c 	bl	8007484 <prvInsertTimerInActiveList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d06c      	beq.n	80076ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d061      	beq.n	80076ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	441a      	add	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075fa:	f7ff fe01 	bl	8007200 <xTimerGenericCommand>
 80075fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d152      	bne.n	80076ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	61bb      	str	r3, [r7, #24]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007630:	e03d      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10b      	bne.n	800766a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	617b      	str	r3, [r7, #20]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	18d1      	adds	r1, r2, r3
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007678:	f7ff ff04 	bl	8007484 <prvInsertTimerInActiveList>
					break;
 800767c:	e017      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800768c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800768e:	f000 fbeb 	bl	8007e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007692:	e00c      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076a6:	e002      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <prvProcessReceivedCommands+0x1a6>
					break;
 80076ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076ae:	4b08      	ldr	r3, [pc, #32]	@ (80076d0 <prvProcessReceivedCommands+0x1c8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	1d39      	adds	r1, r7, #4
 80076b4:	2200      	movs	r2, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fbfc 	bl	8005eb4 <xQueueReceive>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f47f af26 	bne.w	8007510 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	3730      	adds	r7, #48	@ 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000db8 	.word	0x20000db8

080076d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076da:	e049      	b.n	8007770 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe f8cd 	bl	8005894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02f      	beq.n	8007770 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	429a      	cmp	r2, r3
 8007720:	d90e      	bls.n	8007740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772e:	4b1a      	ldr	r3, [pc, #104]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fe f872 	bl	8005822 <vListInsert>
 800773e:	e017      	b.n	8007770 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2300      	movs	r3, #0
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	2100      	movs	r1, #0
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fd58 	bl	8007200 <xTimerGenericCommand>
 8007750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	603b      	str	r3, [r7, #0]
}
 800776a:	bf00      	nop
 800776c:	bf00      	nop
 800776e:	e7fd      	b.n	800776c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007770:	4b09      	ldr	r3, [pc, #36]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1b0      	bne.n	80076dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800777a:	4b07      	ldr	r3, [pc, #28]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <prvSwitchTimerLists+0xc8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a04      	ldr	r2, [pc, #16]	@ (8007798 <prvSwitchTimerLists+0xc4>)
 8007786:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007788:	4a04      	ldr	r2, [pc, #16]	@ (800779c <prvSwitchTimerLists+0xc8>)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6013      	str	r3, [r2, #0]
}
 800778e:	bf00      	nop
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000db0 	.word	0x20000db0
 800779c:	20000db4 	.word	0x20000db4

080077a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077a6:	f000 f96f 	bl	8007a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077aa:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <prvCheckForValidListAndQueue+0x60>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d120      	bne.n	80077f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077b2:	4814      	ldr	r0, [pc, #80]	@ (8007804 <prvCheckForValidListAndQueue+0x64>)
 80077b4:	f7fd ffe4 	bl	8005780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077b8:	4813      	ldr	r0, [pc, #76]	@ (8007808 <prvCheckForValidListAndQueue+0x68>)
 80077ba:	f7fd ffe1 	bl	8005780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077be:	4b13      	ldr	r3, [pc, #76]	@ (800780c <prvCheckForValidListAndQueue+0x6c>)
 80077c0:	4a10      	ldr	r2, [pc, #64]	@ (8007804 <prvCheckForValidListAndQueue+0x64>)
 80077c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077c4:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <prvCheckForValidListAndQueue+0x70>)
 80077c6:	4a10      	ldr	r2, [pc, #64]	@ (8007808 <prvCheckForValidListAndQueue+0x68>)
 80077c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077ca:	2300      	movs	r3, #0
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	4b11      	ldr	r3, [pc, #68]	@ (8007814 <prvCheckForValidListAndQueue+0x74>)
 80077d0:	4a11      	ldr	r2, [pc, #68]	@ (8007818 <prvCheckForValidListAndQueue+0x78>)
 80077d2:	2110      	movs	r1, #16
 80077d4:	200a      	movs	r0, #10
 80077d6:	f7fe f8f1 	bl	80059bc <xQueueGenericCreateStatic>
 80077da:	4603      	mov	r3, r0
 80077dc:	4a08      	ldr	r2, [pc, #32]	@ (8007800 <prvCheckForValidListAndQueue+0x60>)
 80077de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077e0:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <prvCheckForValidListAndQueue+0x60>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <prvCheckForValidListAndQueue+0x60>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	490b      	ldr	r1, [pc, #44]	@ (800781c <prvCheckForValidListAndQueue+0x7c>)
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fd52 	bl	8006298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077f4:	f000 f97a 	bl	8007aec <vPortExitCritical>
}
 80077f8:	bf00      	nop
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000db8 	.word	0x20000db8
 8007804:	20000d88 	.word	0x20000d88
 8007808:	20000d9c 	.word	0x20000d9c
 800780c:	20000db0 	.word	0x20000db0
 8007810:	20000db4 	.word	0x20000db4
 8007814:	20000e64 	.word	0x20000e64
 8007818:	20000dc4 	.word	0x20000dc4
 800781c:	08009270 	.word	0x08009270

08007820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3b04      	subs	r3, #4
 8007830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b04      	subs	r3, #4
 800783e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 0201 	bic.w	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007850:	4a0c      	ldr	r2, [pc, #48]	@ (8007884 <pxPortInitialiseStack+0x64>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b14      	subs	r3, #20
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b04      	subs	r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f06f 0202 	mvn.w	r2, #2
 800786e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3b20      	subs	r3, #32
 8007874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007876:	68fb      	ldr	r3, [r7, #12]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	08007889 	.word	0x08007889

08007888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007892:	4b13      	ldr	r3, [pc, #76]	@ (80078e0 <prvTaskExitError+0x58>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800789a:	d00b      	beq.n	80078b4 <prvTaskExitError+0x2c>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <prvTaskExitError+0x28>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60bb      	str	r3, [r7, #8]
}
 80078c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c8:	bf00      	nop
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0fc      	beq.n	80078ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	2000000c 	.word	0x2000000c
	...

080078f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078f0:	4b07      	ldr	r3, [pc, #28]	@ (8007910 <pxCurrentTCBConst2>)
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	f380 8809 	msr	PSP, r0
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8811 	msr	BASEPRI, r0
 800790a:	4770      	bx	lr
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst2>:
 8007910:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007918:	4808      	ldr	r0, [pc, #32]	@ (800793c <prvPortStartFirstTask+0x24>)
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f380 8808 	msr	MSP, r0
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8814 	msr	CONTROL, r0
 800792a:	b662      	cpsie	i
 800792c:	b661      	cpsie	f
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	df00      	svc	0
 8007938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800793a:	bf00      	nop
 800793c:	e000ed08 	.word	0xe000ed08

08007940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	4b47      	ldr	r3, [pc, #284]	@ (8007a64 <xPortStartScheduler+0x124>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a47      	ldr	r2, [pc, #284]	@ (8007a68 <xPortStartScheduler+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10b      	bne.n	8007968 <xPortStartScheduler+0x28>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007968:	4b3e      	ldr	r3, [pc, #248]	@ (8007a64 <xPortStartScheduler+0x124>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a6c <xPortStartScheduler+0x12c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10b      	bne.n	800798a <xPortStartScheduler+0x4a>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	60fb      	str	r3, [r7, #12]
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	e7fd      	b.n	8007986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800798a:	4b39      	ldr	r3, [pc, #228]	@ (8007a70 <xPortStartScheduler+0x130>)
 800798c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	22ff      	movs	r2, #255	@ 0xff
 800799a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	4b31      	ldr	r3, [pc, #196]	@ (8007a74 <xPortStartScheduler+0x134>)
 80079b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079b2:	4b31      	ldr	r3, [pc, #196]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079b4:	2207      	movs	r2, #7
 80079b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b8:	e009      	b.n	80079ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3b01      	subs	r3, #1
 80079c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d6:	2b80      	cmp	r3, #128	@ 0x80
 80079d8:	d0ef      	beq.n	80079ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079da:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1c3 0307 	rsb	r3, r3, #7
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00b      	beq.n	80079fe <xPortStartScheduler+0xbe>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60bb      	str	r3, [r7, #8]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	4a1c      	ldr	r2, [pc, #112]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a08:	4b1b      	ldr	r3, [pc, #108]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a10:	4a19      	ldr	r2, [pc, #100]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a1c:	4b17      	ldr	r3, [pc, #92]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a16      	ldr	r2, [pc, #88]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a28:	4b14      	ldr	r3, [pc, #80]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a13      	ldr	r2, [pc, #76]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a34:	f000 f8da 	bl	8007bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a38:	4b11      	ldr	r3, [pc, #68]	@ (8007a80 <xPortStartScheduler+0x140>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a3e:	f000 f8f9 	bl	8007c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xPortStartScheduler+0x144>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a0f      	ldr	r2, [pc, #60]	@ (8007a84 <xPortStartScheduler+0x144>)
 8007a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a4e:	f7ff ff63 	bl	8007918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a52:	f7ff f839 	bl	8006ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a56:	f7ff ff17 	bl	8007888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	e000ed00 	.word	0xe000ed00
 8007a68:	410fc271 	.word	0x410fc271
 8007a6c:	410fc270 	.word	0x410fc270
 8007a70:	e000e400 	.word	0xe000e400
 8007a74:	20000eb4 	.word	0x20000eb4
 8007a78:	20000eb8 	.word	0x20000eb8
 8007a7c:	e000ed20 	.word	0xe000ed20
 8007a80:	2000000c 	.word	0x2000000c
 8007a84:	e000ef34 	.word	0xe000ef34

08007a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007aa2:	4b10      	ldr	r3, [pc, #64]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d110      	bne.n	8007ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <vPortEnterCritical+0x60>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	603b      	str	r3, [r7, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <vPortEnterCritical+0x4a>
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	2000000c 	.word	0x2000000c
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007af2:	4b12      	ldr	r3, [pc, #72]	@ (8007b3c <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <vPortExitCritical+0x26>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	607b      	str	r3, [r7, #4]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b12:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4a08      	ldr	r2, [pc, #32]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b1c:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <vPortExitCritical+0x44>
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8811 	msr	BASEPRI, r3
}
 8007b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	2000000c 	.word	0x2000000c

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	@ (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b64:	f380 8811 	msr	BASEPRI, r0
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f7fe ffaa 	bl	8006ac8 <vTaskSwitchContext>
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f380 8811 	msr	BASEPRI, r0
 8007b7c:	bc09      	pop	{r0, r3}
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6808      	ldr	r0, [r1, #0]
 8007b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b86:	f01e 0f10 	tst.w	lr, #16
 8007b8a:	bf08      	it	eq
 8007b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b90:	f380 8809 	msr	PSP, r0
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bc2:	f7fe fec7 	bl	8006954 <xTaskIncrementTick>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <xPortSysTickHandler+0x40>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	@ (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	@ (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c42:	bf00      	nop
 8007c44:	e000ed88 	.word	0xe000ed88

08007c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d915      	bls.n	8007c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5a:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <vPortValidateInterruptPriority+0x74>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c64:	4b16      	ldr	r3, [pc, #88]	@ (8007cc0 <vPortValidateInterruptPriority+0x78>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20b      	bcs.n	8007c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c86:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc4 <vPortValidateInterruptPriority+0x7c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <vPortValidateInterruptPriority+0x80>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d90b      	bls.n	8007cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	603b      	str	r3, [r7, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <vPortValidateInterruptPriority+0x62>
	}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	e000e3f0 	.word	0xe000e3f0
 8007cc0:	20000eb4 	.word	0x20000eb4
 8007cc4:	e000ed0c 	.word	0xe000ed0c
 8007cc8:	20000eb8 	.word	0x20000eb8

08007ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cd8:	f7fe fd80 	bl	80067dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8007e50 <pvPortMalloc+0x184>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ce4:	f000 f924 	bl	8007f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e54 <pvPortMalloc+0x188>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 8095 	bne.w	8007e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01e      	beq.n	8007d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4413      	add	r3, r2
 8007d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d015      	beq.n	8007d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	3308      	adds	r3, #8
 8007d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <pvPortMalloc+0x6e>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	617b      	str	r3, [r7, #20]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d06f      	beq.n	8007e20 <pvPortMalloc+0x154>
 8007d40:	4b45      	ldr	r3, [pc, #276]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d86a      	bhi.n	8007e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d4a:	4b44      	ldr	r3, [pc, #272]	@ (8007e5c <pvPortMalloc+0x190>)
 8007d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d4e:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <pvPortMalloc+0x190>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d54:	e004      	b.n	8007d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <pvPortMalloc+0xa6>
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f1      	bne.n	8007d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <pvPortMalloc+0x184>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d051      	beq.n	8007e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2208      	movs	r2, #8
 8007d82:	4413      	add	r3, r2
 8007d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	2308      	movs	r3, #8
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d920      	bls.n	8007de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dda:	69b8      	ldr	r0, [r7, #24]
 8007ddc:	f000 f90a 	bl	8007ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007de0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	4a1b      	ldr	r2, [pc, #108]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dee:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <pvPortMalloc+0x194>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d203      	bcs.n	8007e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dfa:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a18      	ldr	r2, [pc, #96]	@ (8007e60 <pvPortMalloc+0x194>)
 8007e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <pvPortMalloc+0x188>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <pvPortMalloc+0x198>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	4a11      	ldr	r2, [pc, #68]	@ (8007e64 <pvPortMalloc+0x198>)
 8007e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e20:	f7fe fcea 	bl	80067f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <pvPortMalloc+0x17a>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	e7fd      	b.n	8007e42 <pvPortMalloc+0x176>
	return pvReturn;
 8007e46:	69fb      	ldr	r3, [r7, #28]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3728      	adds	r7, #40	@ 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20004ac4 	.word	0x20004ac4
 8007e54:	20004ad8 	.word	0x20004ad8
 8007e58:	20004ac8 	.word	0x20004ac8
 8007e5c:	20004abc 	.word	0x20004abc
 8007e60:	20004acc 	.word	0x20004acc
 8007e64:	20004ad0 	.word	0x20004ad0

08007e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d04f      	beq.n	8007f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	425b      	negs	r3, r3
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4413      	add	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4b25      	ldr	r3, [pc, #148]	@ (8007f24 <vPortFree+0xbc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10b      	bne.n	8007eae <vPortFree+0x46>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60fb      	str	r3, [r7, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <vPortFree+0x66>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60bb      	str	r3, [r7, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <vPortFree+0xbc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d11a      	bne.n	8007f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f24 <vPortFree+0xbc>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	401a      	ands	r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ef4:	f7fe fc72 	bl	80067dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <vPortFree+0xc0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4413      	add	r3, r2
 8007f02:	4a09      	ldr	r2, [pc, #36]	@ (8007f28 <vPortFree+0xc0>)
 8007f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f000 f874 	bl	8007ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <vPortFree+0xc4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a06      	ldr	r2, [pc, #24]	@ (8007f2c <vPortFree+0xc4>)
 8007f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f16:	f7fe fc6f 	bl	80067f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20004ad8 	.word	0x20004ad8
 8007f28:	20004ac8 	.word	0x20004ac8
 8007f2c:	20004ad4 	.word	0x20004ad4

08007f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f3c:	4b27      	ldr	r3, [pc, #156]	@ (8007fdc <prvHeapInit+0xac>)
 8007f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3307      	adds	r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fdc <prvHeapInit+0xac>)
 8007f60:	4413      	add	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f68:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <prvHeapInit+0xb0>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe0 <prvHeapInit+0xb0>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	4413      	add	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f92:	4b14      	ldr	r3, [pc, #80]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f9a:	4b12      	ldr	r3, [pc, #72]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe8 <prvHeapInit+0xb8>)
 8007fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	4a09      	ldr	r2, [pc, #36]	@ (8007fec <prvHeapInit+0xbc>)
 8007fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fc8:	4b09      	ldr	r3, [pc, #36]	@ (8007ff0 <prvHeapInit+0xc0>)
 8007fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fce:	601a      	str	r2, [r3, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000ebc 	.word	0x20000ebc
 8007fe0:	20004abc 	.word	0x20004abc
 8007fe4:	20004ac4 	.word	0x20004ac4
 8007fe8:	20004acc 	.word	0x20004acc
 8007fec:	20004ac8 	.word	0x20004ac8
 8007ff0:	20004ad8 	.word	0x20004ad8

08007ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ffc:	4b28      	ldr	r3, [pc, #160]	@ (80080a0 <prvInsertBlockIntoFreeList+0xac>)
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e002      	b.n	8008008 <prvInsertBlockIntoFreeList+0x14>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d8f7      	bhi.n	8008002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d108      	bne.n	8008036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	441a      	add	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d118      	bne.n	800807c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4b15      	ldr	r3, [pc, #84]	@ (80080a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d00d      	beq.n	8008072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	441a      	add	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e008      	b.n	8008084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008072:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e003      	b.n	8008084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d002      	beq.n	8008092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20004abc 	.word	0x20004abc
 80080a4:	20004ac4 	.word	0x20004ac4

080080a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd f9cd 	bl	8005456 <USBH_LL_IncTimer>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fd fa11 	bl	80054fa <USBH_LL_Connect>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd fa26 	bl	8005540 <USBH_LL_Disconnect>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
 8008108:	4613      	mov	r3, r2
 800810a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008112:	4618      	mov	r0, r3
 8008114:	f7fd fa46 	bl	80055a4 <USBH_LL_NotifyURBChange>
#endif
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd f9bb 	bl	80054aa <USBH_LL_PortEnabled>
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800814a:	4618      	mov	r0, r3
 800814c:	f7fd f9c7 	bl	80054de <USBH_LL_PortDisabled>
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800816e:	4618      	mov	r0, r3
 8008170:	f7f9 fd8b 	bl	8001c8a <HAL_HCD_Stop>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f808 	bl	8008190 <USBH_Get_USB_Status>
 8008180:	4603      	mov	r3, r0
 8008182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008184:	7bbb      	ldrb	r3, [r7, #14]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d817      	bhi.n	80081d4 <USBH_Get_USB_Status+0x44>
 80081a4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <USBH_Get_USB_Status+0x1c>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081c3 	.word	0x080081c3
 80081b4:	080081c9 	.word	0x080081c9
 80081b8:	080081cf 	.word	0x080081cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
    break;
 80081c0:	e00b      	b.n	80081da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80081c2:	2302      	movs	r3, #2
 80081c4:	73fb      	strb	r3, [r7, #15]
    break;
 80081c6:	e008      	b.n	80081da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
    break;
 80081cc:	e005      	b.n	80081da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	73fb      	strb	r3, [r7, #15]
    break;
 80081d2:	e002      	b.n	80081da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	bf00      	nop
  }
  return usb_status;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <malloc>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <malloc+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f000 b825 	b.w	800823c <_malloc_r>
 80081f2:	bf00      	nop
 80081f4:	2000001c 	.word	0x2000001c

080081f8 <sbrk_aligned>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008238 <sbrk_aligned+0x40>)
 80081fc:	460c      	mov	r4, r1
 80081fe:	6831      	ldr	r1, [r6, #0]
 8008200:	4605      	mov	r5, r0
 8008202:	b911      	cbnz	r1, 800820a <sbrk_aligned+0x12>
 8008204:	f000 fa54 	bl	80086b0 <_sbrk_r>
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	4621      	mov	r1, r4
 800820c:	4628      	mov	r0, r5
 800820e:	f000 fa4f 	bl	80086b0 <_sbrk_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d103      	bne.n	800821e <sbrk_aligned+0x26>
 8008216:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800821a:	4620      	mov	r0, r4
 800821c:	bd70      	pop	{r4, r5, r6, pc}
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d0f8      	beq.n	800821a <sbrk_aligned+0x22>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4628      	mov	r0, r5
 800822c:	f000 fa40 	bl	80086b0 <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d1f2      	bne.n	800821a <sbrk_aligned+0x22>
 8008234:	e7ef      	b.n	8008216 <sbrk_aligned+0x1e>
 8008236:	bf00      	nop
 8008238:	20004ebc 	.word	0x20004ebc

0800823c <_malloc_r>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	1ccd      	adds	r5, r1, #3
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	2d00      	cmp	r5, #0
 8008250:	4606      	mov	r6, r0
 8008252:	db01      	blt.n	8008258 <_malloc_r+0x1c>
 8008254:	42a9      	cmp	r1, r5
 8008256:	d904      	bls.n	8008262 <_malloc_r+0x26>
 8008258:	230c      	movs	r3, #12
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	2000      	movs	r0, #0
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008338 <_malloc_r+0xfc>
 8008266:	f000 f869 	bl	800833c <__malloc_lock>
 800826a:	f8d8 3000 	ldr.w	r3, [r8]
 800826e:	461c      	mov	r4, r3
 8008270:	bb44      	cbnz	r4, 80082c4 <_malloc_r+0x88>
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff ffbf 	bl	80081f8 <sbrk_aligned>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	4604      	mov	r4, r0
 800827e:	d158      	bne.n	8008332 <_malloc_r+0xf6>
 8008280:	f8d8 4000 	ldr.w	r4, [r8]
 8008284:	4627      	mov	r7, r4
 8008286:	2f00      	cmp	r7, #0
 8008288:	d143      	bne.n	8008312 <_malloc_r+0xd6>
 800828a:	2c00      	cmp	r4, #0
 800828c:	d04b      	beq.n	8008326 <_malloc_r+0xea>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4639      	mov	r1, r7
 8008292:	4630      	mov	r0, r6
 8008294:	eb04 0903 	add.w	r9, r4, r3
 8008298:	f000 fa0a 	bl	80086b0 <_sbrk_r>
 800829c:	4581      	cmp	r9, r0
 800829e:	d142      	bne.n	8008326 <_malloc_r+0xea>
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	1a6d      	subs	r5, r5, r1
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ffa6 	bl	80081f8 <sbrk_aligned>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d03a      	beq.n	8008326 <_malloc_r+0xea>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	442b      	add	r3, r5
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	bb62      	cbnz	r2, 8008318 <_malloc_r+0xdc>
 80082be:	f8c8 7000 	str.w	r7, [r8]
 80082c2:	e00f      	b.n	80082e4 <_malloc_r+0xa8>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	1b52      	subs	r2, r2, r5
 80082c8:	d420      	bmi.n	800830c <_malloc_r+0xd0>
 80082ca:	2a0b      	cmp	r2, #11
 80082cc:	d917      	bls.n	80082fe <_malloc_r+0xc2>
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	6059      	strne	r1, [r3, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	bf08      	it	eq
 80082dc:	f8c8 1000 	streq.w	r1, [r8]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 f82f 	bl	8008348 <__malloc_unlock>
 80082ea:	f104 000b 	add.w	r0, r4, #11
 80082ee:	1d23      	adds	r3, r4, #4
 80082f0:	f020 0007 	bic.w	r0, r0, #7
 80082f4:	1ac2      	subs	r2, r0, r3
 80082f6:	bf1c      	itt	ne
 80082f8:	1a1b      	subne	r3, r3, r0
 80082fa:	50a3      	strne	r3, [r4, r2]
 80082fc:	e7af      	b.n	800825e <_malloc_r+0x22>
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	42a3      	cmp	r3, r4
 8008302:	bf0c      	ite	eq
 8008304:	f8c8 2000 	streq.w	r2, [r8]
 8008308:	605a      	strne	r2, [r3, #4]
 800830a:	e7eb      	b.n	80082e4 <_malloc_r+0xa8>
 800830c:	4623      	mov	r3, r4
 800830e:	6864      	ldr	r4, [r4, #4]
 8008310:	e7ae      	b.n	8008270 <_malloc_r+0x34>
 8008312:	463c      	mov	r4, r7
 8008314:	687f      	ldr	r7, [r7, #4]
 8008316:	e7b6      	b.n	8008286 <_malloc_r+0x4a>
 8008318:	461a      	mov	r2, r3
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	42a3      	cmp	r3, r4
 800831e:	d1fb      	bne.n	8008318 <_malloc_r+0xdc>
 8008320:	2300      	movs	r3, #0
 8008322:	6053      	str	r3, [r2, #4]
 8008324:	e7de      	b.n	80082e4 <_malloc_r+0xa8>
 8008326:	230c      	movs	r3, #12
 8008328:	6033      	str	r3, [r6, #0]
 800832a:	4630      	mov	r0, r6
 800832c:	f000 f80c 	bl	8008348 <__malloc_unlock>
 8008330:	e794      	b.n	800825c <_malloc_r+0x20>
 8008332:	6005      	str	r5, [r0, #0]
 8008334:	e7d6      	b.n	80082e4 <_malloc_r+0xa8>
 8008336:	bf00      	nop
 8008338:	20004ec0 	.word	0x20004ec0

0800833c <__malloc_lock>:
 800833c:	4801      	ldr	r0, [pc, #4]	@ (8008344 <__malloc_lock+0x8>)
 800833e:	f000 ba04 	b.w	800874a <__retarget_lock_acquire_recursive>
 8008342:	bf00      	nop
 8008344:	20005004 	.word	0x20005004

08008348 <__malloc_unlock>:
 8008348:	4801      	ldr	r0, [pc, #4]	@ (8008350 <__malloc_unlock+0x8>)
 800834a:	f000 b9ff 	b.w	800874c <__retarget_lock_release_recursive>
 800834e:	bf00      	nop
 8008350:	20005004 	.word	0x20005004

08008354 <srand>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <srand+0x44>)
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800835c:	4604      	mov	r4, r0
 800835e:	b9b3      	cbnz	r3, 800838e <srand+0x3a>
 8008360:	2018      	movs	r0, #24
 8008362:	f7ff ff41 	bl	80081e8 <malloc>
 8008366:	4602      	mov	r2, r0
 8008368:	6328      	str	r0, [r5, #48]	@ 0x30
 800836a:	b920      	cbnz	r0, 8008376 <srand+0x22>
 800836c:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <srand+0x48>)
 800836e:	480c      	ldr	r0, [pc, #48]	@ (80083a0 <srand+0x4c>)
 8008370:	2146      	movs	r1, #70	@ 0x46
 8008372:	f000 f9fb 	bl	800876c <__assert_func>
 8008376:	490b      	ldr	r1, [pc, #44]	@ (80083a4 <srand+0x50>)
 8008378:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <srand+0x54>)
 800837a:	e9c0 1300 	strd	r1, r3, [r0]
 800837e:	4b0b      	ldr	r3, [pc, #44]	@ (80083ac <srand+0x58>)
 8008380:	6083      	str	r3, [r0, #8]
 8008382:	230b      	movs	r3, #11
 8008384:	8183      	strh	r3, [r0, #12]
 8008386:	2100      	movs	r1, #0
 8008388:	2001      	movs	r0, #1
 800838a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800838e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008390:	2200      	movs	r2, #0
 8008392:	611c      	str	r4, [r3, #16]
 8008394:	615a      	str	r2, [r3, #20]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	2000001c 	.word	0x2000001c
 800839c:	08009298 	.word	0x08009298
 80083a0:	080092af 	.word	0x080092af
 80083a4:	abcd330e 	.word	0xabcd330e
 80083a8:	e66d1234 	.word	0xe66d1234
 80083ac:	0005deec 	.word	0x0005deec

080083b0 <rand>:
 80083b0:	4b16      	ldr	r3, [pc, #88]	@ (800840c <rand+0x5c>)
 80083b2:	b510      	push	{r4, lr}
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80083b8:	b9b3      	cbnz	r3, 80083e8 <rand+0x38>
 80083ba:	2018      	movs	r0, #24
 80083bc:	f7ff ff14 	bl	80081e8 <malloc>
 80083c0:	4602      	mov	r2, r0
 80083c2:	6320      	str	r0, [r4, #48]	@ 0x30
 80083c4:	b920      	cbnz	r0, 80083d0 <rand+0x20>
 80083c6:	4b12      	ldr	r3, [pc, #72]	@ (8008410 <rand+0x60>)
 80083c8:	4812      	ldr	r0, [pc, #72]	@ (8008414 <rand+0x64>)
 80083ca:	2152      	movs	r1, #82	@ 0x52
 80083cc:	f000 f9ce 	bl	800876c <__assert_func>
 80083d0:	4911      	ldr	r1, [pc, #68]	@ (8008418 <rand+0x68>)
 80083d2:	4b12      	ldr	r3, [pc, #72]	@ (800841c <rand+0x6c>)
 80083d4:	e9c0 1300 	strd	r1, r3, [r0]
 80083d8:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <rand+0x70>)
 80083da:	6083      	str	r3, [r0, #8]
 80083dc:	230b      	movs	r3, #11
 80083de:	8183      	strh	r3, [r0, #12]
 80083e0:	2100      	movs	r1, #0
 80083e2:	2001      	movs	r0, #1
 80083e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80083e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083ea:	480e      	ldr	r0, [pc, #56]	@ (8008424 <rand+0x74>)
 80083ec:	690b      	ldr	r3, [r1, #16]
 80083ee:	694c      	ldr	r4, [r1, #20]
 80083f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008428 <rand+0x78>)
 80083f2:	4358      	muls	r0, r3
 80083f4:	fb02 0004 	mla	r0, r2, r4, r0
 80083f8:	fba3 3202 	umull	r3, r2, r3, r2
 80083fc:	3301      	adds	r3, #1
 80083fe:	eb40 0002 	adc.w	r0, r0, r2
 8008402:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008406:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800840a:	bd10      	pop	{r4, pc}
 800840c:	2000001c 	.word	0x2000001c
 8008410:	08009298 	.word	0x08009298
 8008414:	080092af 	.word	0x080092af
 8008418:	abcd330e 	.word	0xabcd330e
 800841c:	e66d1234 	.word	0xe66d1234
 8008420:	0005deec 	.word	0x0005deec
 8008424:	5851f42d 	.word	0x5851f42d
 8008428:	4c957f2d 	.word	0x4c957f2d

0800842c <std>:
 800842c:	2300      	movs	r3, #0
 800842e:	b510      	push	{r4, lr}
 8008430:	4604      	mov	r4, r0
 8008432:	e9c0 3300 	strd	r3, r3, [r0]
 8008436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800843a:	6083      	str	r3, [r0, #8]
 800843c:	8181      	strh	r1, [r0, #12]
 800843e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008440:	81c2      	strh	r2, [r0, #14]
 8008442:	6183      	str	r3, [r0, #24]
 8008444:	4619      	mov	r1, r3
 8008446:	2208      	movs	r2, #8
 8008448:	305c      	adds	r0, #92	@ 0x5c
 800844a:	f000 f8f4 	bl	8008636 <memset>
 800844e:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <std+0x58>)
 8008450:	6263      	str	r3, [r4, #36]	@ 0x24
 8008452:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <std+0x5c>)
 8008454:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008456:	4b0d      	ldr	r3, [pc, #52]	@ (800848c <std+0x60>)
 8008458:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800845a:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <std+0x64>)
 800845c:	6323      	str	r3, [r4, #48]	@ 0x30
 800845e:	4b0d      	ldr	r3, [pc, #52]	@ (8008494 <std+0x68>)
 8008460:	6224      	str	r4, [r4, #32]
 8008462:	429c      	cmp	r4, r3
 8008464:	d006      	beq.n	8008474 <std+0x48>
 8008466:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800846a:	4294      	cmp	r4, r2
 800846c:	d002      	beq.n	8008474 <std+0x48>
 800846e:	33d0      	adds	r3, #208	@ 0xd0
 8008470:	429c      	cmp	r4, r3
 8008472:	d105      	bne.n	8008480 <std+0x54>
 8008474:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800847c:	f000 b964 	b.w	8008748 <__retarget_lock_init_recursive>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	bf00      	nop
 8008484:	080085b1 	.word	0x080085b1
 8008488:	080085d3 	.word	0x080085d3
 800848c:	0800860b 	.word	0x0800860b
 8008490:	0800862f 	.word	0x0800862f
 8008494:	20004ec4 	.word	0x20004ec4

08008498 <stdio_exit_handler>:
 8008498:	4a02      	ldr	r2, [pc, #8]	@ (80084a4 <stdio_exit_handler+0xc>)
 800849a:	4903      	ldr	r1, [pc, #12]	@ (80084a8 <stdio_exit_handler+0x10>)
 800849c:	4803      	ldr	r0, [pc, #12]	@ (80084ac <stdio_exit_handler+0x14>)
 800849e:	f000 b869 	b.w	8008574 <_fwalk_sglue>
 80084a2:	bf00      	nop
 80084a4:	20000010 	.word	0x20000010
 80084a8:	08008945 	.word	0x08008945
 80084ac:	20000020 	.word	0x20000020

080084b0 <cleanup_stdio>:
 80084b0:	6841      	ldr	r1, [r0, #4]
 80084b2:	4b0c      	ldr	r3, [pc, #48]	@ (80084e4 <cleanup_stdio+0x34>)
 80084b4:	4299      	cmp	r1, r3
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4604      	mov	r4, r0
 80084ba:	d001      	beq.n	80084c0 <cleanup_stdio+0x10>
 80084bc:	f000 fa42 	bl	8008944 <_fflush_r>
 80084c0:	68a1      	ldr	r1, [r4, #8]
 80084c2:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <cleanup_stdio+0x38>)
 80084c4:	4299      	cmp	r1, r3
 80084c6:	d002      	beq.n	80084ce <cleanup_stdio+0x1e>
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fa3b 	bl	8008944 <_fflush_r>
 80084ce:	68e1      	ldr	r1, [r4, #12]
 80084d0:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <cleanup_stdio+0x3c>)
 80084d2:	4299      	cmp	r1, r3
 80084d4:	d004      	beq.n	80084e0 <cleanup_stdio+0x30>
 80084d6:	4620      	mov	r0, r4
 80084d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084dc:	f000 ba32 	b.w	8008944 <_fflush_r>
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	20004ec4 	.word	0x20004ec4
 80084e8:	20004f2c 	.word	0x20004f2c
 80084ec:	20004f94 	.word	0x20004f94

080084f0 <global_stdio_init.part.0>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <global_stdio_init.part.0+0x30>)
 80084f4:	4c0b      	ldr	r4, [pc, #44]	@ (8008524 <global_stdio_init.part.0+0x34>)
 80084f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008528 <global_stdio_init.part.0+0x38>)
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	4620      	mov	r0, r4
 80084fc:	2200      	movs	r2, #0
 80084fe:	2104      	movs	r1, #4
 8008500:	f7ff ff94 	bl	800842c <std>
 8008504:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008508:	2201      	movs	r2, #1
 800850a:	2109      	movs	r1, #9
 800850c:	f7ff ff8e 	bl	800842c <std>
 8008510:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008514:	2202      	movs	r2, #2
 8008516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851a:	2112      	movs	r1, #18
 800851c:	f7ff bf86 	b.w	800842c <std>
 8008520:	20004ffc 	.word	0x20004ffc
 8008524:	20004ec4 	.word	0x20004ec4
 8008528:	08008499 	.word	0x08008499

0800852c <__sfp_lock_acquire>:
 800852c:	4801      	ldr	r0, [pc, #4]	@ (8008534 <__sfp_lock_acquire+0x8>)
 800852e:	f000 b90c 	b.w	800874a <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	20005005 	.word	0x20005005

08008538 <__sfp_lock_release>:
 8008538:	4801      	ldr	r0, [pc, #4]	@ (8008540 <__sfp_lock_release+0x8>)
 800853a:	f000 b907 	b.w	800874c <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	20005005 	.word	0x20005005

08008544 <__sinit>:
 8008544:	b510      	push	{r4, lr}
 8008546:	4604      	mov	r4, r0
 8008548:	f7ff fff0 	bl	800852c <__sfp_lock_acquire>
 800854c:	6a23      	ldr	r3, [r4, #32]
 800854e:	b11b      	cbz	r3, 8008558 <__sinit+0x14>
 8008550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008554:	f7ff bff0 	b.w	8008538 <__sfp_lock_release>
 8008558:	4b04      	ldr	r3, [pc, #16]	@ (800856c <__sinit+0x28>)
 800855a:	6223      	str	r3, [r4, #32]
 800855c:	4b04      	ldr	r3, [pc, #16]	@ (8008570 <__sinit+0x2c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1f5      	bne.n	8008550 <__sinit+0xc>
 8008564:	f7ff ffc4 	bl	80084f0 <global_stdio_init.part.0>
 8008568:	e7f2      	b.n	8008550 <__sinit+0xc>
 800856a:	bf00      	nop
 800856c:	080084b1 	.word	0x080084b1
 8008570:	20004ffc 	.word	0x20004ffc

08008574 <_fwalk_sglue>:
 8008574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008578:	4607      	mov	r7, r0
 800857a:	4688      	mov	r8, r1
 800857c:	4614      	mov	r4, r2
 800857e:	2600      	movs	r6, #0
 8008580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008584:	f1b9 0901 	subs.w	r9, r9, #1
 8008588:	d505      	bpl.n	8008596 <_fwalk_sglue+0x22>
 800858a:	6824      	ldr	r4, [r4, #0]
 800858c:	2c00      	cmp	r4, #0
 800858e:	d1f7      	bne.n	8008580 <_fwalk_sglue+0xc>
 8008590:	4630      	mov	r0, r6
 8008592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d907      	bls.n	80085ac <_fwalk_sglue+0x38>
 800859c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a0:	3301      	adds	r3, #1
 80085a2:	d003      	beq.n	80085ac <_fwalk_sglue+0x38>
 80085a4:	4629      	mov	r1, r5
 80085a6:	4638      	mov	r0, r7
 80085a8:	47c0      	blx	r8
 80085aa:	4306      	orrs	r6, r0
 80085ac:	3568      	adds	r5, #104	@ 0x68
 80085ae:	e7e9      	b.n	8008584 <_fwalk_sglue+0x10>

080085b0 <__sread>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b8:	f000 f868 	bl	800868c <_read_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	bfab      	itete	ge
 80085c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085c2:	89a3      	ldrhlt	r3, [r4, #12]
 80085c4:	181b      	addge	r3, r3, r0
 80085c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ca:	bfac      	ite	ge
 80085cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085ce:	81a3      	strhlt	r3, [r4, #12]
 80085d0:	bd10      	pop	{r4, pc}

080085d2 <__swrite>:
 80085d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d6:	461f      	mov	r7, r3
 80085d8:	898b      	ldrh	r3, [r1, #12]
 80085da:	05db      	lsls	r3, r3, #23
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4616      	mov	r6, r2
 80085e2:	d505      	bpl.n	80085f0 <__swrite+0x1e>
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	2302      	movs	r3, #2
 80085ea:	2200      	movs	r2, #0
 80085ec:	f000 f83c 	bl	8008668 <_lseek_r>
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	4632      	mov	r2, r6
 80085fe:	463b      	mov	r3, r7
 8008600:	4628      	mov	r0, r5
 8008602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008606:	f000 b863 	b.w	80086d0 <_write_r>

0800860a <__sseek>:
 800860a:	b510      	push	{r4, lr}
 800860c:	460c      	mov	r4, r1
 800860e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008612:	f000 f829 	bl	8008668 <_lseek_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	bf15      	itete	ne
 800861c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800861e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008626:	81a3      	strheq	r3, [r4, #12]
 8008628:	bf18      	it	ne
 800862a:	81a3      	strhne	r3, [r4, #12]
 800862c:	bd10      	pop	{r4, pc}

0800862e <__sclose>:
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 b809 	b.w	8008648 <_close_r>

08008636 <memset>:
 8008636:	4402      	add	r2, r0
 8008638:	4603      	mov	r3, r0
 800863a:	4293      	cmp	r3, r2
 800863c:	d100      	bne.n	8008640 <memset+0xa>
 800863e:	4770      	bx	lr
 8008640:	f803 1b01 	strb.w	r1, [r3], #1
 8008644:	e7f9      	b.n	800863a <memset+0x4>
	...

08008648 <_close_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d06      	ldr	r5, [pc, #24]	@ (8008664 <_close_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f8 fe24 	bl	80012a0 <_close>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_close_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_close_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	20005000 	.word	0x20005000

08008668 <_lseek_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	@ (8008688 <_lseek_r+0x20>)
 800866c:	4604      	mov	r4, r0
 800866e:	4608      	mov	r0, r1
 8008670:	4611      	mov	r1, r2
 8008672:	2200      	movs	r2, #0
 8008674:	602a      	str	r2, [r5, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f7f8 fe39 	bl	80012ee <_lseek>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_lseek_r+0x1e>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_lseek_r+0x1e>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	20005000 	.word	0x20005000

0800868c <_read_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	@ (80086ac <_read_r+0x20>)
 8008690:	4604      	mov	r4, r0
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	2200      	movs	r2, #0
 8008698:	602a      	str	r2, [r5, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	f7f8 fdc7 	bl	800122e <_read>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_read_r+0x1e>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_read_r+0x1e>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20005000 	.word	0x20005000

080086b0 <_sbrk_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	@ (80086cc <_sbrk_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7f8 fe24 	bl	8001308 <_sbrk>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_sbrk_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_sbrk_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20005000 	.word	0x20005000

080086d0 <_write_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_write_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f8 fdc2 	bl	8001268 <_write>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_write_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_write_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20005000 	.word	0x20005000

080086f4 <__errno>:
 80086f4:	4b01      	ldr	r3, [pc, #4]	@ (80086fc <__errno+0x8>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	2000001c 	.word	0x2000001c

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	4d0d      	ldr	r5, [pc, #52]	@ (8008738 <__libc_init_array+0x38>)
 8008704:	4c0d      	ldr	r4, [pc, #52]	@ (800873c <__libc_init_array+0x3c>)
 8008706:	1b64      	subs	r4, r4, r5
 8008708:	10a4      	asrs	r4, r4, #2
 800870a:	2600      	movs	r6, #0
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	4d0b      	ldr	r5, [pc, #44]	@ (8008740 <__libc_init_array+0x40>)
 8008712:	4c0c      	ldr	r4, [pc, #48]	@ (8008744 <__libc_init_array+0x44>)
 8008714:	f000 fd82 	bl	800921c <_init>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	2600      	movs	r6, #0
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	08009380 	.word	0x08009380
 800873c:	08009380 	.word	0x08009380
 8008740:	08009380 	.word	0x08009380
 8008744:	08009384 	.word	0x08009384

08008748 <__retarget_lock_init_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_acquire_recursive>:
 800874a:	4770      	bx	lr

0800874c <__retarget_lock_release_recursive>:
 800874c:	4770      	bx	lr

0800874e <memcpy>:
 800874e:	440a      	add	r2, r1
 8008750:	4291      	cmp	r1, r2
 8008752:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008756:	d100      	bne.n	800875a <memcpy+0xc>
 8008758:	4770      	bx	lr
 800875a:	b510      	push	{r4, lr}
 800875c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008764:	4291      	cmp	r1, r2
 8008766:	d1f9      	bne.n	800875c <memcpy+0xe>
 8008768:	bd10      	pop	{r4, pc}
	...

0800876c <__assert_func>:
 800876c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800876e:	4614      	mov	r4, r2
 8008770:	461a      	mov	r2, r3
 8008772:	4b09      	ldr	r3, [pc, #36]	@ (8008798 <__assert_func+0x2c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4605      	mov	r5, r0
 8008778:	68d8      	ldr	r0, [r3, #12]
 800877a:	b954      	cbnz	r4, 8008792 <__assert_func+0x26>
 800877c:	4b07      	ldr	r3, [pc, #28]	@ (800879c <__assert_func+0x30>)
 800877e:	461c      	mov	r4, r3
 8008780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008784:	9100      	str	r1, [sp, #0]
 8008786:	462b      	mov	r3, r5
 8008788:	4905      	ldr	r1, [pc, #20]	@ (80087a0 <__assert_func+0x34>)
 800878a:	f000 f903 	bl	8008994 <fiprintf>
 800878e:	f000 f913 	bl	80089b8 <abort>
 8008792:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <__assert_func+0x38>)
 8008794:	e7f4      	b.n	8008780 <__assert_func+0x14>
 8008796:	bf00      	nop
 8008798:	2000001c 	.word	0x2000001c
 800879c:	08009342 	.word	0x08009342
 80087a0:	08009314 	.word	0x08009314
 80087a4:	08009307 	.word	0x08009307

080087a8 <_free_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4605      	mov	r5, r0
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d041      	beq.n	8008834 <_free_r+0x8c>
 80087b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b4:	1f0c      	subs	r4, r1, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	18e4      	addlt	r4, r4, r3
 80087bc:	f7ff fdbe 	bl	800833c <__malloc_lock>
 80087c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008838 <_free_r+0x90>)
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	b933      	cbnz	r3, 80087d4 <_free_r+0x2c>
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	6014      	str	r4, [r2, #0]
 80087ca:	4628      	mov	r0, r5
 80087cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d0:	f7ff bdba 	b.w	8008348 <__malloc_unlock>
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d908      	bls.n	80087ea <_free_r+0x42>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	1821      	adds	r1, r4, r0
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf01      	itttt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	1809      	addeq	r1, r1, r0
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	e7ed      	b.n	80087c6 <_free_r+0x1e>
 80087ea:	461a      	mov	r2, r3
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b10b      	cbz	r3, 80087f4 <_free_r+0x4c>
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d9fa      	bls.n	80087ea <_free_r+0x42>
 80087f4:	6811      	ldr	r1, [r2, #0]
 80087f6:	1850      	adds	r0, r2, r1
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d10b      	bne.n	8008814 <_free_r+0x6c>
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	4401      	add	r1, r0
 8008800:	1850      	adds	r0, r2, r1
 8008802:	4283      	cmp	r3, r0
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	d1e0      	bne.n	80087ca <_free_r+0x22>
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	6053      	str	r3, [r2, #4]
 800880e:	4408      	add	r0, r1
 8008810:	6010      	str	r0, [r2, #0]
 8008812:	e7da      	b.n	80087ca <_free_r+0x22>
 8008814:	d902      	bls.n	800881c <_free_r+0x74>
 8008816:	230c      	movs	r3, #12
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	e7d6      	b.n	80087ca <_free_r+0x22>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	1821      	adds	r1, r4, r0
 8008820:	428b      	cmp	r3, r1
 8008822:	bf04      	itt	eq
 8008824:	6819      	ldreq	r1, [r3, #0]
 8008826:	685b      	ldreq	r3, [r3, #4]
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	bf04      	itt	eq
 800882c:	1809      	addeq	r1, r1, r0
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	6054      	str	r4, [r2, #4]
 8008832:	e7ca      	b.n	80087ca <_free_r+0x22>
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20004ec0 	.word	0x20004ec0

0800883c <__sflush_r>:
 800883c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	0716      	lsls	r6, r2, #28
 8008846:	4605      	mov	r5, r0
 8008848:	460c      	mov	r4, r1
 800884a:	d454      	bmi.n	80088f6 <__sflush_r+0xba>
 800884c:	684b      	ldr	r3, [r1, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dc02      	bgt.n	8008858 <__sflush_r+0x1c>
 8008852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd48      	ble.n	80088ea <__sflush_r+0xae>
 8008858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800885a:	2e00      	cmp	r6, #0
 800885c:	d045      	beq.n	80088ea <__sflush_r+0xae>
 800885e:	2300      	movs	r3, #0
 8008860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008864:	682f      	ldr	r7, [r5, #0]
 8008866:	6a21      	ldr	r1, [r4, #32]
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	d030      	beq.n	80088ce <__sflush_r+0x92>
 800886c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	0759      	lsls	r1, r3, #29
 8008872:	d505      	bpl.n	8008880 <__sflush_r+0x44>
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	1ad2      	subs	r2, r2, r3
 8008878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800887a:	b10b      	cbz	r3, 8008880 <__sflush_r+0x44>
 800887c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	2300      	movs	r3, #0
 8008882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008884:	6a21      	ldr	r1, [r4, #32]
 8008886:	4628      	mov	r0, r5
 8008888:	47b0      	blx	r6
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	d106      	bne.n	800889e <__sflush_r+0x62>
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	291d      	cmp	r1, #29
 8008894:	d82b      	bhi.n	80088ee <__sflush_r+0xb2>
 8008896:	4a2a      	ldr	r2, [pc, #168]	@ (8008940 <__sflush_r+0x104>)
 8008898:	410a      	asrs	r2, r1
 800889a:	07d6      	lsls	r6, r2, #31
 800889c:	d427      	bmi.n	80088ee <__sflush_r+0xb2>
 800889e:	2200      	movs	r2, #0
 80088a0:	6062      	str	r2, [r4, #4]
 80088a2:	04d9      	lsls	r1, r3, #19
 80088a4:	6922      	ldr	r2, [r4, #16]
 80088a6:	6022      	str	r2, [r4, #0]
 80088a8:	d504      	bpl.n	80088b4 <__sflush_r+0x78>
 80088aa:	1c42      	adds	r2, r0, #1
 80088ac:	d101      	bne.n	80088b2 <__sflush_r+0x76>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b903      	cbnz	r3, 80088b4 <__sflush_r+0x78>
 80088b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80088b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088b6:	602f      	str	r7, [r5, #0]
 80088b8:	b1b9      	cbz	r1, 80088ea <__sflush_r+0xae>
 80088ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088be:	4299      	cmp	r1, r3
 80088c0:	d002      	beq.n	80088c8 <__sflush_r+0x8c>
 80088c2:	4628      	mov	r0, r5
 80088c4:	f7ff ff70 	bl	80087a8 <_free_r>
 80088c8:	2300      	movs	r3, #0
 80088ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80088cc:	e00d      	b.n	80088ea <__sflush_r+0xae>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b0      	blx	r6
 80088d4:	4602      	mov	r2, r0
 80088d6:	1c50      	adds	r0, r2, #1
 80088d8:	d1c9      	bne.n	800886e <__sflush_r+0x32>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0c6      	beq.n	800886e <__sflush_r+0x32>
 80088e0:	2b1d      	cmp	r3, #29
 80088e2:	d001      	beq.n	80088e8 <__sflush_r+0xac>
 80088e4:	2b16      	cmp	r3, #22
 80088e6:	d11e      	bne.n	8008926 <__sflush_r+0xea>
 80088e8:	602f      	str	r7, [r5, #0]
 80088ea:	2000      	movs	r0, #0
 80088ec:	e022      	b.n	8008934 <__sflush_r+0xf8>
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	b21b      	sxth	r3, r3
 80088f4:	e01b      	b.n	800892e <__sflush_r+0xf2>
 80088f6:	690f      	ldr	r7, [r1, #16]
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	d0f6      	beq.n	80088ea <__sflush_r+0xae>
 80088fc:	0793      	lsls	r3, r2, #30
 80088fe:	680e      	ldr	r6, [r1, #0]
 8008900:	bf08      	it	eq
 8008902:	694b      	ldreq	r3, [r1, #20]
 8008904:	600f      	str	r7, [r1, #0]
 8008906:	bf18      	it	ne
 8008908:	2300      	movne	r3, #0
 800890a:	eba6 0807 	sub.w	r8, r6, r7
 800890e:	608b      	str	r3, [r1, #8]
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	dde9      	ble.n	80088ea <__sflush_r+0xae>
 8008916:	6a21      	ldr	r1, [r4, #32]
 8008918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800891a:	4643      	mov	r3, r8
 800891c:	463a      	mov	r2, r7
 800891e:	4628      	mov	r0, r5
 8008920:	47b0      	blx	r6
 8008922:	2800      	cmp	r0, #0
 8008924:	dc08      	bgt.n	8008938 <__sflush_r+0xfc>
 8008926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	4407      	add	r7, r0
 800893a:	eba8 0800 	sub.w	r8, r8, r0
 800893e:	e7e7      	b.n	8008910 <__sflush_r+0xd4>
 8008940:	dfbffffe 	.word	0xdfbffffe

08008944 <_fflush_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	690b      	ldr	r3, [r1, #16]
 8008948:	4605      	mov	r5, r0
 800894a:	460c      	mov	r4, r1
 800894c:	b913      	cbnz	r3, 8008954 <_fflush_r+0x10>
 800894e:	2500      	movs	r5, #0
 8008950:	4628      	mov	r0, r5
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	b118      	cbz	r0, 800895e <_fflush_r+0x1a>
 8008956:	6a03      	ldr	r3, [r0, #32]
 8008958:	b90b      	cbnz	r3, 800895e <_fflush_r+0x1a>
 800895a:	f7ff fdf3 	bl	8008544 <__sinit>
 800895e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0f3      	beq.n	800894e <_fflush_r+0xa>
 8008966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008968:	07d0      	lsls	r0, r2, #31
 800896a:	d404      	bmi.n	8008976 <_fflush_r+0x32>
 800896c:	0599      	lsls	r1, r3, #22
 800896e:	d402      	bmi.n	8008976 <_fflush_r+0x32>
 8008970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008972:	f7ff feea 	bl	800874a <__retarget_lock_acquire_recursive>
 8008976:	4628      	mov	r0, r5
 8008978:	4621      	mov	r1, r4
 800897a:	f7ff ff5f 	bl	800883c <__sflush_r>
 800897e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008980:	07da      	lsls	r2, r3, #31
 8008982:	4605      	mov	r5, r0
 8008984:	d4e4      	bmi.n	8008950 <_fflush_r+0xc>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	059b      	lsls	r3, r3, #22
 800898a:	d4e1      	bmi.n	8008950 <_fflush_r+0xc>
 800898c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800898e:	f7ff fedd 	bl	800874c <__retarget_lock_release_recursive>
 8008992:	e7dd      	b.n	8008950 <_fflush_r+0xc>

08008994 <fiprintf>:
 8008994:	b40e      	push	{r1, r2, r3}
 8008996:	b503      	push	{r0, r1, lr}
 8008998:	4601      	mov	r1, r0
 800899a:	ab03      	add	r3, sp, #12
 800899c:	4805      	ldr	r0, [pc, #20]	@ (80089b4 <fiprintf+0x20>)
 800899e:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	f000 f837 	bl	8008a18 <_vfiprintf_r>
 80089aa:	b002      	add	sp, #8
 80089ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b0:	b003      	add	sp, #12
 80089b2:	4770      	bx	lr
 80089b4:	2000001c 	.word	0x2000001c

080089b8 <abort>:
 80089b8:	b508      	push	{r3, lr}
 80089ba:	2006      	movs	r0, #6
 80089bc:	f000 fb8e 	bl	80090dc <raise>
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7f8 fc29 	bl	8001218 <_exit>

080089c6 <__sfputc_r>:
 80089c6:	6893      	ldr	r3, [r2, #8]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	b410      	push	{r4}
 80089ce:	6093      	str	r3, [r2, #8]
 80089d0:	da08      	bge.n	80089e4 <__sfputc_r+0x1e>
 80089d2:	6994      	ldr	r4, [r2, #24]
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	db01      	blt.n	80089dc <__sfputc_r+0x16>
 80089d8:	290a      	cmp	r1, #10
 80089da:	d103      	bne.n	80089e4 <__sfputc_r+0x1e>
 80089dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e0:	f000 bac0 	b.w	8008f64 <__swbuf_r>
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	1c58      	adds	r0, r3, #1
 80089e8:	6010      	str	r0, [r2, #0]
 80089ea:	7019      	strb	r1, [r3, #0]
 80089ec:	4608      	mov	r0, r1
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <__sfputs_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4606      	mov	r6, r0
 80089f8:	460f      	mov	r7, r1
 80089fa:	4614      	mov	r4, r2
 80089fc:	18d5      	adds	r5, r2, r3
 80089fe:	42ac      	cmp	r4, r5
 8008a00:	d101      	bne.n	8008a06 <__sfputs_r+0x12>
 8008a02:	2000      	movs	r0, #0
 8008a04:	e007      	b.n	8008a16 <__sfputs_r+0x22>
 8008a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ffda 	bl	80089c6 <__sfputc_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d1f3      	bne.n	80089fe <__sfputs_r+0xa>
 8008a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a18 <_vfiprintf_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	b09d      	sub	sp, #116	@ 0x74
 8008a20:	4614      	mov	r4, r2
 8008a22:	4698      	mov	r8, r3
 8008a24:	4606      	mov	r6, r0
 8008a26:	b118      	cbz	r0, 8008a30 <_vfiprintf_r+0x18>
 8008a28:	6a03      	ldr	r3, [r0, #32]
 8008a2a:	b90b      	cbnz	r3, 8008a30 <_vfiprintf_r+0x18>
 8008a2c:	f7ff fd8a 	bl	8008544 <__sinit>
 8008a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a32:	07d9      	lsls	r1, r3, #31
 8008a34:	d405      	bmi.n	8008a42 <_vfiprintf_r+0x2a>
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	059a      	lsls	r2, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_vfiprintf_r+0x2a>
 8008a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a3e:	f7ff fe84 	bl	800874a <__retarget_lock_acquire_recursive>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	071b      	lsls	r3, r3, #28
 8008a46:	d501      	bpl.n	8008a4c <_vfiprintf_r+0x34>
 8008a48:	692b      	ldr	r3, [r5, #16]
 8008a4a:	b99b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x5c>
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 fac6 	bl	8008fe0 <__swsetup_r>
 8008a54:	b170      	cbz	r0, 8008a74 <_vfiprintf_r+0x5c>
 8008a56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a58:	07dc      	lsls	r4, r3, #31
 8008a5a:	d504      	bpl.n	8008a66 <_vfiprintf_r+0x4e>
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a60:	b01d      	add	sp, #116	@ 0x74
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	0598      	lsls	r0, r3, #22
 8008a6a:	d4f7      	bmi.n	8008a5c <_vfiprintf_r+0x44>
 8008a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a6e:	f7ff fe6d 	bl	800874c <__retarget_lock_release_recursive>
 8008a72:	e7f3      	b.n	8008a5c <_vfiprintf_r+0x44>
 8008a74:	2300      	movs	r3, #0
 8008a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a82:	2330      	movs	r3, #48	@ 0x30
 8008a84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c34 <_vfiprintf_r+0x21c>
 8008a88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a8c:	f04f 0901 	mov.w	r9, #1
 8008a90:	4623      	mov	r3, r4
 8008a92:	469a      	mov	sl, r3
 8008a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a98:	b10a      	cbz	r2, 8008a9e <_vfiprintf_r+0x86>
 8008a9a:	2a25      	cmp	r2, #37	@ 0x25
 8008a9c:	d1f9      	bne.n	8008a92 <_vfiprintf_r+0x7a>
 8008a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa2:	d00b      	beq.n	8008abc <_vfiprintf_r+0xa4>
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ffa2 	bl	80089f4 <__sfputs_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f000 80a7 	beq.w	8008c04 <_vfiprintf_r+0x1ec>
 8008ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ab8:	445a      	add	r2, fp
 8008aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008abc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 809f 	beq.w	8008c04 <_vfiprintf_r+0x1ec>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad0:	f10a 0a01 	add.w	sl, sl, #1
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ade:	4654      	mov	r4, sl
 8008ae0:	2205      	movs	r2, #5
 8008ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae6:	4853      	ldr	r0, [pc, #332]	@ (8008c34 <_vfiprintf_r+0x21c>)
 8008ae8:	f7f7 fb72 	bl	80001d0 <memchr>
 8008aec:	9a04      	ldr	r2, [sp, #16]
 8008aee:	b9d8      	cbnz	r0, 8008b28 <_vfiprintf_r+0x110>
 8008af0:	06d1      	lsls	r1, r2, #27
 8008af2:	bf44      	itt	mi
 8008af4:	2320      	movmi	r3, #32
 8008af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008afa:	0713      	lsls	r3, r2, #28
 8008afc:	bf44      	itt	mi
 8008afe:	232b      	movmi	r3, #43	@ 0x2b
 8008b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b04:	f89a 3000 	ldrb.w	r3, [sl]
 8008b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b0a:	d015      	beq.n	8008b38 <_vfiprintf_r+0x120>
 8008b0c:	9a07      	ldr	r2, [sp, #28]
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2000      	movs	r0, #0
 8008b12:	f04f 0c0a 	mov.w	ip, #10
 8008b16:	4621      	mov	r1, r4
 8008b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b1c:	3b30      	subs	r3, #48	@ 0x30
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d94b      	bls.n	8008bba <_vfiprintf_r+0x1a2>
 8008b22:	b1b0      	cbz	r0, 8008b52 <_vfiprintf_r+0x13a>
 8008b24:	9207      	str	r2, [sp, #28]
 8008b26:	e014      	b.n	8008b52 <_vfiprintf_r+0x13a>
 8008b28:	eba0 0308 	sub.w	r3, r0, r8
 8008b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b30:	4313      	orrs	r3, r2
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	46a2      	mov	sl, r4
 8008b36:	e7d2      	b.n	8008ade <_vfiprintf_r+0xc6>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	1d19      	adds	r1, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	9103      	str	r1, [sp, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfbb      	ittet	lt
 8008b44:	425b      	neglt	r3, r3
 8008b46:	f042 0202 	orrlt.w	r2, r2, #2
 8008b4a:	9307      	strge	r3, [sp, #28]
 8008b4c:	9307      	strlt	r3, [sp, #28]
 8008b4e:	bfb8      	it	lt
 8008b50:	9204      	strlt	r2, [sp, #16]
 8008b52:	7823      	ldrb	r3, [r4, #0]
 8008b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b56:	d10a      	bne.n	8008b6e <_vfiprintf_r+0x156>
 8008b58:	7863      	ldrb	r3, [r4, #1]
 8008b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b5c:	d132      	bne.n	8008bc4 <_vfiprintf_r+0x1ac>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9203      	str	r2, [sp, #12]
 8008b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b6a:	3402      	adds	r4, #2
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c44 <_vfiprintf_r+0x22c>
 8008b72:	7821      	ldrb	r1, [r4, #0]
 8008b74:	2203      	movs	r2, #3
 8008b76:	4650      	mov	r0, sl
 8008b78:	f7f7 fb2a 	bl	80001d0 <memchr>
 8008b7c:	b138      	cbz	r0, 8008b8e <_vfiprintf_r+0x176>
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	eba0 000a 	sub.w	r0, r0, sl
 8008b84:	2240      	movs	r2, #64	@ 0x40
 8008b86:	4082      	lsls	r2, r0
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4829      	ldr	r0, [pc, #164]	@ (8008c38 <_vfiprintf_r+0x220>)
 8008b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b98:	2206      	movs	r2, #6
 8008b9a:	f7f7 fb19 	bl	80001d0 <memchr>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d03f      	beq.n	8008c22 <_vfiprintf_r+0x20a>
 8008ba2:	4b26      	ldr	r3, [pc, #152]	@ (8008c3c <_vfiprintf_r+0x224>)
 8008ba4:	bb1b      	cbnz	r3, 8008bee <_vfiprintf_r+0x1d6>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	3307      	adds	r3, #7
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	3308      	adds	r3, #8
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb4:	443b      	add	r3, r7
 8008bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb8:	e76a      	b.n	8008a90 <_vfiprintf_r+0x78>
 8008bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e7a8      	b.n	8008b16 <_vfiprintf_r+0xfe>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	3401      	adds	r4, #1
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f04f 0c0a 	mov.w	ip, #10
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd6:	3a30      	subs	r2, #48	@ 0x30
 8008bd8:	2a09      	cmp	r2, #9
 8008bda:	d903      	bls.n	8008be4 <_vfiprintf_r+0x1cc>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0c6      	beq.n	8008b6e <_vfiprintf_r+0x156>
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	e7c4      	b.n	8008b6e <_vfiprintf_r+0x156>
 8008be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be8:	4604      	mov	r4, r0
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7f0      	b.n	8008bd0 <_vfiprintf_r+0x1b8>
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <_vfiprintf_r+0x228>)
 8008bf6:	a904      	add	r1, sp, #16
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f3af 8000 	nop.w
 8008bfe:	4607      	mov	r7, r0
 8008c00:	1c78      	adds	r0, r7, #1
 8008c02:	d1d6      	bne.n	8008bb2 <_vfiprintf_r+0x19a>
 8008c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c06:	07d9      	lsls	r1, r3, #31
 8008c08:	d405      	bmi.n	8008c16 <_vfiprintf_r+0x1fe>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	059a      	lsls	r2, r3, #22
 8008c0e:	d402      	bmi.n	8008c16 <_vfiprintf_r+0x1fe>
 8008c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c12:	f7ff fd9b 	bl	800874c <__retarget_lock_release_recursive>
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	065b      	lsls	r3, r3, #25
 8008c1a:	f53f af1f 	bmi.w	8008a5c <_vfiprintf_r+0x44>
 8008c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c20:	e71e      	b.n	8008a60 <_vfiprintf_r+0x48>
 8008c22:	ab03      	add	r3, sp, #12
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	462a      	mov	r2, r5
 8008c28:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <_vfiprintf_r+0x228>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f879 	bl	8008d24 <_printf_i>
 8008c32:	e7e4      	b.n	8008bfe <_vfiprintf_r+0x1e6>
 8008c34:	08009343 	.word	0x08009343
 8008c38:	0800934d 	.word	0x0800934d
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	080089f5 	.word	0x080089f5
 8008c44:	08009349 	.word	0x08009349

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4698      	mov	r8, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc26      	bgt.n	8008cde <_printf_common+0x96>
 8008c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c94:	6822      	ldr	r2, [r4, #0]
 8008c96:	3b00      	subs	r3, #0
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42b      	bmi.n	8008cf8 <_printf_common+0xb0>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c8      	blx	r9
 8008caa:	3001      	adds	r0, #1
 8008cac:	d01e      	beq.n	8008cec <_printf_common+0xa4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	f003 0306 	and.w	r3, r3, #6
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	bf02      	ittt	eq
 8008cba:	68e5      	ldreq	r5, [r4, #12]
 8008cbc:	6833      	ldreq	r3, [r6, #0]
 8008cbe:	1aed      	subeq	r5, r5, r3
 8008cc0:	68a3      	ldr	r3, [r4, #8]
 8008cc2:	bf0c      	ite	eq
 8008cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc8:	2500      	movne	r5, #0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bfc4      	itt	gt
 8008cce:	1a9b      	subgt	r3, r3, r2
 8008cd0:	18ed      	addgt	r5, r5, r3
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xc8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xa8>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c8      	blx	r9
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xac>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c6      	b.n	8008c86 <_printf_common+0x3e>
 8008cf8:	18e1      	adds	r1, r4, r3
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	2030      	movs	r0, #48	@ 0x30
 8008cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d02:	4422      	add	r2, r4
 8008d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7c7      	b.n	8008ca0 <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4641      	mov	r1, r8
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c8      	blx	r9
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa4>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x8e>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	7e0f      	ldrb	r7, [r1, #24]
 8008d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d2c:	2f78      	cmp	r7, #120	@ 0x78
 8008d2e:	4691      	mov	r9, r2
 8008d30:	4680      	mov	r8, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	469a      	mov	sl, r3
 8008d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	@ 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d2 	beq.w	8008eea <_printf_i+0x1c6>
 8008d46:	2f58      	cmp	r7, #88	@ 0x58
 8008d48:	f000 80b9 	beq.w	8008ebe <_printf_i+0x19a>
 8008d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d64 <_printf_i+0x40>)
 8008d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008ed1 	.word	0x08008ed1
 8008d94:	08008dfb 	.word	0x08008dfb
 8008d98:	08008e8b 	.word	0x08008e8b
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008ef3 	.word	0x08008ef3
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008dfb 	.word	0x08008dfb
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008e93 	.word	0x08008e93
 8008dbc:	6833      	ldr	r3, [r6, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6032      	str	r2, [r6, #0]
 8008dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e09d      	b.n	8008f0c <_printf_i+0x1e8>
 8008dd0:	6833      	ldr	r3, [r6, #0]
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	1d19      	adds	r1, r3, #4
 8008dd6:	6031      	str	r1, [r6, #0]
 8008dd8:	0606      	lsls	r6, r0, #24
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0xbc>
 8008ddc:	681d      	ldr	r5, [r3, #0]
 8008dde:	e003      	b.n	8008de8 <_printf_i+0xc4>
 8008de0:	0645      	lsls	r5, r0, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0xb8>
 8008de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	da03      	bge.n	8008df4 <_printf_i+0xd0>
 8008dec:	232d      	movs	r3, #45	@ 0x2d
 8008dee:	426d      	negs	r5, r5
 8008df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008df4:	4859      	ldr	r0, [pc, #356]	@ (8008f5c <_printf_i+0x238>)
 8008df6:	230a      	movs	r3, #10
 8008df8:	e011      	b.n	8008e1e <_printf_i+0xfa>
 8008dfa:	6821      	ldr	r1, [r4, #0]
 8008dfc:	6833      	ldr	r3, [r6, #0]
 8008dfe:	0608      	lsls	r0, r1, #24
 8008e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e04:	d402      	bmi.n	8008e0c <_printf_i+0xe8>
 8008e06:	0649      	lsls	r1, r1, #25
 8008e08:	bf48      	it	mi
 8008e0a:	b2ad      	uxthmi	r5, r5
 8008e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e0e:	4853      	ldr	r0, [pc, #332]	@ (8008f5c <_printf_i+0x238>)
 8008e10:	6033      	str	r3, [r6, #0]
 8008e12:	bf14      	ite	ne
 8008e14:	230a      	movne	r3, #10
 8008e16:	2308      	moveq	r3, #8
 8008e18:	2100      	movs	r1, #0
 8008e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e1e:	6866      	ldr	r6, [r4, #4]
 8008e20:	60a6      	str	r6, [r4, #8]
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	bfa2      	ittt	ge
 8008e26:	6821      	ldrge	r1, [r4, #0]
 8008e28:	f021 0104 	bicge.w	r1, r1, #4
 8008e2c:	6021      	strge	r1, [r4, #0]
 8008e2e:	b90d      	cbnz	r5, 8008e34 <_printf_i+0x110>
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	d04b      	beq.n	8008ecc <_printf_i+0x1a8>
 8008e34:	4616      	mov	r6, r2
 8008e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e3e:	5dc7      	ldrb	r7, [r0, r7]
 8008e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e44:	462f      	mov	r7, r5
 8008e46:	42bb      	cmp	r3, r7
 8008e48:	460d      	mov	r5, r1
 8008e4a:	d9f4      	bls.n	8008e36 <_printf_i+0x112>
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d10b      	bne.n	8008e68 <_printf_i+0x144>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	07df      	lsls	r7, r3, #31
 8008e54:	d508      	bpl.n	8008e68 <_printf_i+0x144>
 8008e56:	6923      	ldr	r3, [r4, #16]
 8008e58:	6861      	ldr	r1, [r4, #4]
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	bfde      	ittt	le
 8008e5e:	2330      	movle	r3, #48	@ 0x30
 8008e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e68:	1b92      	subs	r2, r2, r6
 8008e6a:	6122      	str	r2, [r4, #16]
 8008e6c:	f8cd a000 	str.w	sl, [sp]
 8008e70:	464b      	mov	r3, r9
 8008e72:	aa03      	add	r2, sp, #12
 8008e74:	4621      	mov	r1, r4
 8008e76:	4640      	mov	r0, r8
 8008e78:	f7ff fee6 	bl	8008c48 <_printf_common>
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d14a      	bne.n	8008f16 <_printf_i+0x1f2>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e84:	b004      	add	sp, #16
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f043 0320 	orr.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	4833      	ldr	r0, [pc, #204]	@ (8008f60 <_printf_i+0x23c>)
 8008e94:	2778      	movs	r7, #120	@ 0x78
 8008e96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6831      	ldr	r1, [r6, #0]
 8008e9e:	061f      	lsls	r7, r3, #24
 8008ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ea4:	d402      	bmi.n	8008eac <_printf_i+0x188>
 8008ea6:	065f      	lsls	r7, r3, #25
 8008ea8:	bf48      	it	mi
 8008eaa:	b2ad      	uxthmi	r5, r5
 8008eac:	6031      	str	r1, [r6, #0]
 8008eae:	07d9      	lsls	r1, r3, #31
 8008eb0:	bf44      	itt	mi
 8008eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb6:	6023      	strmi	r3, [r4, #0]
 8008eb8:	b11d      	cbz	r5, 8008ec2 <_printf_i+0x19e>
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e7ac      	b.n	8008e18 <_printf_i+0xf4>
 8008ebe:	4827      	ldr	r0, [pc, #156]	@ (8008f5c <_printf_i+0x238>)
 8008ec0:	e7e9      	b.n	8008e96 <_printf_i+0x172>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	f023 0320 	bic.w	r3, r3, #32
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	e7f6      	b.n	8008eba <_printf_i+0x196>
 8008ecc:	4616      	mov	r6, r2
 8008ece:	e7bd      	b.n	8008e4c <_printf_i+0x128>
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	6825      	ldr	r5, [r4, #0]
 8008ed4:	6961      	ldr	r1, [r4, #20]
 8008ed6:	1d18      	adds	r0, r3, #4
 8008ed8:	6030      	str	r0, [r6, #0]
 8008eda:	062e      	lsls	r6, r5, #24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	d501      	bpl.n	8008ee4 <_printf_i+0x1c0>
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <_printf_i+0x1c6>
 8008ee4:	0668      	lsls	r0, r5, #25
 8008ee6:	d5fb      	bpl.n	8008ee0 <_printf_i+0x1bc>
 8008ee8:	8019      	strh	r1, [r3, #0]
 8008eea:	2300      	movs	r3, #0
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	4616      	mov	r6, r2
 8008ef0:	e7bc      	b.n	8008e6c <_printf_i+0x148>
 8008ef2:	6833      	ldr	r3, [r6, #0]
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	6032      	str	r2, [r6, #0]
 8008ef8:	681e      	ldr	r6, [r3, #0]
 8008efa:	6862      	ldr	r2, [r4, #4]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7f7 f966 	bl	80001d0 <memchr>
 8008f04:	b108      	cbz	r0, 8008f0a <_printf_i+0x1e6>
 8008f06:	1b80      	subs	r0, r0, r6
 8008f08:	6060      	str	r0, [r4, #4]
 8008f0a:	6863      	ldr	r3, [r4, #4]
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f14:	e7aa      	b.n	8008e6c <_printf_i+0x148>
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d0ad      	beq.n	8008e80 <_printf_i+0x15c>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	079b      	lsls	r3, r3, #30
 8008f28:	d413      	bmi.n	8008f52 <_printf_i+0x22e>
 8008f2a:	68e0      	ldr	r0, [r4, #12]
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	4298      	cmp	r0, r3
 8008f30:	bfb8      	it	lt
 8008f32:	4618      	movlt	r0, r3
 8008f34:	e7a6      	b.n	8008e84 <_printf_i+0x160>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4632      	mov	r2, r6
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	47d0      	blx	sl
 8008f40:	3001      	adds	r0, #1
 8008f42:	d09d      	beq.n	8008e80 <_printf_i+0x15c>
 8008f44:	3501      	adds	r5, #1
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	9903      	ldr	r1, [sp, #12]
 8008f4a:	1a5b      	subs	r3, r3, r1
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dcf2      	bgt.n	8008f36 <_printf_i+0x212>
 8008f50:	e7eb      	b.n	8008f2a <_printf_i+0x206>
 8008f52:	2500      	movs	r5, #0
 8008f54:	f104 0619 	add.w	r6, r4, #25
 8008f58:	e7f5      	b.n	8008f46 <_printf_i+0x222>
 8008f5a:	bf00      	nop
 8008f5c:	08009354 	.word	0x08009354
 8008f60:	08009365 	.word	0x08009365

08008f64 <__swbuf_r>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b118      	cbz	r0, 8008f76 <__swbuf_r+0x12>
 8008f6e:	6a03      	ldr	r3, [r0, #32]
 8008f70:	b90b      	cbnz	r3, 8008f76 <__swbuf_r+0x12>
 8008f72:	f7ff fae7 	bl	8008544 <__sinit>
 8008f76:	69a3      	ldr	r3, [r4, #24]
 8008f78:	60a3      	str	r3, [r4, #8]
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	071a      	lsls	r2, r3, #28
 8008f7e:	d501      	bpl.n	8008f84 <__swbuf_r+0x20>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	b943      	cbnz	r3, 8008f96 <__swbuf_r+0x32>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f82a 	bl	8008fe0 <__swsetup_r>
 8008f8c:	b118      	cbz	r0, 8008f96 <__swbuf_r+0x32>
 8008f8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f92:	4638      	mov	r0, r7
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	1a98      	subs	r0, r3, r2
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	b2f6      	uxtb	r6, r6
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	4637      	mov	r7, r6
 8008fa4:	dc05      	bgt.n	8008fb2 <__swbuf_r+0x4e>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff fccb 	bl	8008944 <_fflush_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d1ed      	bne.n	8008f8e <__swbuf_r+0x2a>
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	60a3      	str	r3, [r4, #8]
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	6022      	str	r2, [r4, #0]
 8008fbe:	701e      	strb	r6, [r3, #0]
 8008fc0:	6962      	ldr	r2, [r4, #20]
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d004      	beq.n	8008fd2 <__swbuf_r+0x6e>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d5e1      	bpl.n	8008f92 <__swbuf_r+0x2e>
 8008fce:	2e0a      	cmp	r6, #10
 8008fd0:	d1df      	bne.n	8008f92 <__swbuf_r+0x2e>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fcb5 	bl	8008944 <_fflush_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0d9      	beq.n	8008f92 <__swbuf_r+0x2e>
 8008fde:	e7d6      	b.n	8008f8e <__swbuf_r+0x2a>

08008fe0 <__swsetup_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4b29      	ldr	r3, [pc, #164]	@ (8009088 <__swsetup_r+0xa8>)
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b118      	cbz	r0, 8008ff4 <__swsetup_r+0x14>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <__swsetup_r+0x14>
 8008ff0:	f7ff faa8 	bl	8008544 <__sinit>
 8008ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff8:	0719      	lsls	r1, r3, #28
 8008ffa:	d422      	bmi.n	8009042 <__swsetup_r+0x62>
 8008ffc:	06da      	lsls	r2, r3, #27
 8008ffe:	d407      	bmi.n	8009010 <__swsetup_r+0x30>
 8009000:	2209      	movs	r2, #9
 8009002:	602a      	str	r2, [r5, #0]
 8009004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800900e:	e033      	b.n	8009078 <__swsetup_r+0x98>
 8009010:	0758      	lsls	r0, r3, #29
 8009012:	d512      	bpl.n	800903a <__swsetup_r+0x5a>
 8009014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009016:	b141      	cbz	r1, 800902a <__swsetup_r+0x4a>
 8009018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800901c:	4299      	cmp	r1, r3
 800901e:	d002      	beq.n	8009026 <__swsetup_r+0x46>
 8009020:	4628      	mov	r0, r5
 8009022:	f7ff fbc1 	bl	80087a8 <_free_r>
 8009026:	2300      	movs	r3, #0
 8009028:	6363      	str	r3, [r4, #52]	@ 0x34
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	2300      	movs	r3, #0
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f043 0308 	orr.w	r3, r3, #8
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	b94b      	cbnz	r3, 800905a <__swsetup_r+0x7a>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800904c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009050:	d003      	beq.n	800905a <__swsetup_r+0x7a>
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f883 	bl	8009160 <__smakebuf_r>
 800905a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905e:	f013 0201 	ands.w	r2, r3, #1
 8009062:	d00a      	beq.n	800907a <__swsetup_r+0x9a>
 8009064:	2200      	movs	r2, #0
 8009066:	60a2      	str	r2, [r4, #8]
 8009068:	6962      	ldr	r2, [r4, #20]
 800906a:	4252      	negs	r2, r2
 800906c:	61a2      	str	r2, [r4, #24]
 800906e:	6922      	ldr	r2, [r4, #16]
 8009070:	b942      	cbnz	r2, 8009084 <__swsetup_r+0xa4>
 8009072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009076:	d1c5      	bne.n	8009004 <__swsetup_r+0x24>
 8009078:	bd38      	pop	{r3, r4, r5, pc}
 800907a:	0799      	lsls	r1, r3, #30
 800907c:	bf58      	it	pl
 800907e:	6962      	ldrpl	r2, [r4, #20]
 8009080:	60a2      	str	r2, [r4, #8]
 8009082:	e7f4      	b.n	800906e <__swsetup_r+0x8e>
 8009084:	2000      	movs	r0, #0
 8009086:	e7f7      	b.n	8009078 <__swsetup_r+0x98>
 8009088:	2000001c 	.word	0x2000001c

0800908c <_raise_r>:
 800908c:	291f      	cmp	r1, #31
 800908e:	b538      	push	{r3, r4, r5, lr}
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	d904      	bls.n	80090a0 <_raise_r+0x14>
 8009096:	2316      	movs	r3, #22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090a2:	b112      	cbz	r2, 80090aa <_raise_r+0x1e>
 80090a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a8:	b94b      	cbnz	r3, 80090be <_raise_r+0x32>
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f830 	bl	8009110 <_getpid_r>
 80090b0:	4622      	mov	r2, r4
 80090b2:	4601      	mov	r1, r0
 80090b4:	4628      	mov	r0, r5
 80090b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ba:	f000 b817 	b.w	80090ec <_kill_r>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00a      	beq.n	80090d8 <_raise_r+0x4c>
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	d103      	bne.n	80090ce <_raise_r+0x42>
 80090c6:	2316      	movs	r3, #22
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7e7      	b.n	800909e <_raise_r+0x12>
 80090ce:	2100      	movs	r1, #0
 80090d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090d4:	4620      	mov	r0, r4
 80090d6:	4798      	blx	r3
 80090d8:	2000      	movs	r0, #0
 80090da:	e7e0      	b.n	800909e <_raise_r+0x12>

080090dc <raise>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	@ (80090e8 <raise+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfd3 	b.w	800908c <_raise_r>
 80090e6:	bf00      	nop
 80090e8:	2000001c 	.word	0x2000001c

080090ec <_kill_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	@ (800910c <_kill_r+0x20>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f7f8 f87d 	bl	80011f8 <_kill>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d102      	bne.n	8009108 <_kill_r+0x1c>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b103      	cbz	r3, 8009108 <_kill_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	20005000 	.word	0x20005000

08009110 <_getpid_r>:
 8009110:	f7f8 b86a 	b.w	80011e8 <_getpid>

08009114 <__swhatbuf_r>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	2900      	cmp	r1, #0
 800911e:	b096      	sub	sp, #88	@ 0x58
 8009120:	4615      	mov	r5, r2
 8009122:	461e      	mov	r6, r3
 8009124:	da0d      	bge.n	8009142 <__swhatbuf_r+0x2e>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	bf14      	ite	ne
 8009132:	2340      	movne	r3, #64	@ 0x40
 8009134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009138:	2000      	movs	r0, #0
 800913a:	6031      	str	r1, [r6, #0]
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	b016      	add	sp, #88	@ 0x58
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	466a      	mov	r2, sp
 8009144:	f000 f848 	bl	80091d8 <_fstat_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	dbec      	blt.n	8009126 <__swhatbuf_r+0x12>
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009156:	4259      	negs	r1, r3
 8009158:	4159      	adcs	r1, r3
 800915a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800915e:	e7eb      	b.n	8009138 <__swhatbuf_r+0x24>

08009160 <__smakebuf_r>:
 8009160:	898b      	ldrh	r3, [r1, #12]
 8009162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009164:	079d      	lsls	r5, r3, #30
 8009166:	4606      	mov	r6, r0
 8009168:	460c      	mov	r4, r1
 800916a:	d507      	bpl.n	800917c <__smakebuf_r+0x1c>
 800916c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	2301      	movs	r3, #1
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	b003      	add	sp, #12
 800917a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917c:	ab01      	add	r3, sp, #4
 800917e:	466a      	mov	r2, sp
 8009180:	f7ff ffc8 	bl	8009114 <__swhatbuf_r>
 8009184:	9f00      	ldr	r7, [sp, #0]
 8009186:	4605      	mov	r5, r0
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff f856 	bl	800823c <_malloc_r>
 8009190:	b948      	cbnz	r0, 80091a6 <__smakebuf_r+0x46>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	059a      	lsls	r2, r3, #22
 8009198:	d4ee      	bmi.n	8009178 <__smakebuf_r+0x18>
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	e7e2      	b.n	800916c <__smakebuf_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	6020      	str	r0, [r4, #0]
 80091aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x70>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f81d 	bl	80091fc <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x70>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	431d      	orrs	r5, r3
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cf      	b.n	8009178 <__smakebuf_r+0x18>

080091d8 <_fstat_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	@ (80091f8 <_fstat_r+0x20>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f7f8 f867 	bl	80012b8 <_fstat>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d102      	bne.n	80091f4 <_fstat_r+0x1c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	b103      	cbz	r3, 80091f4 <_fstat_r+0x1c>
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	20005000 	.word	0x20005000

080091fc <_isatty_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	@ (8009218 <_isatty_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 f866 	bl	80012d8 <_isatty>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_isatty_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_isatty_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20005000 	.word	0x20005000

0800921c <_init>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr

08009228 <_fini>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr
